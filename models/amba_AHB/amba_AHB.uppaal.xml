<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta>
<declaration>
typedef int short;
typedef int unsigned_short;
typedef int uint64;
typedef int tlm_sync_enum;
const tlm_sync_enum END_RESP = 2;
const tlm_sync_enum TLM_UPDATED = 2;
const tlm_sync_enum BEGIN_RESP = 1;
const tlm_sync_enum TLM_ACCEPTED = 1;
const tlm_sync_enum TLM_GENERIC_ERROR_RESPONSE = 64;
const tlm_sync_enum TLM_INCOMPLETE_RESPONSE = 16;
const tlm_sync_enum END_REQ = 8;
const tlm_sync_enum TLM_OK_RESPONSE = 32;
const tlm_sync_enum TLM_COMPLETED = 4;
const tlm_sync_enum BEGIN_REQ = 4;
const tlm_sync_enum TLM_WRITE_COMMAND = 16;
const tlm_sync_enum TLM_IGNORE_COMMAND = 32;
const tlm_sync_enum TLM_READ_COMMAND = 8;
const tlm_sync_enum TLM_BURST_ERROR_RESPONSE = 32;
typedef int tlm_dmi;
typedef int sc_uint;
typedef int unsigned_int;
clock global;

///////////////////////////
// MEMORY ALLOCATION STATES
///////////////////////////

const int MEM_FREE = 0;
const int MEM_STATIC_OBJ = 1;
const int MEM_STATIC_ARR_HEAD = 2;
const int MEM_STATIC_ARR_TAIL = 3;
const int MEM_DYN_OBJ = 4;
const int MEM_DYN_ARR_HEAD = 5;
const int MEM_DYN_ARR_TAIL = 6;
const int NULL = -1;

////////////////////////
// MEMORY RELATED ERRORS
////////////////////////

bool MEM_ERR_ACCESS_FAIL = false;
bool MEM_ERR_DOUBLE_FREE = false;
bool MEM_ERR_INVALID_ARR_DELETE = false;
bool MEM_ERR_INVALID_OBJ_DELETE = false;
bool MEM_ERR_DELETE_ON_STATIC_VAR = false;
bool MEM_ERR_NOT_ENOUGH_MEM = false;
bool MEM_ERR_CORRUPTED_MEM = false;
bool MEM_ERR_FRAGMENTED_MEM = false;


///////////////////
// BOOL - globals
///////////////////

const bool DEFAULT_BOOL_VALUE = false;
const int BOOL_MEMSIZE = 0;
int BOOL_FREE_MEM = BOOL_MEMSIZE;
typedef int[NULL, BOOL_MEMSIZE-1] bool_addr_ptr;


///////////////////
// INT - globals
///////////////////

const int DEFAULT_INT_VALUE = 0;
const int INT_MEMSIZE = 50;
int INT_FREE_MEM = INT_MEMSIZE;
typedef int[NULL, INT_MEMSIZE-1] int_addr_ptr;
int[0, 6] intMemState[INT_MEMSIZE];
int intMem[INT_MEMSIZE];
bool MEM_ERR_FRAGMENTED_MEM_INT = false;
bool MEM_ERR_NOT_ENOUGH_MEM_INT = false;


///////////////////
// TLM_DMI - globals
///////////////////

const tlm_dmi DEFAULT_TLM_DMI_VALUE = 0;
const int TLM_DMI_MEMSIZE = 0;
int TLM_DMI_FREE_MEM = TLM_DMI_MEMSIZE;
typedef int[NULL, TLM_DMI_MEMSIZE-1] tlm_dmi_addr_ptr;


///////////////////
// TLM_SYNC_ENUM - globals
///////////////////

const tlm_sync_enum DEFAULT_TLM_SYNC_ENUM_VALUE = 0;
const int TLM_SYNC_ENUM_MEMSIZE = 0;
int TLM_SYNC_ENUM_FREE_MEM = TLM_SYNC_ENUM_MEMSIZE;
typedef int[NULL, TLM_SYNC_ENUM_MEMSIZE-1] tlm_sync_enum_addr_ptr;


///////////////////
// UINT64 - globals
///////////////////

const uint64 DEFAULT_UINT64_VALUE = 0;
const int UINT64_MEMSIZE = 0;
int UINT64_FREE_MEM = UINT64_MEMSIZE;
typedef int[NULL, UINT64_MEMSIZE-1] uint64_addr_ptr;


///////////////////
// UNSIGNED_INT - globals
///////////////////

const unsigned_int DEFAULT_UNSIGNED_INT_VALUE = 0;
const int UNSIGNED_INT_MEMSIZE = 21;
int UNSIGNED_INT_FREE_MEM = UNSIGNED_INT_MEMSIZE;
typedef int[NULL, UNSIGNED_INT_MEMSIZE-1] unsigned_int_addr_ptr;
int[0, 6] unsigned_intMemState[UNSIGNED_INT_MEMSIZE];
unsigned_int unsigned_intMem[UNSIGNED_INT_MEMSIZE];
bool MEM_ERR_FRAGMENTED_MEM_UNSIGNED_INT = false;
bool MEM_ERR_NOT_ENOUGH_MEM_UNSIGNED_INT = false;


///////////////////
// UNSIGNED_SHORT - globals
///////////////////

const unsigned_short DEFAULT_UNSIGNED_SHORT_VALUE = 0;
const int UNSIGNED_SHORT_MEMSIZE = 0;
int UNSIGNED_SHORT_FREE_MEM = UNSIGNED_SHORT_MEMSIZE;
typedef int[NULL, UNSIGNED_SHORT_MEMSIZE-1] unsigned_short_addr_ptr;


///////////////////
// DATA - globals
///////////////////

typedef struct {int address; unsigned_int amba_id; unsigned_int_addr_ptr burst_size; unsigned_int command; unsigned_int data_length; unsigned_int_addr_ptr data_ptr; int response_status; int streaming_width; int_addr_ptr trans_type;} data;
const data DEFAULT_DATA_VALUE = {0, 0, NULL, 0, 0, NULL, 0, 0, NULL};
const int DATA_MEMSIZE = 23;
int DATA_FREE_MEM = DATA_MEMSIZE;
typedef int[NULL, DATA_MEMSIZE-1] data_addr_ptr;
int[0, 6] dataMemState[DATA_MEMSIZE];
data dataMem[DATA_MEMSIZE];
bool MEM_ERR_FRAGMENTED_MEM_DATA = false;
bool MEM_ERR_NOT_ENOUGH_MEM_DATA = false;


///////////////////
// TLMDATA - globals
///////////////////

typedef struct {int address; unsigned_int command; unsigned_int_addr_ptr data_ptr; unsigned_int data_length; int response_status; int streaming_width;} tlmdata;
const tlmdata DEFAULT_TLMDATA_VALUE = {0, 0, NULL, 0, 0, 0};
const int TLMDATA_MEMSIZE = 2;
int TLMDATA_FREE_MEM = TLMDATA_MEMSIZE;
typedef int[NULL, TLMDATA_MEMSIZE-1] tlmdata_addr_ptr;
int[0, 6] tlmdataMemState[TLMDATA_MEMSIZE];
tlmdata tlmdataMem[TLMDATA_MEMSIZE];
bool MEM_ERR_FRAGMENTED_MEM_TLMDATA = false;
bool MEM_ERR_NOT_ENOUGH_MEM_TLMDATA = false;


///////////////////
// Global Variable Definition
///////////////////

bool PEQ_ERR_OUT_OF_ELEMENTS = false;
int clk$val;
int clk$_val;
int clk$delta;
int clk$period;
tlmdata_addr_ptr TLM2_M1$d = NULL;
uint64 AHB_M1$current_Address;
unsigned_int AHB_M1$current_Command;
unsigned_int AHB_M1$current_DataLength;
data_addr_ptr AHB_M1$current_trans = NULL;
unsigned_int AHB_M1$master_id;
bool AHB_M1$m_bus_granted;
bool AHB_M1$m_bus_req_pending;
unsigned_int AHB_M1$m_data_count;
bool AHB_M1$m_data_pending;
bool AHB_M1$m_request_pending;
bool AHB_M1$m_restart_pending_req;
unsigned_int AHB_M1$m_txn_count;
tlmdata_addr_ptr TLM2_M2$d = NULL;
uint64 AHB_M2$current_Address;
unsigned_int AHB_M2$current_Command;
unsigned_int AHB_M2$current_DataLength;
data_addr_ptr AHB_M2$current_trans = NULL;
unsigned_int AHB_M2$master_id;
bool AHB_M2$m_bus_granted;
bool AHB_M2$m_bus_req_pending;
unsigned_int AHB_M2$m_data_count;
bool AHB_M2$m_data_pending;
bool AHB_M2$m_request_pending;
bool AHB_M2$m_restart_pending_req;
unsigned_int AHB_M2$m_txn_count;
unsigned_int AHB_S1$baseAddr;
unsigned_int AHB_S1$counter;
data_addr_ptr AHB_S1$current_trans = NULL;
unsigned_int_addr_ptr AHB_S1$MEM = NULL;
unsigned_int AHB_S1$mem_size;
bool AHB_S1$m_data_pending;
bool AHB_S1$m_request_pending;
unsigned_int AHB_S1$txn_address;
unsigned_int AHB_S1$txn_burst_len;
unsigned_int AHB_S2$baseAddr;
unsigned_int AHB_S2$counter;
data_addr_ptr AHB_S2$current_trans = NULL;
unsigned_int_addr_ptr AHB_S2$MEM = NULL;
unsigned_int AHB_S2$mem_size;
bool AHB_S2$m_data_pending;
bool AHB_S2$m_request_pending;
unsigned_int AHB_S2$txn_address;
unsigned_int AHB_S2$txn_burst_len;
data_addr_ptr AHB_Bus$outstanding_req = NULL;
data_addr_ptr AHB_Bus$outstanding_data = NULL;
unsigned_int AHB_Bus$outstanding_txn_count;
unsigned_int AHB_Bus$data_count;
unsigned_int AHB_Bus$current_req_master;
unsigned_int AHB_Bus$current_data_master;
unsigned_short AHB_Bus$m_BusRequest_Register;
unsigned_short AHB_Bus$m_InService_Register;
data_addr_ptr AHB_Bus$m_grant_txn = NULL;
int_addr_ptr AHB_Bus$m_grant_phase = NULL;
int_addr_ptr AHB_Bus$m_grant_time = NULL;
int AHB_Bus$m_bus_req_sample_time;
int AHB_Bus$m_req_sample_time;
unsigned_int AHB_Bus$m_drop_cycle;
unsigned_int_addr_ptr AHB_Bus$m_default_size = NULL;
int AHB_Bus$m_outstanding_req_type;
chan activate;
chan deactivate;
chan updatestart;
chan updateend;
broadcast chan initdone;
broadcast chan deltadelay;
broadcast chan advancetime;
int deltacount = 0;
int readyprocs = 3;
int updaterequests = 0;
chan scmodules_initialized;
broadcast chan dummybchannel;
chan dummychannel;
int dummyinteger;
broadcast chan clk$edge$wait;
chan clk$edge$notify;
chan clk$edge$notify_imm;
int clk$edge$notify_t;
broadcast chan clk$change$wait;
chan clk$change$notify;
chan clk$change$notify_imm;
int clk$change$notify_t;
broadcast chan clk$thread0$sensitivechan;
broadcast chan clk$thread0$timeoutevent$wait;
chan clk$thread0$timeoutevent$notify;
chan clk$thread0$timeoutevent$notify_imm;
int clk$thread0$timeoutevent$notify_t;
chan clk$thread0$sc_clock$run$ctrl;
broadcast chan TLM2_M1$pos_clk_edge$wait;
chan TLM2_M1$pos_clk_edge$notify;
chan TLM2_M1$pos_clk_edge$notify_imm;
int TLM2_M1$pos_clk_edge$notify_t;
broadcast chan TLM2_M1$thread0$sensitivechan;
chan TLM2_M1$tlm2_simple_master$clock_tick$ctrl;
broadcast chan TLM2_M1$thread1$sensitivechan;
chan TLM2_M1$thread1$tlm2_simple_master$thread_process$ctrl;
chan TLM2_M1$thread1$AHB_M1$tlm2_master_to_ahb$b_transport$ctrl;
tlmdata_addr_ptr TLM2_M1$thread1$AHB_M1$tlm2_master_to_ahb$b_transport$param$tran = NULL;
int_addr_ptr TLM2_M1$thread1$AHB_M1$tlm2_master_to_ahb$b_transport$param$t = NULL;
broadcast chan AHB_M1$b_transport_finished_ev$wait;
chan AHB_M1$b_transport_finished_ev$notify;
chan AHB_M1$b_transport_finished_ev$notify_imm;
int AHB_M1$b_transport_finished_ev$notify_t;
broadcast chan AHB_M1$thread0$sensitivechan;
chan AHB_M1$tlm2_master_to_ahb$clock_tick$ctrl;
chan AHB_M1$tlm2_master_to_ahb$dataProcess$ctrl;
chan AHB_M1$tlm2_master_to_ahb$sendData$ctrl;
chan AHB_Bus$ahb_simple_bus$nb_transport_fw$ctrl;
data_addr_ptr AHB_Bus$ahb_simple_bus$nb_transport_fw$param$tran = NULL;
int_addr_ptr AHB_Bus$ahb_simple_bus$nb_transport_fw$param$phase = NULL;
int_addr_ptr AHB_Bus$ahb_simple_bus$nb_transport_fw$param$t = NULL;
tlm_sync_enum AHB_Bus$ahb_simple_bus$nb_transport_fw$return;
chan AHB_S1$ahb_simple_mem$nb_transport_fw$ctrl;
data_addr_ptr AHB_S1$ahb_simple_mem$nb_transport_fw$param$tran = NULL;
int_addr_ptr AHB_S1$ahb_simple_mem$nb_transport_fw$param$phase = NULL;
int_addr_ptr AHB_S1$ahb_simple_mem$nb_transport_fw$param$t = NULL;
tlm_sync_enum AHB_S1$ahb_simple_mem$nb_transport_fw$return;
chan AHB_S1$m_peq$notify$peq_notify$ctrl;
chan AHB_S1$m_peq$notify$peq_element$ctrl[4];
bool AHB_S1$m_peq$notify$peqInUse[4];
data_addr_ptr AHB_S1$m_peq$fetch$peq_cb$param$tran = NULL;
chan AHB_S1$m_peq$fetch$peq_fetch$ctrl;
int_addr_ptr AHB_S1$m_peq$fetch$peq_cb$param$phase = NULL;
int AHB_S1$m_peq$peq_element$param$delay;
data_addr_ptr AHB_S1$m_peq$peq_element$param$trans = NULL;
int_addr_ptr AHB_S1$m_peq$peq_element$param$phase = NULL;
chan AHB_S1$ahb_simple_mem$peq_cb$ctrl;
data_addr_ptr AHB_S1$ahb_simple_mem$peq_cb$param$tran = NULL;
int_addr_ptr AHB_S1$ahb_simple_mem$peq_cb$param$phase = NULL;
chan AHB_S2$ahb_simple_mem$nb_transport_fw$ctrl;
data_addr_ptr AHB_S2$ahb_simple_mem$nb_transport_fw$param$tran = NULL;
int_addr_ptr AHB_S2$ahb_simple_mem$nb_transport_fw$param$phase = NULL;
int_addr_ptr AHB_S2$ahb_simple_mem$nb_transport_fw$param$t = NULL;
tlm_sync_enum AHB_S2$ahb_simple_mem$nb_transport_fw$return;
chan AHB_S2$m_peq$notify$peq_notify$ctrl;
chan AHB_S2$m_peq$notify$peq_element$ctrl[4];
bool AHB_S2$m_peq$notify$peqInUse[4];
data_addr_ptr AHB_S2$m_peq$fetch$peq_cb$param$tran = NULL;
chan AHB_S2$m_peq$fetch$peq_fetch$ctrl;
int_addr_ptr AHB_S2$m_peq$fetch$peq_cb$param$phase = NULL;
int AHB_S2$m_peq$peq_element$param$delay;
data_addr_ptr AHB_S2$m_peq$peq_element$param$trans = NULL;
int_addr_ptr AHB_S2$m_peq$peq_element$param$phase = NULL;
chan AHB_S2$ahb_simple_mem$peq_cb$ctrl;
data_addr_ptr AHB_S2$ahb_simple_mem$peq_cb$param$tran = NULL;
int_addr_ptr AHB_S2$ahb_simple_mem$peq_cb$param$phase = NULL;
chan AHB_Bus$ahb_simple_bus$get_index$ctrl;
uint64 AHB_Bus$ahb_simple_bus$get_index$param$address;
unsigned_int AHB_Bus$ahb_simple_bus$get_index$return;
chan AHB_Bus$ahb_simple_bus$nb_transport_bw$ctrl;
data_addr_ptr AHB_Bus$ahb_simple_bus$nb_transport_bw$param$tran = NULL;
int_addr_ptr AHB_Bus$ahb_simple_bus$nb_transport_bw$param$phase = NULL;
int_addr_ptr AHB_Bus$ahb_simple_bus$nb_transport_bw$param$t = NULL;
tlm_sync_enum AHB_Bus$ahb_simple_bus$nb_transport_bw$return;
chan AHB_M1$tlm2_master_to_ahb$nb_transport_bw$ctrl;
data_addr_ptr AHB_M1$tlm2_master_to_ahb$nb_transport_bw$param$tran = NULL;
int_addr_ptr AHB_M1$tlm2_master_to_ahb$nb_transport_bw$param$phase = NULL;
int_addr_ptr AHB_M1$tlm2_master_to_ahb$nb_transport_bw$param$t = NULL;
tlm_sync_enum AHB_M1$tlm2_master_to_ahb$nb_transport_bw$return;
chan AHB_M1$m_peq$notify$peq_notify$ctrl;
chan AHB_M1$m_peq$notify$peq_element$ctrl[4];
bool AHB_M1$m_peq$notify$peqInUse[4];
data_addr_ptr AHB_M1$m_peq$fetch$peq_cb$param$tran = NULL;
chan AHB_M1$m_peq$fetch$peq_fetch$ctrl;
int_addr_ptr AHB_M1$m_peq$fetch$peq_cb$param$phase = NULL;
int AHB_M1$m_peq$peq_element$param$delay;
data_addr_ptr AHB_M1$m_peq$peq_element$param$trans = NULL;
int_addr_ptr AHB_M1$m_peq$peq_element$param$phase = NULL;
chan AHB_M1$tlm2_master_to_ahb$peq_cb$ctrl;
data_addr_ptr AHB_M1$tlm2_master_to_ahb$peq_cb$param$tran = NULL;
int_addr_ptr AHB_M1$tlm2_master_to_ahb$peq_cb$param$phase = NULL;
chan AHB_M1$tlm2_master_to_ahb$receiveData$ctrl;
data_addr_ptr AHB_M1$tlm2_master_to_ahb$receiveData$param$tran = NULL;
chan AHB_M1$tlm2_master_to_ahb$requestProcess$ctrl;
chan AHB_M1$tlm2_master_to_ahb$busNotGranted$ctrl;
chan AHB_M1$tlm2_master_to_ahb$busGranted$ctrl;
chan AHB_M1$tlm2_master_to_ahb$startRequest$ctrl;
chan AHB_M1$tlm2_master_to_ahb$resumeRequest$ctrl;
chan AHB_M2$tlm2_master_to_ahb$nb_transport_bw$ctrl;
data_addr_ptr AHB_M2$tlm2_master_to_ahb$nb_transport_bw$param$tran = NULL;
int_addr_ptr AHB_M2$tlm2_master_to_ahb$nb_transport_bw$param$phase = NULL;
int_addr_ptr AHB_M2$tlm2_master_to_ahb$nb_transport_bw$param$t = NULL;
tlm_sync_enum AHB_M2$tlm2_master_to_ahb$nb_transport_bw$return;
chan AHB_M2$m_peq$notify$peq_notify$ctrl;
chan AHB_M2$m_peq$notify$peq_element$ctrl[4];
bool AHB_M2$m_peq$notify$peqInUse[4];
data_addr_ptr AHB_M2$m_peq$fetch$peq_cb$param$tran = NULL;
chan AHB_M2$m_peq$fetch$peq_fetch$ctrl;
int_addr_ptr AHB_M2$m_peq$fetch$peq_cb$param$phase = NULL;
int AHB_M2$m_peq$peq_element$param$delay;
data_addr_ptr AHB_M2$m_peq$peq_element$param$trans = NULL;
int_addr_ptr AHB_M2$m_peq$peq_element$param$phase = NULL;
chan AHB_M2$tlm2_master_to_ahb$peq_cb$ctrl;
data_addr_ptr AHB_M2$tlm2_master_to_ahb$peq_cb$param$tran = NULL;
int_addr_ptr AHB_M2$tlm2_master_to_ahb$peq_cb$param$phase = NULL;
chan AHB_M2$tlm2_master_to_ahb$receiveData$ctrl;
data_addr_ptr AHB_M2$tlm2_master_to_ahb$receiveData$param$tran = NULL;
chan AHB_M2$tlm2_master_to_ahb$dataProcess$ctrl;
chan AHB_M2$tlm2_master_to_ahb$sendData$ctrl;
chan AHB_M2$tlm2_master_to_ahb$requestProcess$ctrl;
chan AHB_M2$tlm2_master_to_ahb$busNotGranted$ctrl;
chan AHB_M2$tlm2_master_to_ahb$busGranted$ctrl;
chan AHB_M2$tlm2_master_to_ahb$startRequest$ctrl;
chan AHB_M2$tlm2_master_to_ahb$resumeRequest$ctrl;
broadcast chan TLM2_M2$pos_clk_edge$wait;
chan TLM2_M2$pos_clk_edge$notify;
chan TLM2_M2$pos_clk_edge$notify_imm;
int TLM2_M2$pos_clk_edge$notify_t;
broadcast chan TLM2_M2$thread0$sensitivechan;
chan TLM2_M2$tlm2_simple_master$clock_tick$ctrl;
broadcast chan TLM2_M2$thread1$sensitivechan;
chan TLM2_M2$thread1$tlm2_simple_master$thread_process$ctrl;
chan TLM2_M2$thread1$AHB_M2$tlm2_master_to_ahb$b_transport$ctrl;
tlmdata_addr_ptr TLM2_M2$thread1$AHB_M2$tlm2_master_to_ahb$b_transport$param$tran = NULL;
int_addr_ptr TLM2_M2$thread1$AHB_M2$tlm2_master_to_ahb$b_transport$param$t = NULL;
broadcast chan AHB_M2$b_transport_finished_ev$wait;
chan AHB_M2$b_transport_finished_ev$notify;
chan AHB_M2$b_transport_finished_ev$notify_imm;
int AHB_M2$b_transport_finished_ev$notify_t;
broadcast chan AHB_M2$thread0$sensitivechan;
chan AHB_M2$tlm2_master_to_ahb$clock_tick$ctrl;
broadcast chan AHB_S1$thread0$sensitivechan;
chan AHB_S1$ahb_simple_mem$responseProcess$ctrl;
chan AHB_S1$ahb_simple_mem$writeData$ctrl;
unsigned_int_addr_ptr AHB_S1$ahb_simple_mem$writeData$param$burst_size = NULL;
chan AHB_S1$ahb_simple_mem$readData$ctrl;
unsigned_int_addr_ptr AHB_S1$ahb_simple_mem$readData$param$burst_size = NULL;
broadcast chan AHB_S2$thread0$sensitivechan;
chan AHB_S2$ahb_simple_mem$responseProcess$ctrl;
chan AHB_S2$ahb_simple_mem$writeData$ctrl;
unsigned_int_addr_ptr AHB_S2$ahb_simple_mem$writeData$param$burst_size = NULL;
chan AHB_S2$ahb_simple_mem$readData$ctrl;
unsigned_int_addr_ptr AHB_S2$ahb_simple_mem$readData$param$burst_size = NULL;
broadcast chan AHB_Bus$end_data_ev$wait;
chan AHB_Bus$end_data_ev$notify;
chan AHB_Bus$end_data_ev$notify_imm;
int AHB_Bus$end_data_ev$notify_t;
broadcast chan AHB_Bus$bus_ungrant_ev$wait;
chan AHB_Bus$bus_ungrant_ev$notify;
chan AHB_Bus$bus_ungrant_ev$notify_imm;
int AHB_Bus$bus_ungrant_ev$notify_t;
broadcast chan AHB_Bus$bus_grant_ev$wait;
chan AHB_Bus$bus_grant_ev$notify;
chan AHB_Bus$bus_grant_ev$notify_imm;
int AHB_Bus$bus_grant_ev$notify_t;
broadcast chan AHB_Bus$thread0$sensitivechan;
chan AHB_Bus$ahb_simple_bus$bus_ungrant$ctrl;
broadcast chan AHB_Bus$thread1$sensitivechan;
chan AHB_Bus$ahb_simple_bus$bus_grant$ctrl;
chan AHB_Bus$ahb_simple_bus$arbitrate$ctrl;
broadcast chan AHB_Bus$thread2$sensitivechan;
chan AHB_Bus$ahb_simple_bus$pendingReqProcess$ctrl;


///////////////////
// INT - helper functions
///////////////////

bool is_free_elem_int(int_addr_ptr pos) {
	return intMemState[pos] == MEM_FREE;
}

bool is_obj_elem_int(int_addr_ptr pos) {
	return intMemState[pos] == MEM_STATIC_OBJ || intMemState[pos] == MEM_DYN_OBJ;
}

bool is_static_elem_int(int_addr_ptr pos) {
	return intMemState[pos] == MEM_STATIC_OBJ || intMemState[pos] == MEM_STATIC_ARR_HEAD || intMemState[pos] == MEM_STATIC_ARR_TAIL;
}

bool is_dynamic_elem_int(int_addr_ptr pos) {
	return intMemState[pos] == MEM_DYN_OBJ || intMemState[pos] == MEM_DYN_ARR_HEAD || intMemState[pos] == MEM_DYN_ARR_TAIL;
}

bool is_arr_head_elem_int(int_addr_ptr pos) {
	return intMemState[pos] == MEM_STATIC_ARR_HEAD || intMemState[pos] == MEM_DYN_ARR_HEAD;
}

bool is_arr_tail_elem_int(int_addr_ptr pos) {
	return intMemState[pos] == MEM_STATIC_ARR_TAIL || intMemState[pos] == MEM_DYN_ARR_TAIL;
}

void check_mem_errors_for_delete_int(int_addr_ptr pos, bool isStatic, bool shouldBeAnArray) {
	if (pos == NULL) {
		MEM_ERR_CORRUPTED_MEM = true;
	} else if (is_free_elem_int(pos)) {
		MEM_ERR_DOUBLE_FREE = true;
	} else if (not is_obj_elem_int(pos) &amp;&amp; not is_arr_head_elem_int(pos)) {
		// something went completely wrong :(
		// ex: delete somewhere in the middle of an array
		MEM_ERR_CORRUPTED_MEM = true;
	} else {
		if (!isStatic &amp;&amp; is_static_elem_int(pos)) {
			MEM_ERR_DELETE_ON_STATIC_VAR = true;
		}
		if (shouldBeAnArray) {
			if (not is_arr_head_elem_int(pos)) {
				MEM_ERR_INVALID_ARR_DELETE = true; // shouldn't have called 'delete []' ?
			}
		} else { // delete normal obj
			if (not is_obj_elem_int(pos)) {
				MEM_ERR_INVALID_OBJ_DELETE = true;
			}
		}
	}
}

bool addr_is_in_range_int(int pos) {
	return pos &gt;= 0 &amp;&amp; pos &lt; INT_MEMSIZE;
}

bool addr_is_valid_int(int pos) {
	return addr_is_in_range_int(pos) &amp;&amp; intMemState[pos] != MEM_FREE;
}

bool is_arr_elem_int(int head, int index) {
	int i;
	if (!addr_is_in_range_int(head + index)) {
		return false;
	}
	if (!is_arr_head_elem_int(head)) {
		return false;
	}
	if (index &lt; 0) { // assuming heap/stack arrays grow leftward
		return false;
	}
	for (i = head + 1; i &lt;= head + index; i++) {
		if (!is_arr_tail_elem_int(i)) {
			return false;
		}
	}
	return true;
}


///////////////////
// INT - private
///////////////////

void allocate_and_init_int(int memState, int_addr_ptr pos, int value) {
	if (pos == NULL) {
		MEM_ERR_CORRUPTED_MEM = true;
	} else {
		intMemState[pos] = memState;
		intMem[pos] = value;
        if (memState == MEM_FREE) {
            INT_FREE_MEM++;
        } else {
            INT_FREE_MEM--;
        }
	}
}

void allocate_int(int memState, int_addr_ptr pos) {
	allocate_and_init_int(memState, pos, DEFAULT_INT_VALUE);
}

int_addr_ptr find_free_pos_int(int memState) {
	int_addr_ptr pos = NULL;
	if (memState == MEM_STATIC_OBJ) { // stack
		for(pos = 0; pos &lt;= INT_MEMSIZE - 1; pos++) {
			if (intMemState[pos] == MEM_FREE) {
				return pos;
			}
		}
	} else if (memState == MEM_DYN_OBJ) { // heap
		for(pos = INT_MEMSIZE - 1; pos &gt;= 0; pos--) {
			if (intMemState[pos] == MEM_FREE) {
				return pos;
			}
		}
	}
	return NULL;
}

int_addr_ptr find_free_pos_and_allocate_and_init_int(int memState, int value) {
	int_addr_ptr pos;
	if (INT_FREE_MEM == 0) {
		MEM_ERR_NOT_ENOUGH_MEM = true;
		MEM_ERR_NOT_ENOUGH_MEM_INT = true;
		return NULL;
	}
	pos = find_free_pos_int(memState);
	if (pos == NULL) {
		MEM_ERR_CORRUPTED_MEM = true;
	} else {
		allocate_and_init_int(memState, pos, value);
	}
	return pos;
}

int_addr_ptr find_free_pos_and_allocate_int(int memState) {
	return find_free_pos_and_allocate_and_init_int(memState, DEFAULT_INT_VALUE);
}

void delete_int(int_addr_ptr pos, bool isStatic) {
	check_mem_errors_for_delete_int(pos, isStatic, false);
	allocate_and_init_int(MEM_FREE, pos, DEFAULT_INT_VALUE);
}
//////////////////
// INT - public
//////////////////

int_addr_ptr allocate_static_int() {
	return find_free_pos_and_allocate_and_init_int(MEM_STATIC_OBJ, DEFAULT_INT_VALUE);
}

int_addr_ptr allocate_dynamic_int() {
	return find_free_pos_and_allocate_and_init_int(MEM_DYN_OBJ, DEFAULT_INT_VALUE);
}

int_addr_ptr allocate_static_and_init_int(int value) {
	return find_free_pos_and_allocate_and_init_int(MEM_STATIC_OBJ, value);
}

int_addr_ptr allocate_dynamic_and_init_int(int value) {
	return find_free_pos_and_allocate_and_init_int(MEM_DYN_OBJ, value);
}

void delete_static_int(int_addr_ptr pos) {
	delete_int(pos, true);
}

void delete_dynamic_int(int_addr_ptr pos) {
	delete_int(pos, false);
}

void empty_stack_int(int_addr_ptr pos) {
	if (pos != NULL) {
	    allocate_and_init_int(MEM_FREE, pos, DEFAULT_INT_VALUE);
	}
}


/////////////////////////
// INT ARRAY - private
/////////////////////////

int_addr_ptr find_free_pos_arr_int(int memState, int length) {
	int count = 0;
	int_addr_ptr pos = -1;
	int i = 0;
	if (memState == MEM_STATIC_ARR_HEAD) {
		for (i = 0; i &lt;= INT_MEMSIZE - 1; i++) {
			if (intMemState[i] == MEM_FREE) {
				if (count == 0) {
					pos = i;
				}
				count++;
				if (count == length) {
					return pos;
				}
			} else if (is_static_elem_int(i)) {
				count = 0;
				pos = NULL;
			} else {
				return NULL;
			}
		}
	} else if (memState == MEM_DYN_ARR_HEAD) {
		for(i = INT_MEMSIZE - 1; i &gt;= 0; i--) {
			if (intMemState[i] == MEM_FREE) {
				if (count == 0) {
					pos = i;
				}
				count++;
				if (count == length) {
					return pos - length + 1; // return the 'lower' index w.r.t. the memArray; + 1 because count starts at 0
				}
			} else if (is_static_elem_int(i)) {
				count = 0;
				pos = NULL;
			} else {
				return NULL;
			}
		}
	}
	return NULL;
}

int_addr_ptr allocate_arr_int(int memState, int length) {
	int i;
    int_addr_ptr pos;
    int tailElemStateType;
    if (INT_FREE_MEM &lt; length) {
		MEM_ERR_NOT_ENOUGH_MEM = true;
		MEM_ERR_NOT_ENOUGH_MEM_INT = true;
		return NULL;
	}
	pos = find_free_pos_arr_int(memState, length);
	if (pos == NULL) {
		MEM_ERR_FRAGMENTED_MEM = true;
		MEM_ERR_FRAGMENTED_MEM_INT = true;
		return NULL;
	}
	if (memState == MEM_STATIC_ARR_HEAD) {
		tailElemStateType = MEM_STATIC_ARR_TAIL;
	} else {
		tailElemStateType = MEM_DYN_ARR_TAIL;
	}
	allocate_int(memState, pos); // allocate head
	for(i = pos + 1; i &lt; (pos + length); i++) {
		allocate_int(tailElemStateType, i);
	}
	return pos;
}

void delete_arr_int(int_addr_ptr pos, bool isStatic) {
	int i = pos + 1;
	check_mem_errors_for_delete_int(pos, isStatic, true);
	allocate_and_init_int(MEM_FREE, pos, DEFAULT_INT_VALUE);
	while(i &lt; INT_MEMSIZE &amp;&amp; is_arr_tail_elem_int(i)) {
		allocate_and_init_int(MEM_FREE, i, DEFAULT_INT_VALUE);
		i++;
	}
}

////////////////////////
// INT ARRAY - public
////////////////////////

int_addr_ptr allocate_static_arr_int(int length) {
	return allocate_arr_int(MEM_STATIC_ARR_HEAD, length);
}

int_addr_ptr allocate_dynamic_arr_int(int length) {
	return allocate_arr_int(MEM_DYN_ARR_HEAD, length);
}

void delete_arr_static_int(int_addr_ptr pos) {
	delete_arr_int(pos, true);
}

void delete_arr_dynamic_int(int_addr_ptr pos) {
	delete_arr_int(pos, false);
}

void empty_stack_arr_int(int_addr_ptr pos) {
	int i = pos + 1;
	if (pos != NULL) {
		allocate_and_init_int(MEM_FREE, pos, DEFAULT_INT_VALUE);
		while(i &lt; INT_MEMSIZE &amp;&amp; is_arr_tail_elem_int(i)) {
			allocate_and_init_int(MEM_FREE, i, DEFAULT_INT_VALUE);
			i++;
		}
	}
}

void init_arr_elem_int(int_addr_ptr pos, int value) {
	if (pos == NULL) {
		MEM_ERR_CORRUPTED_MEM = true;
	} else {
		intMem[pos] = value;
	}
}





///////////////////
// UNSIGNED_INT - helper functions
///////////////////

bool is_free_elem_unsigned_int(unsigned_int_addr_ptr pos) {
	return unsigned_intMemState[pos] == MEM_FREE;
}

bool is_obj_elem_unsigned_int(unsigned_int_addr_ptr pos) {
	return unsigned_intMemState[pos] == MEM_STATIC_OBJ || unsigned_intMemState[pos] == MEM_DYN_OBJ;
}

bool is_static_elem_unsigned_int(unsigned_int_addr_ptr pos) {
	return unsigned_intMemState[pos] == MEM_STATIC_OBJ || unsigned_intMemState[pos] == MEM_STATIC_ARR_HEAD || unsigned_intMemState[pos] == MEM_STATIC_ARR_TAIL;
}

bool is_dynamic_elem_unsigned_int(unsigned_int_addr_ptr pos) {
	return unsigned_intMemState[pos] == MEM_DYN_OBJ || unsigned_intMemState[pos] == MEM_DYN_ARR_HEAD || unsigned_intMemState[pos] == MEM_DYN_ARR_TAIL;
}

bool is_arr_head_elem_unsigned_int(unsigned_int_addr_ptr pos) {
	return unsigned_intMemState[pos] == MEM_STATIC_ARR_HEAD || unsigned_intMemState[pos] == MEM_DYN_ARR_HEAD;
}

bool is_arr_tail_elem_unsigned_int(unsigned_int_addr_ptr pos) {
	return unsigned_intMemState[pos] == MEM_STATIC_ARR_TAIL || unsigned_intMemState[pos] == MEM_DYN_ARR_TAIL;
}

void check_mem_errors_for_delete_unsigned_int(unsigned_int_addr_ptr pos, bool isStatic, bool shouldBeAnArray) {
	if (pos == NULL) {
		MEM_ERR_CORRUPTED_MEM = true;
	} else if (is_free_elem_unsigned_int(pos)) {
		MEM_ERR_DOUBLE_FREE = true;
	} else if (not is_obj_elem_unsigned_int(pos) &amp;&amp; not is_arr_head_elem_unsigned_int(pos)) {
		// something went completely wrong :(
		// ex: delete somewhere in the middle of an array
		MEM_ERR_CORRUPTED_MEM = true;
	} else {
		if (!isStatic &amp;&amp; is_static_elem_unsigned_int(pos)) {
			MEM_ERR_DELETE_ON_STATIC_VAR = true;
		}
		if (shouldBeAnArray) {
			if (not is_arr_head_elem_unsigned_int(pos)) {
				MEM_ERR_INVALID_ARR_DELETE = true; // shouldn't have called 'delete []' ?
			}
		} else { // delete normal obj
			if (not is_obj_elem_unsigned_int(pos)) {
				MEM_ERR_INVALID_OBJ_DELETE = true;
			}
		}
	}
}

bool addr_is_in_range_unsigned_int(int pos) {
	return pos &gt;= 0 &amp;&amp; pos &lt; UNSIGNED_INT_MEMSIZE;
}

bool addr_is_valid_unsigned_int(int pos) {
	return addr_is_in_range_unsigned_int(pos) &amp;&amp; unsigned_intMemState[pos] != MEM_FREE;
}

bool is_arr_elem_unsigned_int(int head, int index) {
	int i;
	if (!addr_is_in_range_unsigned_int(head + index)) {
		return false;
	}
	if (!is_arr_head_elem_unsigned_int(head)) {
		return false;
	}
	if (index &lt; 0) { // assuming heap/stack arrays grow leftward
		return false;
	}
	for (i = head + 1; i &lt;= head + index; i++) {
		if (!is_arr_tail_elem_unsigned_int(i)) {
			return false;
		}
	}
	return true;
}


///////////////////
// UNSIGNED_INT - private
///////////////////

void allocate_and_init_unsigned_int(int memState, unsigned_int_addr_ptr pos, unsigned_int value) {
	if (pos == NULL) {
		MEM_ERR_CORRUPTED_MEM = true;
	} else {
		unsigned_intMemState[pos] = memState;
		unsigned_intMem[pos] = value;
        if (memState == MEM_FREE) {
            UNSIGNED_INT_FREE_MEM++;
        } else {
            UNSIGNED_INT_FREE_MEM--;
        }
	}
}

void allocate_unsigned_int(int memState, unsigned_int_addr_ptr pos) {
	allocate_and_init_unsigned_int(memState, pos, DEFAULT_UNSIGNED_INT_VALUE);
}

unsigned_int_addr_ptr find_free_pos_unsigned_int(int memState) {
	unsigned_int_addr_ptr pos = NULL;
	if (memState == MEM_STATIC_OBJ) { // stack
		for(pos = 0; pos &lt;= UNSIGNED_INT_MEMSIZE - 1; pos++) {
			if (unsigned_intMemState[pos] == MEM_FREE) {
				return pos;
			}
		}
	} else if (memState == MEM_DYN_OBJ) { // heap
		for(pos = UNSIGNED_INT_MEMSIZE - 1; pos &gt;= 0; pos--) {
			if (unsigned_intMemState[pos] == MEM_FREE) {
				return pos;
			}
		}
	}
	return NULL;
}

unsigned_int_addr_ptr find_free_pos_and_allocate_and_init_unsigned_int(int memState, unsigned_int value) {
	unsigned_int_addr_ptr pos;
	if (UNSIGNED_INT_FREE_MEM == 0) {
		MEM_ERR_NOT_ENOUGH_MEM = true;
		MEM_ERR_NOT_ENOUGH_MEM_UNSIGNED_INT = true;
		return NULL;
	}
	pos = find_free_pos_unsigned_int(memState);
	if (pos == NULL) {
		MEM_ERR_CORRUPTED_MEM = true;
	} else {
		allocate_and_init_unsigned_int(memState, pos, value);
	}
	return pos;
}

unsigned_int_addr_ptr find_free_pos_and_allocate_unsigned_int(int memState) {
	return find_free_pos_and_allocate_and_init_unsigned_int(memState, DEFAULT_UNSIGNED_INT_VALUE);
}

void delete_unsigned_int(unsigned_int_addr_ptr pos, bool isStatic) {
	check_mem_errors_for_delete_unsigned_int(pos, isStatic, false);
	allocate_and_init_unsigned_int(MEM_FREE, pos, DEFAULT_UNSIGNED_INT_VALUE);
}
//////////////////
// UNSIGNED_INT - public
//////////////////

unsigned_int_addr_ptr allocate_static_unsigned_int() {
	return find_free_pos_and_allocate_and_init_unsigned_int(MEM_STATIC_OBJ, DEFAULT_UNSIGNED_INT_VALUE);
}

unsigned_int_addr_ptr allocate_dynamic_unsigned_int() {
	return find_free_pos_and_allocate_and_init_unsigned_int(MEM_DYN_OBJ, DEFAULT_UNSIGNED_INT_VALUE);
}

unsigned_int_addr_ptr allocate_static_and_init_unsigned_int(unsigned_int value) {
	return find_free_pos_and_allocate_and_init_unsigned_int(MEM_STATIC_OBJ, value);
}

unsigned_int_addr_ptr allocate_dynamic_and_init_unsigned_int(unsigned_int value) {
	return find_free_pos_and_allocate_and_init_unsigned_int(MEM_DYN_OBJ, value);
}

void delete_static_unsigned_int(unsigned_int_addr_ptr pos) {
	delete_unsigned_int(pos, true);
}

void delete_dynamic_unsigned_int(unsigned_int_addr_ptr pos) {
	delete_unsigned_int(pos, false);
}

void empty_stack_unsigned_int(unsigned_int_addr_ptr pos) {
	if (pos != NULL) {
	    allocate_and_init_unsigned_int(MEM_FREE, pos, DEFAULT_UNSIGNED_INT_VALUE);
	}
}


/////////////////////////
// UNSIGNED_INT ARRAY - private
/////////////////////////

unsigned_int_addr_ptr find_free_pos_arr_unsigned_int(int memState, int length) {
	int count = 0;
	unsigned_int_addr_ptr pos = -1;
	int i = 0;
	if (memState == MEM_STATIC_ARR_HEAD) {
		for (i = 0; i &lt;= UNSIGNED_INT_MEMSIZE - 1; i++) {
			if (unsigned_intMemState[i] == MEM_FREE) {
				if (count == 0) {
					pos = i;
				}
				count++;
				if (count == length) {
					return pos;
				}
			} else if (is_static_elem_unsigned_int(i)) {
				count = 0;
				pos = NULL;
			} else {
				return NULL;
			}
		}
	} else if (memState == MEM_DYN_ARR_HEAD) {
		for(i = UNSIGNED_INT_MEMSIZE - 1; i &gt;= 0; i--) {
			if (unsigned_intMemState[i] == MEM_FREE) {
				if (count == 0) {
					pos = i;
				}
				count++;
				if (count == length) {
					return pos - length + 1; // return the 'lower' index w.r.t. the memArray; + 1 because count starts at 0
				}
			} else if (is_static_elem_unsigned_int(i)) {
				count = 0;
				pos = NULL;
			} else {
				return NULL;
			}
		}
	}
	return NULL;
}

unsigned_int_addr_ptr allocate_arr_unsigned_int(int memState, int length) {
	int i;
    unsigned_int_addr_ptr pos;
    int tailElemStateType;
    if (UNSIGNED_INT_FREE_MEM &lt; length) {
		MEM_ERR_NOT_ENOUGH_MEM = true;
		MEM_ERR_NOT_ENOUGH_MEM_UNSIGNED_INT = true;
		return NULL;
	}
	pos = find_free_pos_arr_unsigned_int(memState, length);
	if (pos == NULL) {
		MEM_ERR_FRAGMENTED_MEM = true;
		MEM_ERR_FRAGMENTED_MEM_UNSIGNED_INT = true;
		return NULL;
	}
	if (memState == MEM_STATIC_ARR_HEAD) {
		tailElemStateType = MEM_STATIC_ARR_TAIL;
	} else {
		tailElemStateType = MEM_DYN_ARR_TAIL;
	}
	allocate_unsigned_int(memState, pos); // allocate head
	for(i = pos + 1; i &lt; (pos + length); i++) {
		allocate_unsigned_int(tailElemStateType, i);
	}
	return pos;
}

void delete_arr_unsigned_int(unsigned_int_addr_ptr pos, bool isStatic) {
	int i = pos + 1;
	check_mem_errors_for_delete_unsigned_int(pos, isStatic, true);
	allocate_and_init_unsigned_int(MEM_FREE, pos, DEFAULT_UNSIGNED_INT_VALUE);
	while(i &lt; UNSIGNED_INT_MEMSIZE &amp;&amp; is_arr_tail_elem_unsigned_int(i)) {
		allocate_and_init_unsigned_int(MEM_FREE, i, DEFAULT_UNSIGNED_INT_VALUE);
		i++;
	}
}

////////////////////////
// UNSIGNED_INT ARRAY - public
////////////////////////

unsigned_int_addr_ptr allocate_static_arr_unsigned_int(int length) {
	return allocate_arr_unsigned_int(MEM_STATIC_ARR_HEAD, length);
}

unsigned_int_addr_ptr allocate_dynamic_arr_unsigned_int(int length) {
	return allocate_arr_unsigned_int(MEM_DYN_ARR_HEAD, length);
}

void delete_arr_static_unsigned_int(unsigned_int_addr_ptr pos) {
	delete_arr_unsigned_int(pos, true);
}

void delete_arr_dynamic_unsigned_int(unsigned_int_addr_ptr pos) {
	delete_arr_unsigned_int(pos, false);
}

void empty_stack_arr_unsigned_int(unsigned_int_addr_ptr pos) {
	int i = pos + 1;
	if (pos != NULL) {
		allocate_and_init_unsigned_int(MEM_FREE, pos, DEFAULT_UNSIGNED_INT_VALUE);
		while(i &lt; UNSIGNED_INT_MEMSIZE &amp;&amp; is_arr_tail_elem_unsigned_int(i)) {
			allocate_and_init_unsigned_int(MEM_FREE, i, DEFAULT_UNSIGNED_INT_VALUE);
			i++;
		}
	}
}

void init_arr_elem_unsigned_int(unsigned_int_addr_ptr pos, unsigned_int value) {
	if (pos == NULL) {
		MEM_ERR_CORRUPTED_MEM = true;
	} else {
		unsigned_intMem[pos] = value;
	}
}



///////////////////
// DATA - helper functions
///////////////////

bool is_free_elem_data(data_addr_ptr pos) {
	return dataMemState[pos] == MEM_FREE;
}

bool is_obj_elem_data(data_addr_ptr pos) {
	return dataMemState[pos] == MEM_STATIC_OBJ || dataMemState[pos] == MEM_DYN_OBJ;
}

bool is_static_elem_data(data_addr_ptr pos) {
	return dataMemState[pos] == MEM_STATIC_OBJ || dataMemState[pos] == MEM_STATIC_ARR_HEAD || dataMemState[pos] == MEM_STATIC_ARR_TAIL;
}

bool is_dynamic_elem_data(data_addr_ptr pos) {
	return dataMemState[pos] == MEM_DYN_OBJ || dataMemState[pos] == MEM_DYN_ARR_HEAD || dataMemState[pos] == MEM_DYN_ARR_TAIL;
}

bool is_arr_head_elem_data(data_addr_ptr pos) {
	return dataMemState[pos] == MEM_STATIC_ARR_HEAD || dataMemState[pos] == MEM_DYN_ARR_HEAD;
}

bool is_arr_tail_elem_data(data_addr_ptr pos) {
	return dataMemState[pos] == MEM_STATIC_ARR_TAIL || dataMemState[pos] == MEM_DYN_ARR_TAIL;
}

void check_mem_errors_for_delete_data(data_addr_ptr pos, bool isStatic, bool shouldBeAnArray) {
	if (pos == NULL) {
		MEM_ERR_CORRUPTED_MEM = true;
	} else if (is_free_elem_data(pos)) {
		MEM_ERR_DOUBLE_FREE = true;
	} else if (not is_obj_elem_data(pos) &amp;&amp; not is_arr_head_elem_data(pos)) {
		// something went completely wrong :(
		// ex: delete somewhere in the middle of an array
		MEM_ERR_CORRUPTED_MEM = true;
	} else {
		if (!isStatic &amp;&amp; is_static_elem_data(pos)) {
			MEM_ERR_DELETE_ON_STATIC_VAR = true;
		}
		if (shouldBeAnArray) {
			if (not is_arr_head_elem_data(pos)) {
				MEM_ERR_INVALID_ARR_DELETE = true; // shouldn't have called 'delete []' ?
			}
		} else { // delete normal obj
			if (not is_obj_elem_data(pos)) {
				MEM_ERR_INVALID_OBJ_DELETE = true;
			}
		}
	}
}

bool addr_is_in_range_data(int pos) {
	return pos &gt;= 0 &amp;&amp; pos &lt; DATA_MEMSIZE;
}

bool addr_is_valid_data(int pos) {
	return addr_is_in_range_data(pos) &amp;&amp; dataMemState[pos] != MEM_FREE;
}

bool is_arr_elem_data(int head, int index) {
	int i;
	if (!addr_is_in_range_data(head + index)) {
		return false;
	}
	if (!is_arr_head_elem_data(head)) {
		return false;
	}
	if (index &lt; 0) { // assuming heap/stack arrays grow leftward
		return false;
	}
	for (i = head + 1; i &lt;= head + index; i++) {
		if (!is_arr_tail_elem_data(i)) {
			return false;
		}
	}
	return true;
}


///////////////////
// DATA - private
///////////////////

void allocate_and_init_data(int memState, data_addr_ptr pos, data value) {
	if (pos == NULL) {
		MEM_ERR_CORRUPTED_MEM = true;
	} else {
		dataMemState[pos] = memState;
		dataMem[pos] = value;
        if (memState == MEM_FREE) {
            DATA_FREE_MEM++;
        } else {
            DATA_FREE_MEM--;
        }
	}
}

void allocate_data(int memState, data_addr_ptr pos) {
	allocate_and_init_data(memState, pos, DEFAULT_DATA_VALUE);
}

data_addr_ptr find_free_pos_data(int memState) {
	data_addr_ptr pos = NULL;
	if (memState == MEM_STATIC_OBJ) { // stack
		for(pos = 0; pos &lt;= DATA_MEMSIZE - 1; pos++) {
			if (dataMemState[pos] == MEM_FREE) {
				return pos;
			}
		}
	} else if (memState == MEM_DYN_OBJ) { // heap
		for(pos = DATA_MEMSIZE - 1; pos &gt;= 0; pos--) {
			if (dataMemState[pos] == MEM_FREE) {
				return pos;
			}
		}
	}
	return NULL;
}

data_addr_ptr find_free_pos_and_allocate_and_init_data(int memState, data value) {
	data_addr_ptr pos;
	if (DATA_FREE_MEM == 0) {
		MEM_ERR_NOT_ENOUGH_MEM = true;
		MEM_ERR_NOT_ENOUGH_MEM_DATA = true;
		return NULL;
	}
	pos = find_free_pos_data(memState);
	if (pos == NULL) {
		MEM_ERR_CORRUPTED_MEM = true;
	} else {
		allocate_and_init_data(memState, pos, value);
	}
	return pos;
}

data_addr_ptr find_free_pos_and_allocate_data(int memState) {
	return find_free_pos_and_allocate_and_init_data(memState, DEFAULT_DATA_VALUE);
}

void delete_data(data_addr_ptr pos, bool isStatic) {
	check_mem_errors_for_delete_data(pos, isStatic, false);
	allocate_and_init_data(MEM_FREE, pos, DEFAULT_DATA_VALUE);
}
//////////////////
// DATA - public
//////////////////

data_addr_ptr allocate_static_data() {
	return find_free_pos_and_allocate_and_init_data(MEM_STATIC_OBJ, DEFAULT_DATA_VALUE);
}

data_addr_ptr allocate_dynamic_data() {
	return find_free_pos_and_allocate_and_init_data(MEM_DYN_OBJ, DEFAULT_DATA_VALUE);
}

data_addr_ptr allocate_static_and_init_data(data value) {
	return find_free_pos_and_allocate_and_init_data(MEM_STATIC_OBJ, value);
}

data_addr_ptr allocate_dynamic_and_init_data(data value) {
	return find_free_pos_and_allocate_and_init_data(MEM_DYN_OBJ, value);
}

void delete_static_data(data_addr_ptr pos) {
	delete_data(pos, true);
}

void delete_dynamic_data(data_addr_ptr pos) {
	delete_data(pos, false);
}

void empty_stack_data(data_addr_ptr pos) {
	if (pos != NULL) {
	    allocate_and_init_data(MEM_FREE, pos, DEFAULT_DATA_VALUE);
	}
}


/////////////////////////
// DATA ARRAY - private
/////////////////////////

data_addr_ptr find_free_pos_arr_data(int memState, int length) {
	int count = 0;
	data_addr_ptr pos = -1;
	int i = 0;
	if (memState == MEM_STATIC_ARR_HEAD) {
		for (i = 0; i &lt;= DATA_MEMSIZE - 1; i++) {
			if (dataMemState[i] == MEM_FREE) {
				if (count == 0) {
					pos = i;
				}
				count++;
				if (count == length) {
					return pos;
				}
			} else if (is_static_elem_data(i)) {
				count = 0;
				pos = NULL;
			} else {
				return NULL;
			}
		}
	} else if (memState == MEM_DYN_ARR_HEAD) {
		for(i = DATA_MEMSIZE - 1; i &gt;= 0; i--) {
			if (dataMemState[i] == MEM_FREE) {
				if (count == 0) {
					pos = i;
				}
				count++;
				if (count == length) {
					return pos - length + 1; // return the 'lower' index w.r.t. the memArray; + 1 because count starts at 0
				}
			} else if (is_static_elem_data(i)) {
				count = 0;
				pos = NULL;
			} else {
				return NULL;
			}
		}
	}
	return NULL;
}

data_addr_ptr allocate_arr_data(int memState, int length) {
	int i;
    data_addr_ptr pos;
    int tailElemStateType;
    if (DATA_FREE_MEM &lt; length) {
		MEM_ERR_NOT_ENOUGH_MEM = true;
		MEM_ERR_NOT_ENOUGH_MEM_DATA = true;
		return NULL;
	}
	pos = find_free_pos_arr_data(memState, length);
	if (pos == NULL) {
		MEM_ERR_FRAGMENTED_MEM = true;
		MEM_ERR_FRAGMENTED_MEM_DATA = true;
		return NULL;
	}
	if (memState == MEM_STATIC_ARR_HEAD) {
		tailElemStateType = MEM_STATIC_ARR_TAIL;
	} else {
		tailElemStateType = MEM_DYN_ARR_TAIL;
	}
	allocate_data(memState, pos); // allocate head
	for(i = pos + 1; i &lt; (pos + length); i++) {
		allocate_data(tailElemStateType, i);
	}
	return pos;
}

void delete_arr_data(data_addr_ptr pos, bool isStatic) {
	int i = pos + 1;
	check_mem_errors_for_delete_data(pos, isStatic, true);
	allocate_and_init_data(MEM_FREE, pos, DEFAULT_DATA_VALUE);
	while(i &lt; DATA_MEMSIZE &amp;&amp; is_arr_tail_elem_data(i)) {
		allocate_and_init_data(MEM_FREE, i, DEFAULT_DATA_VALUE);
		i++;
	}
}

////////////////////////
// DATA ARRAY - public
////////////////////////

data_addr_ptr allocate_static_arr_data(int length) {
	return allocate_arr_data(MEM_STATIC_ARR_HEAD, length);
}

data_addr_ptr allocate_dynamic_arr_data(int length) {
	return allocate_arr_data(MEM_DYN_ARR_HEAD, length);
}

void delete_arr_static_data(data_addr_ptr pos) {
	delete_arr_data(pos, true);
}

void delete_arr_dynamic_data(data_addr_ptr pos) {
	delete_arr_data(pos, false);
}

void empty_stack_arr_data(data_addr_ptr pos) {
	int i = pos + 1;
	if (pos != NULL) {
		allocate_and_init_data(MEM_FREE, pos, DEFAULT_DATA_VALUE);
		while(i &lt; DATA_MEMSIZE &amp;&amp; is_arr_tail_elem_data(i)) {
			allocate_and_init_data(MEM_FREE, i, DEFAULT_DATA_VALUE);
			i++;
		}
	}
}

void init_arr_elem_data(data_addr_ptr pos, data value) {
	if (pos == NULL) {
		MEM_ERR_CORRUPTED_MEM = true;
	} else {
		dataMem[pos] = value;
	}
}


///////////////////
// TLMDATA - helper functions
///////////////////

bool is_free_elem_tlmdata(tlmdata_addr_ptr pos) {
	return tlmdataMemState[pos] == MEM_FREE;
}

bool is_obj_elem_tlmdata(tlmdata_addr_ptr pos) {
	return tlmdataMemState[pos] == MEM_STATIC_OBJ || tlmdataMemState[pos] == MEM_DYN_OBJ;
}

bool is_static_elem_tlmdata(tlmdata_addr_ptr pos) {
	return tlmdataMemState[pos] == MEM_STATIC_OBJ || tlmdataMemState[pos] == MEM_STATIC_ARR_HEAD || tlmdataMemState[pos] == MEM_STATIC_ARR_TAIL;
}

bool is_dynamic_elem_tlmdata(tlmdata_addr_ptr pos) {
	return tlmdataMemState[pos] == MEM_DYN_OBJ || tlmdataMemState[pos] == MEM_DYN_ARR_HEAD || tlmdataMemState[pos] == MEM_DYN_ARR_TAIL;
}

bool is_arr_head_elem_tlmdata(tlmdata_addr_ptr pos) {
	return tlmdataMemState[pos] == MEM_STATIC_ARR_HEAD || tlmdataMemState[pos] == MEM_DYN_ARR_HEAD;
}

bool is_arr_tail_elem_tlmdata(tlmdata_addr_ptr pos) {
	return tlmdataMemState[pos] == MEM_STATIC_ARR_TAIL || tlmdataMemState[pos] == MEM_DYN_ARR_TAIL;
}

void check_mem_errors_for_delete_tlmdata(tlmdata_addr_ptr pos, bool isStatic, bool shouldBeAnArray) {
	if (pos == NULL) {
		MEM_ERR_CORRUPTED_MEM = true;
	} else if (is_free_elem_tlmdata(pos)) {
		MEM_ERR_DOUBLE_FREE = true;
	} else if (not is_obj_elem_tlmdata(pos) &amp;&amp; not is_arr_head_elem_tlmdata(pos)) {
		// something went completely wrong :(
		// ex: delete somewhere in the middle of an array
		MEM_ERR_CORRUPTED_MEM = true;
	} else {
		if (!isStatic &amp;&amp; is_static_elem_tlmdata(pos)) {
			MEM_ERR_DELETE_ON_STATIC_VAR = true;
		}
		if (shouldBeAnArray) {
			if (not is_arr_head_elem_tlmdata(pos)) {
				MEM_ERR_INVALID_ARR_DELETE = true; // shouldn't have called 'delete []' ?
			}
		} else { // delete normal obj
			if (not is_obj_elem_tlmdata(pos)) {
				MEM_ERR_INVALID_OBJ_DELETE = true;
			}
		}
	}
}

bool addr_is_in_range_tlmdata(int pos) {
	return pos &gt;= 0 &amp;&amp; pos &lt; TLMDATA_MEMSIZE;
}

bool addr_is_valid_tlmdata(int pos) {
	return addr_is_in_range_tlmdata(pos) &amp;&amp; tlmdataMemState[pos] != MEM_FREE;
}

bool is_arr_elem_tlmdata(int head, int index) {
	int i;
	if (!addr_is_in_range_tlmdata(head + index)) {
		return false;
	}
	if (!is_arr_head_elem_tlmdata(head)) {
		return false;
	}
	if (index &lt; 0) { // assuming heap/stack arrays grow leftward
		return false;
	}
	for (i = head + 1; i &lt;= head + index; i++) {
		if (!is_arr_tail_elem_tlmdata(i)) {
			return false;
		}
	}
	return true;
}


///////////////////
// TLMDATA - private
///////////////////

void allocate_and_init_tlmdata(int memState, tlmdata_addr_ptr pos, tlmdata value) {
	if (pos == NULL) {
		MEM_ERR_CORRUPTED_MEM = true;
	} else {
		tlmdataMemState[pos] = memState;
		tlmdataMem[pos] = value;
        if (memState == MEM_FREE) {
            TLMDATA_FREE_MEM++;
        } else {
            TLMDATA_FREE_MEM--;
        }
	}
}

void allocate_tlmdata(int memState, tlmdata_addr_ptr pos) {
	allocate_and_init_tlmdata(memState, pos, DEFAULT_TLMDATA_VALUE);
}

tlmdata_addr_ptr find_free_pos_tlmdata(int memState) {
	tlmdata_addr_ptr pos = NULL;
	if (memState == MEM_STATIC_OBJ) { // stack
		for(pos = 0; pos &lt;= TLMDATA_MEMSIZE - 1; pos++) {
			if (tlmdataMemState[pos] == MEM_FREE) {
				return pos;
			}
		}
	} else if (memState == MEM_DYN_OBJ) { // heap
		for(pos = TLMDATA_MEMSIZE - 1; pos &gt;= 0; pos--) {
			if (tlmdataMemState[pos] == MEM_FREE) {
				return pos;
			}
		}
	}
	return NULL;
}

tlmdata_addr_ptr find_free_pos_and_allocate_and_init_tlmdata(int memState, tlmdata value) {
	tlmdata_addr_ptr pos;
	if (TLMDATA_FREE_MEM == 0) {
		MEM_ERR_NOT_ENOUGH_MEM = true;
		MEM_ERR_NOT_ENOUGH_MEM_TLMDATA = true;
		return NULL;
	}
	pos = find_free_pos_tlmdata(memState);
	if (pos == NULL) {
		MEM_ERR_CORRUPTED_MEM = true;
	} else {
		allocate_and_init_tlmdata(memState, pos, value);
	}
	return pos;
}

tlmdata_addr_ptr find_free_pos_and_allocate_tlmdata(int memState) {
	return find_free_pos_and_allocate_and_init_tlmdata(memState, DEFAULT_TLMDATA_VALUE);
}

void delete_tlmdata(tlmdata_addr_ptr pos, bool isStatic) {
	check_mem_errors_for_delete_tlmdata(pos, isStatic, false);
	allocate_and_init_tlmdata(MEM_FREE, pos, DEFAULT_TLMDATA_VALUE);
}
//////////////////
// TLMDATA - public
//////////////////

tlmdata_addr_ptr allocate_static_tlmdata() {
	return find_free_pos_and_allocate_and_init_tlmdata(MEM_STATIC_OBJ, DEFAULT_TLMDATA_VALUE);
}

tlmdata_addr_ptr allocate_dynamic_tlmdata() {
	return find_free_pos_and_allocate_and_init_tlmdata(MEM_DYN_OBJ, DEFAULT_TLMDATA_VALUE);
}

tlmdata_addr_ptr allocate_static_and_init_tlmdata(tlmdata value) {
	return find_free_pos_and_allocate_and_init_tlmdata(MEM_STATIC_OBJ, value);
}

tlmdata_addr_ptr allocate_dynamic_and_init_tlmdata(tlmdata value) {
	return find_free_pos_and_allocate_and_init_tlmdata(MEM_DYN_OBJ, value);
}

void delete_static_tlmdata(tlmdata_addr_ptr pos) {
	delete_tlmdata(pos, true);
}

void delete_dynamic_tlmdata(tlmdata_addr_ptr pos) {
	delete_tlmdata(pos, false);
}

void empty_stack_tlmdata(tlmdata_addr_ptr pos) {
	if (pos != NULL) {
	    allocate_and_init_tlmdata(MEM_FREE, pos, DEFAULT_TLMDATA_VALUE);
	}
}


/////////////////////////
// TLMDATA ARRAY - private
/////////////////////////

tlmdata_addr_ptr find_free_pos_arr_tlmdata(int memState, int length) {
	int count = 0;
	tlmdata_addr_ptr pos = -1;
	int i = 0;
	if (memState == MEM_STATIC_ARR_HEAD) {
		for (i = 0; i &lt;= TLMDATA_MEMSIZE - 1; i++) {
			if (tlmdataMemState[i] == MEM_FREE) {
				if (count == 0) {
					pos = i;
				}
				count++;
				if (count == length) {
					return pos;
				}
			} else if (is_static_elem_tlmdata(i)) {
				count = 0;
				pos = NULL;
			} else {
				return NULL;
			}
		}
	} else if (memState == MEM_DYN_ARR_HEAD) {
		for(i = TLMDATA_MEMSIZE - 1; i &gt;= 0; i--) {
			if (tlmdataMemState[i] == MEM_FREE) {
				if (count == 0) {
					pos = i;
				}
				count++;
				if (count == length) {
					return pos - length + 1; // return the 'lower' index w.r.t. the memArray; + 1 because count starts at 0
				}
			} else if (is_static_elem_tlmdata(i)) {
				count = 0;
				pos = NULL;
			} else {
				return NULL;
			}
		}
	}
	return NULL;
}

tlmdata_addr_ptr allocate_arr_tlmdata(int memState, int length) {
	int i;
    tlmdata_addr_ptr pos;
    int tailElemStateType;
    if (TLMDATA_FREE_MEM &lt; length) {
		MEM_ERR_NOT_ENOUGH_MEM = true;
		MEM_ERR_NOT_ENOUGH_MEM_TLMDATA = true;
		return NULL;
	}
	pos = find_free_pos_arr_tlmdata(memState, length);
	if (pos == NULL) {
		MEM_ERR_FRAGMENTED_MEM = true;
		MEM_ERR_FRAGMENTED_MEM_TLMDATA = true;
		return NULL;
	}
	if (memState == MEM_STATIC_ARR_HEAD) {
		tailElemStateType = MEM_STATIC_ARR_TAIL;
	} else {
		tailElemStateType = MEM_DYN_ARR_TAIL;
	}
	allocate_tlmdata(memState, pos); // allocate head
	for(i = pos + 1; i &lt; (pos + length); i++) {
		allocate_tlmdata(tailElemStateType, i);
	}
	return pos;
}

void delete_arr_tlmdata(tlmdata_addr_ptr pos, bool isStatic) {
	int i = pos + 1;
	check_mem_errors_for_delete_tlmdata(pos, isStatic, true);
	allocate_and_init_tlmdata(MEM_FREE, pos, DEFAULT_TLMDATA_VALUE);
	while(i &lt; TLMDATA_MEMSIZE &amp;&amp; is_arr_tail_elem_tlmdata(i)) {
		allocate_and_init_tlmdata(MEM_FREE, i, DEFAULT_TLMDATA_VALUE);
		i++;
	}
}

////////////////////////
// TLMDATA ARRAY - public
////////////////////////

tlmdata_addr_ptr allocate_static_arr_tlmdata(int length) {
	return allocate_arr_tlmdata(MEM_STATIC_ARR_HEAD, length);
}

tlmdata_addr_ptr allocate_dynamic_arr_tlmdata(int length) {
	return allocate_arr_tlmdata(MEM_DYN_ARR_HEAD, length);
}

void delete_arr_static_tlmdata(tlmdata_addr_ptr pos) {
	delete_arr_tlmdata(pos, true);
}

void delete_arr_dynamic_tlmdata(tlmdata_addr_ptr pos) {
	delete_arr_tlmdata(pos, false);
}

void empty_stack_arr_tlmdata(tlmdata_addr_ptr pos) {
	int i = pos + 1;
	if (pos != NULL) {
		allocate_and_init_tlmdata(MEM_FREE, pos, DEFAULT_TLMDATA_VALUE);
		while(i &lt; TLMDATA_MEMSIZE &amp;&amp; is_arr_tail_elem_tlmdata(i)) {
			allocate_and_init_tlmdata(MEM_FREE, i, DEFAULT_TLMDATA_VALUE);
			i++;
		}
	}
}

void init_arr_elem_tlmdata(tlmdata_addr_ptr pos, tlmdata value) {
	if (pos == NULL) {
		MEM_ERR_CORRUPTED_MEM = true;
	} else {
		tlmdataMem[pos] = value;
	}
}

void clk$ctor(const int periodparam, int &amp;val, int &amp;_val, int &amp;delta, int &amp;period){
period = periodparam;
val = true;
_val = true;
}
void TLM2_M1$ctor(tlmdata_addr_ptr &amp;d){
}
void AHB_M1$ctor(const unsigned_int id, uint64 &amp;current_Address, unsigned_int &amp;current_Command, unsigned_int &amp;current_DataLength, data_addr_ptr &amp;current_trans, unsigned_int &amp;master_id, bool &amp;m_bus_granted, bool &amp;m_bus_req_pending, unsigned_int &amp;m_data_count, bool &amp;m_data_pending, bool &amp;m_request_pending, bool &amp;m_restart_pending_req, unsigned_int &amp;m_txn_count){
current_DataLength = 0;
current_trans = NULL;
master_id = id;
m_bus_granted = false;
m_bus_req_pending = false;
m_data_count = 0;
m_data_pending = false;
m_request_pending = false;
m_restart_pending_req = false;
m_txn_count = 0;
}
void TLM2_M2$ctor(tlmdata_addr_ptr &amp;d){
}
void AHB_M2$ctor(const unsigned_int id, uint64 &amp;current_Address, unsigned_int &amp;current_Command, unsigned_int &amp;current_DataLength, data_addr_ptr &amp;current_trans, unsigned_int &amp;master_id, bool &amp;m_bus_granted, bool &amp;m_bus_req_pending, unsigned_int &amp;m_data_count, bool &amp;m_data_pending, bool &amp;m_request_pending, bool &amp;m_restart_pending_req, unsigned_int &amp;m_txn_count){
current_DataLength = 0;
current_trans = NULL;
master_id = id;
m_bus_granted = false;
m_bus_req_pending = false;
m_data_count = 0;
m_data_pending = false;
m_request_pending = false;
m_restart_pending_req = false;
m_txn_count = 0;
}
void AHB_S1$ctor(const unsigned_int addr, const unsigned_int tsize, unsigned_int &amp;baseAddr, unsigned_int &amp;counter, data_addr_ptr &amp;current_trans, unsigned_int_addr_ptr &amp;MEM, unsigned_int &amp;mem_size, bool &amp;m_data_pending, bool &amp;m_request_pending, unsigned_int &amp;txn_address, unsigned_int &amp;txn_burst_len){
unsigned_int i;
baseAddr = addr;
counter = 0;
current_trans = NULL;
mem_size = tsize;
m_data_pending = false;
m_request_pending = false;
txn_address = 0;
txn_burst_len = 0;
for(i = 0; i &lt; mem_size; i++){
	unsigned_intMem[MEM + i] = 0;
}
}
void AHB_S2$ctor(const unsigned_int addr, const unsigned_int tsize, unsigned_int &amp;baseAddr, unsigned_int &amp;counter, data_addr_ptr &amp;current_trans, unsigned_int_addr_ptr &amp;MEM, unsigned_int &amp;mem_size, bool &amp;m_data_pending, bool &amp;m_request_pending, unsigned_int &amp;txn_address, unsigned_int &amp;txn_burst_len){
unsigned_int i;
baseAddr = addr;
counter = 0;
current_trans = NULL;
mem_size = tsize;
m_data_pending = false;
m_request_pending = false;
txn_address = 0;
txn_burst_len = 0;
for(i = 0; i &lt; mem_size; i++){
	unsigned_intMem[MEM + i] = 0;
}
}
void AHB_Bus$ctor(data_addr_ptr &amp;outstanding_req, data_addr_ptr &amp;outstanding_data, unsigned_int &amp;outstanding_txn_count, unsigned_int &amp;data_count, unsigned_int &amp;current_req_master, unsigned_int &amp;current_data_master, unsigned_short &amp;m_BusRequest_Register, unsigned_short &amp;m_InService_Register, data_addr_ptr &amp;m_grant_txn, int_addr_ptr &amp;m_grant_phase, int_addr_ptr &amp;m_grant_time, int &amp;m_bus_req_sample_time, int &amp;m_req_sample_time, unsigned_int &amp;m_drop_cycle, unsigned_int_addr_ptr &amp;m_default_size, int &amp;m_outstanding_req_type){
outstanding_req = NULL;
outstanding_data = NULL;
outstanding_txn_count = 0;
data_count = 0;
current_req_master = 0;
current_data_master = 0;
m_BusRequest_Register = 0;
m_InService_Register = 0;
m_drop_cycle = 0;
m_grant_txn = allocate_dynamic_data();
unsigned_intMem[m_default_size] = (32 + 7) / 8;
}
void sc_main(){
clk$ctor(20, clk$val, clk$_val, clk$delta, clk$period);
TLM2_M1$ctor(TLM2_M1$d);
AHB_M1$ctor(1, AHB_M1$current_Address, AHB_M1$current_Command, AHB_M1$current_DataLength, AHB_M1$current_trans, AHB_M1$master_id, AHB_M1$m_bus_granted, AHB_M1$m_bus_req_pending, AHB_M1$m_data_count, AHB_M1$m_data_pending, AHB_M1$m_request_pending, AHB_M1$m_restart_pending_req, AHB_M1$m_txn_count);
TLM2_M2$ctor(TLM2_M2$d);
AHB_M2$ctor(2, AHB_M2$current_Address, AHB_M2$current_Command, AHB_M2$current_DataLength, AHB_M2$current_trans, AHB_M2$master_id, AHB_M2$m_bus_granted, AHB_M2$m_bus_req_pending, AHB_M2$m_data_count, AHB_M2$m_data_pending, AHB_M2$m_request_pending, AHB_M2$m_restart_pending_req, AHB_M2$m_txn_count);
AHB_S1$ctor(0, 3, AHB_S1$baseAddr, AHB_S1$counter, AHB_S1$current_trans, AHB_S1$MEM, AHB_S1$mem_size, AHB_S1$m_data_pending, AHB_S1$m_request_pending, AHB_S1$txn_address, AHB_S1$txn_burst_len);
AHB_S2$ctor(3, 3, AHB_S2$baseAddr, AHB_S2$counter, AHB_S2$current_trans, AHB_S2$MEM, AHB_S2$mem_size, AHB_S2$m_data_pending, AHB_S2$m_request_pending, AHB_S2$txn_address, AHB_S2$txn_burst_len);
AHB_Bus$ctor(AHB_Bus$outstanding_req, AHB_Bus$outstanding_data, AHB_Bus$outstanding_txn_count, AHB_Bus$data_count, AHB_Bus$current_req_master, AHB_Bus$current_data_master, AHB_Bus$m_BusRequest_Register, AHB_Bus$m_InService_Register, AHB_Bus$m_grant_txn, AHB_Bus$m_grant_phase, AHB_Bus$m_grant_time, AHB_Bus$m_bus_req_sample_time, AHB_Bus$m_req_sample_time, AHB_Bus$m_drop_cycle, AHB_Bus$m_default_size, AHB_Bus$m_outstanding_req_type);
}
</declaration>
<template>
<name>
InitializerTemplate</name>
<parameter>
</parameter>
<declaration>
</declaration>
<location id="id0">
<urgent/>
</location>
<location id="id1">
<committed/>
</location>
<location id="id2">
</location>
<init ref="id0"/>
<transition>
<source ref="id0"/>
<target ref="id1"/>
<label kind="synchronisation">
deltadelay?
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id1"/>
<target ref="id2"/>
<label kind="synchronisation">
initdone!
</label>
<label kind="comments">
</label>
</transition>
</template>
<template>
<name>
MethodStarterNoInitTemplate</name>
<parameter>
chan &amp;ctrl, broadcast chan &amp;sensitive</parameter>
<declaration>
</declaration>
<location id="id19">
</location>
<location id="id20">
<urgent/>
</location>
<location id="id21">
<urgent/>
</location>
<location id="id22">
<urgent/>
</location>
<location id="id1096">
<urgent/>
</location>
<init ref="id19"/>
<transition>
<source ref="id20"/>
<target ref="id21"/>
<label kind="synchronisation">
activate?
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id21"/>
<target ref="id22"/>
<label kind="synchronisation">
ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id22"/>
<target ref="id1096"/>
<label kind="synchronisation">
ctrl?
</label>
<label kind="assignment">
readyprocs--</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id19"/>
<target ref="id20"/>
<label kind="synchronisation">
sensitive?
</label>
<label kind="assignment">
readyprocs++</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id1096"/>
<target ref="id19"/>
<label kind="synchronisation">
deactivate!
</label>
<label kind="comments">
</label>
</transition>
</template>
<template>
<name>
SCEventTemplate</name>
<parameter>
chan &amp;notify_imm, int &amp;notify_t, chan &amp;notify, broadcast chan &amp;wait</parameter>
<declaration>
clock wait_clock;
int ndelay;
</declaration>
<location id="id24">
<name>
initL</name>
</location>
<location id="id25">
<name>
notify_requested</name>
<committed/>
</location>
<location id="id26">
<name>
wait_for_delta</name>
<label kind="invariant">
wait_clock &lt;= ndelay
</label>
</location>
<location id="id27">
<name>
notify_now</name>
<committed/>
</location>
<location id="id28">
<name>
advancing_time</name>
<committed/>
</location>
<location id="id922">
<committed/>
</location>
<location id="id923">
<committed/>
</location>
<location id="id924">
<committed/>
</location>
<init ref="id24"/>
<transition>
<source ref="id26"/>
<target ref="id25"/>
<label kind="synchronisation">
notify?
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id25"/>
<target ref="id26"/>
<label kind="guard">
wait_clock + notify_t &gt;= ndelay
</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id26"/>
<target ref="id27"/>
<label kind="guard">
wait_clock == ndelay &amp;&amp; 
ndelay != 0
</label>
<label kind="synchronisation">
advancetime!
</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id28"/>
<target ref="id26"/>
<label kind="guard">
wait_clock &lt; ndelay
</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id28"/>
<target ref="id27"/>
<label kind="guard">
wait_clock == ndelay
</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id26"/>
<target ref="id27"/>
<label kind="synchronisation">
notify_imm?
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id24"/>
<target ref="id27"/>
<label kind="synchronisation">
notify_imm?
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id24"/>
<target ref="id25"/>
<label kind="synchronisation">
notify?
</label>
<label kind="assignment">
ndelay = notify_t,
wait_clock = 0</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id25"/>
<target ref="id922"/>
<label kind="guard">
wait_clock + notify_t &lt; ndelay
</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id922"/>
<target ref="id923"/>
<label kind="assignment">
ndelay = notify_t</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id923"/>
<target ref="id26"/>
<label kind="assignment">
wait_clock = 0</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id26"/>
<target ref="id27"/>
<label kind="guard">
ndelay == 0
</label>
<label kind="synchronisation">
deltadelay?
</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id26"/>
<target ref="id28"/>
<label kind="guard">
ndelay != 0
</label>
<label kind="synchronisation">
advancetime?
</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id27"/>
<target ref="id924"/>
<label kind="assignment">
wait_clock = 0</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id924"/>
<target ref="id24"/>
<label kind="synchronisation">
wait!
</label>
<label kind="comments">
</label>
</transition>
</template>
<template>
<name>
SCMainTemplate</name>
<parameter>
</parameter>
<declaration>
</declaration>
<location id="id898">
<name>
init_location</name>
<urgent/>
</location>
<location id="id905">
<urgent/>
</location>
<location id="id906">
<urgent/>
</location>
<location id="id907">
<name>
scmain_end</name>
</location>
<location id="id1079">
<urgent/>
</location>
<init ref="id898"/>
<transition>
<source ref="id898"/>
<target ref="id905"/>
<label kind="assignment">
TLM2_M1$d = allocate_static_tlmdata(),
TLM2_M2$d = allocate_static_tlmdata(),
AHB_S1$MEM = allocate_static_arr_unsigned_int(3),
AHB_S2$MEM = allocate_static_arr_unsigned_int(3),
AHB_Bus$m_grant_phase = allocate_static_int(),
AHB_Bus$m_grant_time = allocate_static_int(),
AHB_Bus$m_default_size = allocate_static_unsigned_int()</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id906"/>
<target ref="id907"/>
<label kind="synchronisation">
scmodules_initialized!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id905"/>
<target ref="id1079"/>
<label kind="guard">
MEM_ERR_NOT_ENOUGH_MEM == 0
</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id1079"/>
<target ref="id906"/>
<label kind="assignment">
sc_main()</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1</label>
</transition>
</template>
<template>
<name>
SchedulerTemplate</name>
<parameter>
</parameter>
<declaration>
</declaration>
<location id="id890">
<name>
init_location</name>
<urgent/>
</location>
<location id="id891">
<name>
execute</name>
<urgent/>
</location>
<location id="id892">
<name>
evaluate</name>
<urgent/>
</location>
<location id="id893">
<name>
update</name>
<urgent/>
</location>
<location id="id894">
<name>
updating</name>
<urgent/>
</location>
<location id="id895">
<name>
nextdelta</name>
<urgent/>
</location>
<location id="id896">
<name>
time_progress</name>
</location>
<location id="id897">
<urgent/>
</location>
<location id="id1065">
<urgent/>
</location>
<init ref="id890"/>
<transition>
<source ref="id890"/>
<target ref="id892"/>
<label kind="synchronisation">
scmodules_initialized?
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id892"/>
<target ref="id891"/>
<label kind="guard">
readyprocs &gt; 0
</label>
<label kind="synchronisation">
activate!
</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id891"/>
<target ref="id892"/>
<label kind="synchronisation">
deactivate?
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id893"/>
<target ref="id897"/>
<label kind="guard">
updaterequests &gt; 0
</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id897"/>
<target ref="id894"/>
<label kind="synchronisation">
updatestart!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id894"/>
<target ref="id893"/>
<label kind="synchronisation">
updateend?
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id893"/>
<target ref="id895"/>
<label kind="guard">
updaterequests == 0
</label>
<label kind="synchronisation">
deltadelay!
</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id895"/>
<target ref="id896"/>
<label kind="guard">
readyprocs == 0
</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id895"/>
<target ref="id892"/>
<label kind="guard">
readyprocs &gt; 0
</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id896"/>
<target ref="id892"/>
<label kind="synchronisation">
advancetime?
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id892"/>
<target ref="id1065"/>
<label kind="guard">
readyprocs == 0
</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id1065"/>
<target ref="id893"/>
<label kind="assignment">
deltacount = (deltacount + 1) % 2</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1</label>
</transition>
</template>
<template>
<name>
ThreadStarterTemplate</name>
<parameter>
chan &amp;ctrl</parameter>
<declaration>
</declaration>
<location id="id3">
<urgent/>
</location>
<location id="id4">
<urgent/>
</location>
<location id="id5">
</location>
<location id="id7">
</location>
<location id="id1104">
<urgent/>
</location>
<init ref="id3"/>
<transition>
<source ref="id3"/>
<target ref="id4"/>
<label kind="synchronisation">
activate?
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id4"/>
<target ref="id5"/>
<label kind="synchronisation">
ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id5"/>
<target ref="id1104"/>
<label kind="synchronisation">
ctrl?
</label>
<label kind="assignment">
readyprocs--</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id1104"/>
<target ref="id7"/>
<label kind="synchronisation">
deactivate!
</label>
<label kind="comments">
</label>
</transition>
</template>
<template>
<name>
ahb_simple_bus$arbitrate</name>
<parameter>
unsigned_short &amp;m_InService_Register, unsigned_short &amp;m_BusRequest_Register, unsigned_int &amp;current_req_master, chan &amp;arbitrate$ctrl</parameter>
<declaration>
unsigned_short j;
unsigned_short temp;
</declaration>
<location id="id105">
<name>
init_location</name>
</location>
<location id="id109">
<urgent/>
</location>
<location id="id110">
<urgent/>
</location>
<location id="id111">
<urgent/>
</location>
<location id="id112">
<urgent/>
</location>
<location id="id114">
<urgent/>
</location>
<location id="id116">
<urgent/>
</location>
<location id="id107">
<urgent/>
</location>
<init ref="id105"/>
<transition>
<source ref="id105"/>
<target ref="id109"/>
<label kind="synchronisation">
arbitrate$ctrl?
</label>
<label kind="assignment">
j = 0</label>
<label kind="comments">
Update:
nodeID: 4285, file: ahb_simple_bus.cpp, line: 9</label>
</transition>
<transition>
<source ref="id109"/>
<target ref="id110"/>
<label kind="guard">
j &lt; 2
</label>
<label kind="comments">
Guard:
nodeID: 4307, file: ahb_simple_bus.cpp, line: 9</label>
</transition>
<transition>
<source ref="id110"/>
<target ref="id112"/>
<label kind="assignment">
temp = 1 &lt;&lt; j</label>
<label kind="comments">
Update:
nodeID: 4341, file: ahb_simple_bus.cpp, line: 11</label>
</transition>
<transition>
<source ref="id112"/>
<target ref="id114"/>
<label kind="guard">
m_BusRequest_Register &amp; 
temp
</label>
<label kind="comments">
Guard:
nodeID: 4373, file: ahb_simple_bus.cpp, line: 12</label>
</transition>
<transition>
<source ref="id114"/>
<target ref="id116"/>
<label kind="guard">
m_InService_Register == 0
</label>
<label kind="comments">
Guard:
nodeID: 4393, file: ahb_simple_bus.cpp, line: 14</label>
</transition>
<transition>
<source ref="id116"/>
<target ref="id111"/>
<label kind="assignment">
m_InService_Register = temp,
current_req_master = j,
m_BusRequest_Register -= temp</label>
<label kind="comments">
Update:
nodeID: 4413, file: ahb_simple_bus.cpp, line: 16,
nodeID: 4431, file: ahb_simple_bus.cpp, line: 17,
nodeID: 4431, file: ahb_simple_bus.cpp, line: 17</label>
</transition>
<transition>
<source ref="id114"/>
<target ref="id111"/>
<label kind="guard">
!(m_InService_Register == 0)
</label>
<label kind="comments">
Guard:
nodeID: 4393, file: ahb_simple_bus.cpp, line: 14</label>
</transition>
<transition>
<source ref="id112"/>
<target ref="id111"/>
<label kind="guard">
!(m_BusRequest_Register &amp; 
temp)
</label>
<label kind="comments">
Guard:
nodeID: 4373, file: ahb_simple_bus.cpp, line: 12</label>
</transition>
<transition>
<source ref="id111"/>
<target ref="id109"/>
<label kind="assignment">
j++</label>
<label kind="comments">
Update:
nodeID: 4325, file: ahb_simple_bus.cpp, line: 9</label>
</transition>
<transition>
<source ref="id109"/>
<target ref="id107"/>
<label kind="guard">
!(j &lt; 2)
</label>
<label kind="comments">
Guard:
nodeID: 4307, file: ahb_simple_bus.cpp, line: 9</label>
</transition>
<transition>
<source ref="id107"/>
<target ref="id105"/>
<label kind="synchronisation">
arbitrate$ctrl!
</label>
<label kind="comments">
</label>
</transition>
</template>
<template>
<name>
ahb_simple_bus$bus_grant</name>
<parameter>
int_addr_ptr &amp;m_grant_time, data_addr_ptr &amp;slave_sock1$nb_transport_bw$param$tran, data_addr_ptr &amp;m_grant_txn, chan &amp;slave_sock0$nb_transport_bw$ctrl, tlm_sync_enum &amp;slave_sock0$nb_transport_bw$return, int_addr_ptr &amp;slave_sock0$nb_transport_bw$param$t, int_addr_ptr &amp;m_grant_phase, data_addr_ptr &amp;slave_sock0$nb_transport_bw$param$tran, int_addr_ptr &amp;slave_sock1$nb_transport_bw$param$phase, chan &amp;bus_grant$ctrl, chan &amp;slave_sock1$nb_transport_bw$ctrl, unsigned_int &amp;current_req_master, int_addr_ptr &amp;slave_sock1$nb_transport_bw$param$t, tlm_sync_enum &amp;slave_sock1$nb_transport_bw$return, chan &amp;arbitrate$ctrl, int_addr_ptr &amp;slave_sock0$nb_transport_bw$param$phase</parameter>
<declaration>
tlm_sync_enum retval;
</declaration>
<location id="id142">
<name>
init_location</name>
</location>
<location id="id143">
<urgent/>
</location>
<location id="id145">
<urgent/>
</location>
<location id="id146">
<urgent/>
</location>
<location id="id147">
<urgent/>
</location>
<location id="id148">
<urgent/>
</location>
<location id="id149">
</location>
<location id="id151">
<urgent/>
</location>
<location id="id154">
</location>
<location id="id152">
<urgent/>
</location>
<location id="id158">
</location>
<location id="id144">
<urgent/>
</location>
<location id="id986">
<urgent/>
</location>
<location id="id992">
<urgent/>
</location>
<location id="id1193">
<name>
mem_access_fail_52</name>
<urgent/>
</location>
<location id="id1194">
<name>
mem_access_fail_53</name>
<urgent/>
</location>
<init ref="id142"/>
<transition>
<source ref="id142"/>
<target ref="id143"/>
<label kind="synchronisation">
bus_grant$ctrl?
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id143"/>
<target ref="id145"/>
<label kind="guard">
addr_is_valid_int(m_grant_time)
</label>
<label kind="assignment">
intMem[m_grant_time] = 1</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 4501, file: ahb_simple_bus.cpp, line: 30</label>
</transition>
<transition>
<source ref="id145"/>
<target ref="id146"/>
<label kind="guard">
addr_is_valid_int(m_grant_phase)
</label>
<label kind="assignment">
intMem[m_grant_phase] = 61</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 4535, file: ahb_simple_bus.cpp, line: 31</label>
</transition>
<transition>
<source ref="id146"/>
<target ref="id147"/>
<label kind="assignment">
retval = TLM_ACCEPTED</label>
<label kind="comments">
Update:
nodeID: 4555, file: ahb_simple_bus.cpp, line: 32</label>
</transition>
<transition>
<source ref="id147"/>
<target ref="id149"/>
<label kind="synchronisation">
arbitrate$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id149"/>
<target ref="id148"/>
<label kind="synchronisation">
arbitrate$ctrl?
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id148"/>
<target ref="id151"/>
<label kind="guard">
current_req_master == 0
</label>
<label kind="comments">
Guard:
nodeID: 4673, file: ahb_simple_bus.cpp, line: 38</label>
</transition>
<transition>
<source ref="id148"/>
<target ref="id152"/>
<label kind="guard">
current_req_master == 1
</label>
<label kind="comments">
Guard:
nodeID: 4735, file: ahb_simple_bus.cpp, line: 43</label>
</transition>
<transition>
<source ref="id148"/>
<target ref="id144"/>
<label kind="guard">
!(current_req_master == 0) &amp;&amp; 
!(current_req_master == 1)
</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id144"/>
<target ref="id142"/>
<label kind="synchronisation">
bus_grant$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id151"/>
<target ref="id986"/>
<label kind="assignment">
slave_sock0$nb_transport_bw$param$tran = m_grant_txn,
slave_sock0$nb_transport_bw$param$phase = m_grant_phase,
slave_sock0$nb_transport_bw$param$t = m_grant_time</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id986"/>
<target ref="id154"/>
<label kind="synchronisation">
slave_sock0$nb_transport_bw$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id154"/>
<target ref="id144"/>
<label kind="synchronisation">
slave_sock0$nb_transport_bw$ctrl?
</label>
<label kind="assignment">
slave_sock0$nb_transport_bw$param$tran = NULL,
slave_sock0$nb_transport_bw$param$phase = NULL,
slave_sock0$nb_transport_bw$param$t = NULL,
retval = slave_sock0$nb_transport_bw$return</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id152"/>
<target ref="id992"/>
<label kind="assignment">
slave_sock1$nb_transport_bw$param$tran = m_grant_txn,
slave_sock1$nb_transport_bw$param$phase = m_grant_phase,
slave_sock1$nb_transport_bw$param$t = m_grant_time</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id992"/>
<target ref="id158"/>
<label kind="synchronisation">
slave_sock1$nb_transport_bw$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id158"/>
<target ref="id144"/>
<label kind="synchronisation">
slave_sock1$nb_transport_bw$ctrl?
</label>
<label kind="assignment">
slave_sock1$nb_transport_bw$param$tran = NULL,
slave_sock1$nb_transport_bw$param$phase = NULL,
slave_sock1$nb_transport_bw$param$t = NULL,
retval = slave_sock1$nb_transport_bw$return</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id143"/>
<target ref="id1193"/>
<label kind="guard">
!(addr_is_valid_int(m_grant_time))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id145"/>
<target ref="id1194"/>
<label kind="guard">
!(addr_is_valid_int(m_grant_phase))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
</template>
<template>
<name>
ahb_simple_bus$bus_ungrant</name>
<parameter>
int_addr_ptr &amp;m_grant_time, data_addr_ptr &amp;slave_sock1$nb_transport_bw$param$tran, data_addr_ptr &amp;m_grant_txn, chan &amp;slave_sock0$nb_transport_bw$ctrl, tlm_sync_enum &amp;slave_sock0$nb_transport_bw$return, int_addr_ptr &amp;slave_sock0$nb_transport_bw$param$t, int_addr_ptr &amp;m_grant_phase, data_addr_ptr &amp;slave_sock0$nb_transport_bw$param$tran, int_addr_ptr &amp;slave_sock1$nb_transport_bw$param$phase, unsigned_short &amp;m_InService_Register, chan &amp;bus_grant_ev$notify_imm, chan &amp;slave_sock1$nb_transport_bw$ctrl, unsigned_int &amp;outstanding_txn_count, chan &amp;bus_ungrant$ctrl, unsigned_short &amp;m_BusRequest_Register, unsigned_int &amp;current_req_master, int_addr_ptr &amp;slave_sock1$nb_transport_bw$param$t, tlm_sync_enum &amp;slave_sock1$nb_transport_bw$return, int_addr_ptr &amp;slave_sock0$nb_transport_bw$param$phase</parameter>
<declaration>
tlm_sync_enum retval;
</declaration>
<location id="id120">
<name>
init_location</name>
</location>
<location id="id121">
<urgent/>
</location>
<location id="id123">
<urgent/>
</location>
<location id="id124">
<urgent/>
</location>
<location id="id126">
<urgent/>
</location>
<location id="id128">
<urgent/>
</location>
<location id="id131">
</location>
<location id="id127">
<urgent/>
</location>
<location id="id129">
<urgent/>
</location>
<location id="id135">
</location>
<location id="id138">
<urgent/>
</location>
<location id="id140">
<urgent/>
</location>
<location id="id122">
<urgent/>
</location>
<location id="id1069">
<urgent/>
</location>
<location id="id1075">
<urgent/>
</location>
<location id="id1205">
<name>
mem_access_fail_64</name>
<urgent/>
</location>
<location id="id1206">
<name>
mem_access_fail_65</name>
<urgent/>
</location>
<init ref="id120"/>
<transition>
<source ref="id120"/>
<target ref="id121"/>
<label kind="synchronisation">
bus_ungrant$ctrl?
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id121"/>
<target ref="id123"/>
<label kind="guard">
addr_is_valid_int(m_grant_time)
</label>
<label kind="assignment">
intMem[m_grant_time] = 1</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 5012, file: ahb_simple_bus.cpp, line: 69</label>
</transition>
<transition>
<source ref="id123"/>
<target ref="id124"/>
<label kind="guard">
addr_is_valid_int(m_grant_phase)
</label>
<label kind="assignment">
intMem[m_grant_phase] = 62</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 5046, file: ahb_simple_bus.cpp, line: 70</label>
</transition>
<transition>
<source ref="id124"/>
<target ref="id126"/>
<label kind="assignment">
m_InService_Register = 0,
retval = TLM_ACCEPTED</label>
<label kind="comments">
Update:
nodeID: 5064, file: ahb_simple_bus.cpp, line: 71,
nodeID: 5084, file: ahb_simple_bus.cpp, line: 72</label>
</transition>
<transition>
<source ref="id126"/>
<target ref="id128"/>
<label kind="guard">
current_req_master == 0
</label>
<label kind="comments">
Guard:
nodeID: 5110, file: ahb_simple_bus.cpp, line: 75</label>
</transition>
<transition>
<source ref="id126"/>
<target ref="id129"/>
<label kind="guard">
current_req_master == 1
</label>
<label kind="comments">
Guard:
nodeID: 5172, file: ahb_simple_bus.cpp, line: 80</label>
</transition>
<transition>
<source ref="id126"/>
<target ref="id127"/>
<label kind="guard">
!(current_req_master == 0) &amp;&amp; 
!(current_req_master == 1)
</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id127"/>
<target ref="id138"/>
<label kind="assignment">
outstanding_txn_count = 0</label>
<label kind="comments">
Update:
nodeID: 5323, file: ahb_simple_bus.cpp, line: 94</label>
</transition>
<transition>
<source ref="id138"/>
<target ref="id140"/>
<label kind="guard">
m_BusRequest_Register != 0
</label>
<label kind="comments">
Guard:
nodeID: 5341, file: ahb_simple_bus.cpp, line: 95</label>
</transition>
<transition>
<source ref="id140"/>
<target ref="id122"/>
<label kind="synchronisation">
bus_grant_ev$notify_imm!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id138"/>
<target ref="id122"/>
<label kind="guard">
!(m_BusRequest_Register != 0)
</label>
<label kind="comments">
Guard:
nodeID: 5341, file: ahb_simple_bus.cpp, line: 95</label>
</transition>
<transition>
<source ref="id122"/>
<target ref="id120"/>
<label kind="synchronisation">
bus_ungrant$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id128"/>
<target ref="id1069"/>
<label kind="assignment">
slave_sock0$nb_transport_bw$param$tran = m_grant_txn,
slave_sock0$nb_transport_bw$param$phase = m_grant_phase,
slave_sock0$nb_transport_bw$param$t = m_grant_time</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id1069"/>
<target ref="id131"/>
<label kind="synchronisation">
slave_sock0$nb_transport_bw$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id131"/>
<target ref="id127"/>
<label kind="synchronisation">
slave_sock0$nb_transport_bw$ctrl?
</label>
<label kind="assignment">
slave_sock0$nb_transport_bw$param$tran = NULL,
slave_sock0$nb_transport_bw$param$phase = NULL,
slave_sock0$nb_transport_bw$param$t = NULL,
retval = slave_sock0$nb_transport_bw$return</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id129"/>
<target ref="id1075"/>
<label kind="assignment">
slave_sock1$nb_transport_bw$param$tran = m_grant_txn,
slave_sock1$nb_transport_bw$param$phase = m_grant_phase,
slave_sock1$nb_transport_bw$param$t = m_grant_time</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id1075"/>
<target ref="id135"/>
<label kind="synchronisation">
slave_sock1$nb_transport_bw$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id135"/>
<target ref="id127"/>
<label kind="synchronisation">
slave_sock1$nb_transport_bw$ctrl?
</label>
<label kind="assignment">
slave_sock1$nb_transport_bw$param$tran = NULL,
slave_sock1$nb_transport_bw$param$phase = NULL,
slave_sock1$nb_transport_bw$param$t = NULL,
retval = slave_sock1$nb_transport_bw$return</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id121"/>
<target ref="id1205"/>
<label kind="guard">
!(addr_is_valid_int(m_grant_time))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id123"/>
<target ref="id1206"/>
<label kind="guard">
!(addr_is_valid_int(m_grant_phase))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
</template>
<template>
<name>
ahb_simple_bus$get_index</name>
<parameter>
chan &amp;get_index$ctrl, uint64 &amp;get_index$param$address, unsigned_int &amp;get_index$return</parameter>
<declaration>
uint64 address;
unsigned_int i;
</declaration>
<location id="id167">
<name>
init_location</name>
</location>
<location id="id171">
<urgent/>
</location>
<location id="id172">
<urgent/>
</location>
<location id="id173">
<urgent/>
</location>
<location id="id175">
<urgent/>
</location>
<location id="id170">
<urgent/>
</location>
<location id="id1139">
<urgent/>
</location>
<location id="id1140">
<urgent/>
</location>
<init ref="id167"/>
<transition>
<source ref="id171"/>
<target ref="id172"/>
<label kind="guard">
i &lt; 2 + 0
</label>
<label kind="comments">
Guard:
nodeID: 5555, file: ahb_simple_bus.cpp, line: 117</label>
</transition>
<transition>
<source ref="id172"/>
<target ref="id175"/>
<label kind="guard">
address &gt;= i * 3 &amp;&amp; 
address &lt; (i + 1) * 3
</label>
<label kind="comments">
Guard:
nodeID: 5629, file: ahb_simple_bus.cpp, line: 118</label>
</transition>
<transition>
<source ref="id172"/>
<target ref="id173"/>
<label kind="guard">
!(address &gt;= i * 3 &amp;&amp; 
address &lt; (i + 1) * 3)
</label>
<label kind="comments">
Guard:
nodeID: 5629, file: ahb_simple_bus.cpp, line: 118</label>
</transition>
<transition>
<source ref="id173"/>
<target ref="id171"/>
<label kind="assignment">
i = i + 1</label>
<label kind="comments">
Update:
nodeID: 5583, file: ahb_simple_bus.cpp, line: 117</label>
</transition>
<transition>
<source ref="id171"/>
<target ref="id170"/>
<label kind="guard">
!(i &lt; 2 + 0)
</label>
<label kind="comments">
Guard:
nodeID: 5555, file: ahb_simple_bus.cpp, line: 117</label>
</transition>
<transition>
<source ref="id167"/>
<target ref="id171"/>
<label kind="synchronisation">
get_index$ctrl?
</label>
<label kind="assignment">
address = get_index$param$address,
i = 0</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: 5533, file: ahb_simple_bus.cpp, line: 117</label>
</transition>
<transition>
<source ref="id175"/>
<target ref="id1139"/>
<label kind="assignment">
get_index$return = i</label>
<label kind="comments">
Update:
nodeID: 5669, file: ahb_simple_bus.cpp, line: 119</label>
</transition>
<transition>
<source ref="id1139"/>
<target ref="id167"/>
<label kind="synchronisation">
get_index$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id170"/>
<target ref="id1140"/>
<label kind="assignment">
get_index$return = 0</label>
<label kind="comments">
Update:
nodeID: 5680, file: ahb_simple_bus.cpp, line: 122</label>
</transition>
<transition>
<source ref="id1140"/>
<target ref="id167"/>
<label kind="synchronisation">
get_index$ctrl!
</label>
<label kind="comments">
</label>
</transition>
</template>
<template>
<name>
ahb_simple_bus$nb_transport_bw</name>
<parameter>
data_addr_ptr &amp;slave_sock1$nb_transport_bw$param$tran, chan &amp;slave_sock0$nb_transport_bw$ctrl, tlm_sync_enum &amp;slave_sock0$nb_transport_bw$return, unsigned_int_addr_ptr &amp;m_default_size, int_addr_ptr &amp;slave_sock0$nb_transport_bw$param$t, int &amp;m_req_sample_time, unsigned_int &amp;m_drop_cycle, data_addr_ptr &amp;slave_sock0$nb_transport_bw$param$tran, int_addr_ptr &amp;slave_sock1$nb_transport_bw$param$phase, int_addr_ptr &amp;nb_transport_bw$param$t, unsigned_int &amp;current_data_master, tlm_sync_enum &amp;nb_transport_bw$return, unsigned_int &amp;data_count, int &amp;end_data_ev$notify_t, chan &amp;nb_transport_bw$ctrl, chan &amp;slave_sock1$nb_transport_bw$ctrl, chan &amp;end_data_ev$notify, int_addr_ptr &amp;slave_sock1$nb_transport_bw$param$t, tlm_sync_enum &amp;slave_sock1$nb_transport_bw$return, int_addr_ptr &amp;nb_transport_bw$param$phase, data_addr_ptr &amp;outstanding_data, data_addr_ptr &amp;nb_transport_bw$param$tran, int_addr_ptr &amp;slave_sock0$nb_transport_bw$param$phase</parameter>
<declaration>
data_addr_ptr tran = NULL;
int_addr_ptr phase = NULL;
int_addr_ptr t = NULL;
unsigned_int_addr_ptr size = NULL;
tlm_sync_enum retval;
</declaration>
<location id="id179">
<name>
init_location</name>
</location>
<location id="id180">
<urgent/>
</location>
<location id="id183">
<urgent/>
</location>
<location id="id185">
<urgent/>
</location>
<location id="id184">
<urgent/>
</location>
<location id="id187">
<urgent/>
</location>
<location id="id182">
<urgent/>
</location>
<location id="id190">
<urgent/>
</location>
<location id="id191">
<urgent/>
</location>
<location id="id193">
<urgent/>
</location>
<location id="id192">
<urgent/>
</location>
<location id="id195">
<urgent/>
</location>
<location id="id197">
<urgent/>
</location>
<location id="id196">
<urgent/>
</location>
<location id="id199">
<urgent/>
</location>
<location id="id201">
<urgent/>
</location>
<location id="id204">
</location>
<location id="id200">
<urgent/>
</location>
<location id="id202">
<urgent/>
</location>
<location id="id208">
</location>
<location id="id1043">
<urgent/>
</location>
<location id="id1046">
<urgent/>
</location>
<location id="id1052">
<urgent/>
</location>
<location id="id1056">
<urgent/>
</location>
<location id="id1202">
<name>
mem_access_fail_61</name>
<urgent/>
</location>
<init ref="id179"/>
<transition>
<source ref="id180"/>
<target ref="id183"/>
<label kind="guard">
intMem[phase] == 43 || 
intMem[phase] == BEGIN_RESP || 
intMem[phase] == 44
</label>
<label kind="comments">
Guard:
nodeID: 5840, file: ahb_simple_bus.cpp, line: 134</label>
</transition>
<transition>
<source ref="id183"/>
<target ref="id185"/>
<label kind="guard">
intMem[phase] == 44 || 
dataMem[tran].response_status != TLM_OK_RESPONSE
</label>
<label kind="comments">
Guard:
nodeID: 5876, file: ahb_simple_bus.cpp, line: 135</label>
</transition>
<transition>
<source ref="id185"/>
<target ref="id184"/>
<label kind="assignment">
m_drop_cycle = 1</label>
<label kind="comments">
Update:
nodeID: 5911, file: ahb_simple_bus.cpp, line: 136</label>
</transition>
<transition>
<source ref="id183"/>
<target ref="id187"/>
<label kind="guard">
!(intMem[phase] == 44 || 
dataMem[tran].response_status != TLM_OK_RESPONSE)
</label>
<label kind="comments">
Guard:
nodeID: 5876, file: ahb_simple_bus.cpp, line: 135</label>
</transition>
<transition>
<source ref="id187"/>
<target ref="id184"/>
<label kind="assignment">
outstanding_data = NULL</label>
<label kind="comments">
Update:
nodeID: 5931, file: ahb_simple_bus.cpp, line: 138</label>
</transition>
<transition>
<source ref="id180"/>
<target ref="id182"/>
<label kind="guard">
!(intMem[phase] == 43 || 
intMem[phase] == BEGIN_RESP || 
intMem[phase] == 44)
</label>
<label kind="comments">
Guard:
nodeID: 5840, file: ahb_simple_bus.cpp, line: 134</label>
</transition>
<transition>
<source ref="id182"/>
<target ref="id190"/>
<label kind="assignment">
size = NULL</label>
<label kind="comments">
Update:
nodeID: 5961, file: ahb_simple_bus.cpp, line: 143</label>
</transition>
<transition>
<source ref="id190"/>
<target ref="id191"/>
<label kind="guard">
addr_is_valid_data(tran)
</label>
<label kind="assignment">
size = dataMem[tran].burst_size</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 5981, file: ahb_simple_bus.cpp, line: 144</label>
</transition>
<transition>
<source ref="id191"/>
<target ref="id193"/>
<label kind="guard">
unsigned_intMem[size] == 0
</label>
<label kind="comments">
Guard:
nodeID: 6007, file: ahb_simple_bus.cpp, line: 145</label>
</transition>
<transition>
<source ref="id193"/>
<target ref="id192"/>
<label kind="assignment">
size = m_default_size</label>
<label kind="comments">
Update:
nodeID: 6027, file: ahb_simple_bus.cpp, line: 146</label>
</transition>
<transition>
<source ref="id191"/>
<target ref="id192"/>
<label kind="guard">
!(unsigned_intMem[size] == 0)
</label>
<label kind="comments">
Guard:
nodeID: 6007, file: ahb_simple_bus.cpp, line: 145</label>
</transition>
<transition>
<source ref="id192"/>
<target ref="id195"/>
<label kind="assignment">
data_count++</label>
<label kind="comments">
Update:
nodeID: 6047, file: ahb_simple_bus.cpp, line: 149</label>
</transition>
<transition>
<source ref="id195"/>
<target ref="id197"/>
<label kind="guard">
data_count == (dataMem[tran].data_length / unsigned_intMem[size])
</label>
<label kind="comments">
Guard:
nodeID: 6059, file: ahb_simple_bus.cpp, line: 150</label>
</transition>
<transition>
<source ref="id197"/>
<target ref="id196"/>
<label kind="assignment">
data_count = 0</label>
<label kind="comments">
Update:
nodeID: 6104, file: ahb_simple_bus.cpp, line: 152</label>
</transition>
<transition>
<source ref="id195"/>
<target ref="id196"/>
<label kind="guard">
!(data_count == (dataMem[tran].data_length / unsigned_intMem[size]))
</label>
<label kind="comments">
Guard:
nodeID: 6059, file: ahb_simple_bus.cpp, line: 150</label>
</transition>
<transition>
<source ref="id196"/>
<target ref="id199"/>
<label kind="assignment">
retval = TLM_ACCEPTED</label>
<label kind="comments">
Update:
nodeID: 6124, file: ahb_simple_bus.cpp, line: 155</label>
</transition>
<transition>
<source ref="id199"/>
<target ref="id201"/>
<label kind="guard">
current_data_master == 0
</label>
<label kind="comments">
Guard:
nodeID: 6150, file: ahb_simple_bus.cpp, line: 159</label>
</transition>
<transition>
<source ref="id199"/>
<target ref="id202"/>
<label kind="guard">
current_data_master == 1
</label>
<label kind="comments">
Guard:
nodeID: 6208, file: ahb_simple_bus.cpp, line: 164</label>
</transition>
<transition>
<source ref="id199"/>
<target ref="id200"/>
<label kind="guard">
!(current_data_master == 0) &amp;&amp; 
!(current_data_master == 1)
</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id179"/>
<target ref="id180"/>
<label kind="synchronisation">
nb_transport_bw$ctrl?
</label>
<label kind="assignment">
tran = nb_transport_bw$param$tran,
phase = nb_transport_bw$param$phase,
t = nb_transport_bw$param$t</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id184"/>
<target ref="id1043"/>
<label kind="assignment">
end_data_ev$notify_t = m_req_sample_time</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id1043"/>
<target ref="id182"/>
<label kind="synchronisation">
end_data_ev$notify!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id201"/>
<target ref="id1046"/>
<label kind="assignment">
slave_sock0$nb_transport_bw$param$tran = tran,
slave_sock0$nb_transport_bw$param$phase = phase,
slave_sock0$nb_transport_bw$param$t = t</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id1046"/>
<target ref="id204"/>
<label kind="synchronisation">
slave_sock0$nb_transport_bw$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id204"/>
<target ref="id200"/>
<label kind="synchronisation">
slave_sock0$nb_transport_bw$ctrl?
</label>
<label kind="assignment">
slave_sock0$nb_transport_bw$param$tran = NULL,
slave_sock0$nb_transport_bw$param$phase = NULL,
slave_sock0$nb_transport_bw$param$t = NULL,
retval = slave_sock0$nb_transport_bw$return</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id202"/>
<target ref="id1052"/>
<label kind="assignment">
slave_sock1$nb_transport_bw$param$tran = tran,
slave_sock1$nb_transport_bw$param$phase = phase,
slave_sock1$nb_transport_bw$param$t = t</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id1052"/>
<target ref="id208"/>
<label kind="synchronisation">
slave_sock1$nb_transport_bw$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id208"/>
<target ref="id200"/>
<label kind="synchronisation">
slave_sock1$nb_transport_bw$ctrl?
</label>
<label kind="assignment">
slave_sock1$nb_transport_bw$param$tran = NULL,
slave_sock1$nb_transport_bw$param$phase = NULL,
slave_sock1$nb_transport_bw$param$t = NULL,
retval = slave_sock1$nb_transport_bw$return</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id200"/>
<target ref="id1056"/>
<label kind="assignment">
nb_transport_bw$return = retval</label>
<label kind="comments">
Update:
nodeID: 6354, file: ahb_simple_bus.cpp, line: 178</label>
</transition>
<transition>
<source ref="id1056"/>
<target ref="id179"/>
<label kind="synchronisation">
nb_transport_bw$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id190"/>
<target ref="id1202"/>
<label kind="guard">
!(addr_is_valid_data(tran))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
</template>
<template>
<name>
ahb_simple_bus$nb_transport_fw</name>
<parameter>
chan &amp;get_index$ctrl, tlm_sync_enum &amp;master_sock_ahb1$nb_transport_fw$return, unsigned_int_addr_ptr &amp;m_default_size, int &amp;bus_grant_ev$notify_t, int_addr_ptr &amp;nb_transport_fw$param$t, int_addr_ptr &amp;master_sock_ahb0$nb_transport_fw$param$phase, tlm_sync_enum &amp;nb_transport_fw$return, data_addr_ptr &amp;nb_transport_fw$param$tran, unsigned_int &amp;data_count, chan &amp;master_sock_ahb0$nb_transport_fw$ctrl, chan &amp;nb_transport_bw$ctrl, int &amp;m_outstanding_req_type, chan &amp;bus_ungrant_ev$notify, unsigned_int &amp;outstanding_txn_count, chan &amp;master_sock_ahb1$nb_transport_fw$ctrl, int &amp;m_bus_req_sample_time, data_addr_ptr &amp;outstanding_data, unsigned_int &amp;get_index$return, data_addr_ptr &amp;nb_transport_bw$param$tran, int_addr_ptr &amp;master_sock_ahb0$nb_transport_fw$param$t, chan &amp;bus_grant_ev$notify, chan &amp;nb_transport_fw$ctrl, uint64 &amp;get_index$param$address, int_addr_ptr &amp;nb_transport_bw$param$t, int &amp;bus_ungrant_ev$notify_t, unsigned_int &amp;current_data_master, int_addr_ptr &amp;master_sock_ahb1$nb_transport_fw$param$t, int_addr_ptr &amp;nb_transport_fw$param$phase, data_addr_ptr &amp;outstanding_req, unsigned_short &amp;m_BusRequest_Register, unsigned_int &amp;current_req_master, tlm_sync_enum &amp;master_sock_ahb0$nb_transport_fw$return, int_addr_ptr &amp;nb_transport_bw$param$phase, int_addr_ptr &amp;master_sock_ahb1$nb_transport_fw$param$phase, data_addr_ptr &amp;master_sock_ahb1$nb_transport_fw$param$tran, data_addr_ptr &amp;master_sock_ahb0$nb_transport_fw$param$tran</parameter>
<declaration>
data_addr_ptr tran = NULL;
int_addr_ptr phase = NULL;
int_addr_ptr t = NULL;
unsigned_int index;
int addr;
int slave_index;
unsigned_short temp;
tlm_sync_enum retval;
int_addr_ptr type = NULL;
unsigned_int_addr_ptr size = NULL;
</declaration>
<location id="id211">
<name>
init_location</name>
</location>
<location id="id212">
<urgent/>
</location>
<location id="id214">
<urgent/>
</location>
<location id="id215">
<urgent/>
</location>
<location id="id217">
</location>
<location id="id220">
<urgent/>
</location>
<location id="id222">
<urgent/>
</location>
<location id="id221">
<urgent/>
</location>
<location id="id225">
<urgent/>
</location>
<location id="id228">
<urgent/>
</location>
<location id="id230">
<urgent/>
</location>
<location id="id231">
<urgent/>
</location>
<location id="id232">
<urgent/>
</location>
<location id="id233">
<urgent/>
</location>
<location id="id235">
<urgent/>
</location>
<location id="id239">
<urgent/>
</location>
<location id="id241">
<urgent/>
</location>
<location id="id242">
<urgent/>
</location>
<location id="id243">
<urgent/>
</location>
<location id="id245">
<urgent/>
</location>
<location id="id246">
<urgent/>
</location>
<location id="id247">
<urgent/>
</location>
<location id="id249">
<urgent/>
</location>
<location id="id248">
<urgent/>
</location>
<location id="id244">
<urgent/>
</location>
<location id="id253">
<urgent/>
</location>
<location id="id254">
<urgent/>
</location>
<location id="id255">
<urgent/>
</location>
<location id="id256">
<urgent/>
</location>
<location id="id257">
<urgent/>
</location>
<location id="id259">
<urgent/>
</location>
<location id="id262">
</location>
<location id="id258">
<urgent/>
</location>
<location id="id260">
<urgent/>
</location>
<location id="id266">
</location>
<location id="id270">
<urgent/>
</location>
<location id="id271">
<urgent/>
</location>
<location id="id273">
<urgent/>
</location>
<location id="id269">
<urgent/>
</location>
<location id="id276">
<urgent/>
</location>
<location id="id275">
<urgent/>
</location>
<location id="id279">
<urgent/>
</location>
<location id="id282">
<urgent/>
</location>
<location id="id281">
<urgent/>
</location>
<location id="id284">
<urgent/>
</location>
<location id="id286">
<urgent/>
</location>
<location id="id287">
<urgent/>
</location>
<location id="id289">
<urgent/>
</location>
<location id="id292">
</location>
<location id="id288">
<urgent/>
</location>
<location id="id290">
<urgent/>
</location>
<location id="id296">
</location>
<location id="id300">
<urgent/>
</location>
<location id="id302">
</location>
<location id="id299">
<urgent/>
</location>
<location id="id303">
<urgent/>
</location>
<location id="id999">
<urgent/>
</location>
<location id="id1001">
<urgent/>
</location>
<location id="id1002">
<urgent/>
</location>
<location id="id1003">
<urgent/>
</location>
<location id="id1004">
<urgent/>
</location>
<location id="id1005">
<urgent/>
</location>
<location id="id1008">
<urgent/>
</location>
<location id="id1014">
<urgent/>
</location>
<location id="id1018">
<urgent/>
</location>
<location id="id1019">
<urgent/>
</location>
<location id="id1022">
<urgent/>
</location>
<location id="id1028">
<urgent/>
</location>
<location id="id1034">
<urgent/>
</location>
<location id="id1038">
<urgent/>
</location>
<location id="id1039">
<urgent/>
</location>
<location id="id1195">
<name>
mem_access_fail_54</name>
<urgent/>
</location>
<location id="id1196">
<name>
mem_access_fail_55</name>
<urgent/>
</location>
<location id="id1197">
<name>
mem_access_fail_56</name>
<urgent/>
</location>
<location id="id1198">
<name>
mem_access_fail_57</name>
<urgent/>
</location>
<location id="id1199">
<name>
mem_access_fail_58</name>
<urgent/>
</location>
<location id="id1200">
<name>
mem_access_fail_59</name>
<urgent/>
</location>
<location id="id1201">
<name>
mem_access_fail_60</name>
<urgent/>
</location>
<init ref="id211"/>
<transition>
<source ref="id212"/>
<target ref="id214"/>
<label kind="guard">
addr_is_valid_data(tran)
</label>
<label kind="assignment">
index = dataMem[tran].amba_id</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 6446, file: ahb_simple_bus.cpp, line: 184</label>
</transition>
<transition>
<source ref="id214"/>
<target ref="id215"/>
<label kind="guard">
addr_is_valid_data(tran)
</label>
<label kind="assignment">
addr = dataMem[tran].address</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 6474, file: ahb_simple_bus.cpp, line: 185</label>
</transition>
<transition>
<source ref="id220"/>
<target ref="id222"/>
<label kind="guard">
intMem[phase] == BEGIN_REQ
</label>
<label kind="comments">
Guard:
nodeID: 6596, file: ahb_simple_bus.cpp, line: 190</label>
</transition>
<transition>
<source ref="id222"/>
<target ref="id221"/>
<label kind="guard">
addr_is_valid_data(tran)
</label>
<label kind="assignment">
dataMem[tran].amba_id = current_req_master</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 6623, file: ahb_simple_bus.cpp, line: 192</label>
</transition>
<transition>
<source ref="id220"/>
<target ref="id221"/>
<label kind="guard">
!(intMem[phase] == BEGIN_REQ)
</label>
<label kind="comments">
Guard:
nodeID: 6596, file: ahb_simple_bus.cpp, line: 190</label>
</transition>
<transition>
<source ref="id221"/>
<target ref="id225"/>
<label kind="guard">
intMem[phase] == 60
</label>
<label kind="comments">
Guard:
nodeID: 6641, file: ahb_simple_bus.cpp, line: 195</label>
</transition>
<transition>
<source ref="id225"/>
<target ref="id228"/>
<label kind="assignment">
temp = 0,
temp = 1 &lt;&lt; index,
m_BusRequest_Register = (m_BusRequest_Register | temp)</label>
<label kind="comments">
Update:
nodeID: 6662, file: ahb_simple_bus.cpp, line: 197,
nodeID: 6680, file: ahb_simple_bus.cpp, line: 198,
nodeID: 6680, file: ahb_simple_bus.cpp, line: 198</label>
</transition>
<transition>
<source ref="id228"/>
<target ref="id230"/>
<label kind="guard">
outstanding_txn_count == 0
</label>
<label kind="comments">
Guard:
nodeID: 6752, file: ahb_simple_bus.cpp, line: 202</label>
</transition>
<transition>
<source ref="id228"/>
<target ref="id232"/>
<label kind="guard">
!(outstanding_txn_count == 0)
</label>
<label kind="comments">
Guard:
nodeID: 6752, file: ahb_simple_bus.cpp, line: 202</label>
</transition>
<transition>
<source ref="id221"/>
<target ref="id233"/>
<label kind="guard">
!(intMem[phase] == 60)
</label>
<label kind="comments">
Guard:
nodeID: 6641, file: ahb_simple_bus.cpp, line: 195</label>
</transition>
<transition>
<source ref="id233"/>
<target ref="id235"/>
<label kind="guard">
intMem[phase] == 63
</label>
<label kind="comments">
Guard:
nodeID: 6837, file: ahb_simple_bus.cpp, line: 212</label>
</transition>
<transition>
<source ref="id235"/>
<target ref="id1004"/>
<label kind="assignment">
temp = 0,
temp = 1 &lt;&lt; index,
m_BusRequest_Register -= temp,
nb_transport_fw$return = TLM_ACCEPTED</label>
<label kind="comments">
Update:
nodeID: 6858, file: ahb_simple_bus.cpp, line: 214,
nodeID: 6876, file: ahb_simple_bus.cpp, line: 215,
nodeID: 6876, file: ahb_simple_bus.cpp, line: 215,
nodeID: 6876, file: ahb_simple_bus.cpp, line: 215</label>
</transition>
<transition>
<source ref="id233"/>
<target ref="id239"/>
<label kind="guard">
!(intMem[phase] == 63)
</label>
<label kind="comments">
Guard:
nodeID: 6837, file: ahb_simple_bus.cpp, line: 212</label>
</transition>
<transition>
<source ref="id239"/>
<target ref="id241"/>
<label kind="guard">
intMem[phase] == BEGIN_REQ
</label>
<label kind="comments">
Guard:
nodeID: 6953, file: ahb_simple_bus.cpp, line: 225</label>
</transition>
<transition>
<source ref="id241"/>
<target ref="id242"/>
<label kind="assignment">
type = NULL</label>
<label kind="comments">
Update:
nodeID: 6975, file: ahb_simple_bus.cpp, line: 226</label>
</transition>
<transition>
<source ref="id242"/>
<target ref="id243"/>
<label kind="guard">
addr_is_valid_data(tran)
</label>
<label kind="assignment">
type = dataMem[tran].trans_type</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 6995, file: ahb_simple_bus.cpp, line: 227</label>
</transition>
<transition>
<source ref="id243"/>
<target ref="id245"/>
<label kind="guard">
intMem[type] == 50
</label>
<label kind="comments">
Guard:
nodeID: 7021, file: ahb_simple_bus.cpp, line: 228</label>
</transition>
<transition>
<source ref="id245"/>
<target ref="id246"/>
<label kind="assignment">
size = NULL</label>
<label kind="comments">
Update:
nodeID: 7042, file: ahb_simple_bus.cpp, line: 230</label>
</transition>
<transition>
<source ref="id246"/>
<target ref="id247"/>
<label kind="guard">
addr_is_valid_data(tran)
</label>
<label kind="assignment">
size = dataMem[tran].burst_size</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 7062, file: ahb_simple_bus.cpp, line: 231</label>
</transition>
<transition>
<source ref="id247"/>
<target ref="id249"/>
<label kind="guard">
unsigned_intMem[size] == 0
</label>
<label kind="comments">
Guard:
nodeID: 7088, file: ahb_simple_bus.cpp, line: 232</label>
</transition>
<transition>
<source ref="id249"/>
<target ref="id248"/>
<label kind="assignment">
size = m_default_size</label>
<label kind="comments">
Update:
nodeID: 7108, file: ahb_simple_bus.cpp, line: 233</label>
</transition>
<transition>
<source ref="id247"/>
<target ref="id248"/>
<label kind="guard">
!(unsigned_intMem[size] == 0)
</label>
<label kind="comments">
Guard:
nodeID: 7088, file: ahb_simple_bus.cpp, line: 232</label>
</transition>
<transition>
<source ref="id248"/>
<target ref="id244"/>
<label kind="guard">
addr_is_valid_data(tran) &amp;&amp; 
addr_is_valid_unsigned_int(size)
</label>
<label kind="assignment">
outstanding_txn_count = dataMem[tran].data_length / unsigned_intMem[size]</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 7130, file: ahb_simple_bus.cpp, line: 235</label>
</transition>
<transition>
<source ref="id243"/>
<target ref="id244"/>
<label kind="guard">
!(intMem[type] == 50)
</label>
<label kind="comments">
Guard:
nodeID: 7021, file: ahb_simple_bus.cpp, line: 228</label>
</transition>
<transition>
<source ref="id244"/>
<target ref="id253"/>
<label kind="guard">
outstanding_data != NULL
</label>
<label kind="comments">
Guard:
nodeID: 7168, file: ahb_simple_bus.cpp, line: 238</label>
</transition>
<transition>
<source ref="id253"/>
<target ref="id254"/>
<label kind="assignment">
outstanding_req = tran</label>
<label kind="comments">
Update:
nodeID: 7189, file: ahb_simple_bus.cpp, line: 241</label>
</transition>
<transition>
<source ref="id254"/>
<target ref="id255"/>
<label kind="guard">
addr_is_valid_int(type)
</label>
<label kind="assignment">
m_outstanding_req_type = intMem[type]</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 7211, file: ahb_simple_bus.cpp, line: 242</label>
</transition>
<transition>
<source ref="id244"/>
<target ref="id256"/>
<label kind="guard">
!(outstanding_data != NULL)
</label>
<label kind="comments">
Guard:
nodeID: 7168, file: ahb_simple_bus.cpp, line: 238</label>
</transition>
<transition>
<source ref="id256"/>
<target ref="id257"/>
<label kind="assignment">
retval = TLM_ACCEPTED</label>
<label kind="comments">
Update:
nodeID: 7257, file: ahb_simple_bus.cpp, line: 246</label>
</transition>
<transition>
<source ref="id257"/>
<target ref="id259"/>
<label kind="guard">
slave_index == 0
</label>
<label kind="comments">
Guard:
nodeID: 7277, file: ahb_simple_bus.cpp, line: 249</label>
</transition>
<transition>
<source ref="id257"/>
<target ref="id260"/>
<label kind="guard">
slave_index == 1
</label>
<label kind="comments">
Guard:
nodeID: 7335, file: ahb_simple_bus.cpp, line: 254</label>
</transition>
<transition>
<source ref="id257"/>
<target ref="id258"/>
<label kind="guard">
!(slave_index == 0) &amp;&amp; 
!(slave_index == 1)
</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id258"/>
<target ref="id270"/>
<label kind="guard">
intMem[type] == 50 || 
intMem[type] == 51
</label>
<label kind="comments">
Guard:
nodeID: 7494, file: ahb_simple_bus.cpp, line: 272</label>
</transition>
<transition>
<source ref="id270"/>
<target ref="id271"/>
<label kind="assignment">
outstanding_data = tran</label>
<label kind="comments">
Update:
nodeID: 7526, file: ahb_simple_bus.cpp, line: 273</label>
</transition>
<transition>
<source ref="id271"/>
<target ref="id273"/>
<label kind="guard">
data_count == 0
</label>
<label kind="comments">
Guard:
nodeID: 7548, file: ahb_simple_bus.cpp, line: 274</label>
</transition>
<transition>
<source ref="id273"/>
<target ref="id269"/>
<label kind="assignment">
current_data_master = current_req_master</label>
<label kind="comments">
Update:
nodeID: 7569, file: ahb_simple_bus.cpp, line: 276</label>
</transition>
<transition>
<source ref="id271"/>
<target ref="id269"/>
<label kind="guard">
!(data_count == 0)
</label>
<label kind="comments">
Guard:
nodeID: 7548, file: ahb_simple_bus.cpp, line: 274</label>
</transition>
<transition>
<source ref="id258"/>
<target ref="id269"/>
<label kind="guard">
!(intMem[type] == 50 || 
intMem[type] == 51)
</label>
<label kind="comments">
Guard:
nodeID: 7494, file: ahb_simple_bus.cpp, line: 272</label>
</transition>
<transition>
<source ref="id269"/>
<target ref="id276"/>
<label kind="guard">
intMem[type] == 52
</label>
<label kind="comments">
Guard:
nodeID: 7591, file: ahb_simple_bus.cpp, line: 279</label>
</transition>
<transition>
<source ref="id276"/>
<target ref="id275"/>
<label kind="assignment">
outstanding_txn_count = 0,
data_count = 0</label>
<label kind="comments">
Update:
nodeID: 7611, file: ahb_simple_bus.cpp, line: 280,
nodeID: 7630, file: ahb_simple_bus.cpp, line: 281</label>
</transition>
<transition>
<source ref="id269"/>
<target ref="id279"/>
<label kind="guard">
!(intMem[type] == 52)
</label>
<label kind="comments">
Guard:
nodeID: 7591, file: ahb_simple_bus.cpp, line: 279</label>
</transition>
<transition>
<source ref="id279"/>
<target ref="id275"/>
<label kind="assignment">
outstanding_txn_count--</label>
<label kind="comments">
Update:
nodeID: 7649, file: ahb_simple_bus.cpp, line: 284</label>
</transition>
<transition>
<source ref="id275"/>
<target ref="id282"/>
<label kind="guard">
outstanding_txn_count == 0
</label>
<label kind="comments">
Guard:
nodeID: 7661, file: ahb_simple_bus.cpp, line: 286</label>
</transition>
<transition>
<source ref="id275"/>
<target ref="id281"/>
<label kind="guard">
!(outstanding_txn_count == 0)
</label>
<label kind="comments">
Guard:
nodeID: 7661, file: ahb_simple_bus.cpp, line: 286</label>
</transition>
<transition>
<source ref="id239"/>
<target ref="id284"/>
<label kind="guard">
!(intMem[phase] == BEGIN_REQ)
</label>
<label kind="comments">
Guard:
nodeID: 6953, file: ahb_simple_bus.cpp, line: 225</label>
</transition>
<transition>
<source ref="id284"/>
<target ref="id286"/>
<label kind="guard">
intMem[phase] == 42
</label>
<label kind="comments">
Guard:
nodeID: 7713, file: ahb_simple_bus.cpp, line: 294</label>
</transition>
<transition>
<source ref="id286"/>
<target ref="id287"/>
<label kind="assignment">
retval = TLM_ACCEPTED</label>
<label kind="comments">
Update:
nodeID: 7736, file: ahb_simple_bus.cpp, line: 299</label>
</transition>
<transition>
<source ref="id287"/>
<target ref="id289"/>
<label kind="guard">
slave_index == 0
</label>
<label kind="comments">
Guard:
nodeID: 7756, file: ahb_simple_bus.cpp, line: 302</label>
</transition>
<transition>
<source ref="id287"/>
<target ref="id290"/>
<label kind="guard">
slave_index == 1
</label>
<label kind="comments">
Guard:
nodeID: 7818, file: ahb_simple_bus.cpp, line: 307</label>
</transition>
<transition>
<source ref="id287"/>
<target ref="id288"/>
<label kind="guard">
!(slave_index == 0) &amp;&amp; 
!(slave_index == 1)
</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id288"/>
<target ref="id300"/>
<label kind="guard">
retval == TLM_UPDATED
</label>
<label kind="comments">
Guard:
nodeID: 7976, file: ahb_simple_bus.cpp, line: 326</label>
</transition>
<transition>
<source ref="id288"/>
<target ref="id299"/>
<label kind="guard">
!(retval == TLM_UPDATED)
</label>
<label kind="comments">
Guard:
nodeID: 7976, file: ahb_simple_bus.cpp, line: 326</label>
</transition>
<transition>
<source ref="id284"/>
<target ref="id303"/>
<label kind="guard">
!(intMem[phase] == 42)
</label>
<label kind="comments">
Guard:
nodeID: 7713, file: ahb_simple_bus.cpp, line: 294</label>
</transition>
<transition>
<source ref="id211"/>
<target ref="id212"/>
<label kind="synchronisation">
nb_transport_fw$ctrl?
</label>
<label kind="assignment">
tran = nb_transport_fw$param$tran,
phase = nb_transport_fw$param$phase,
t = nb_transport_fw$param$t</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id215"/>
<target ref="id999"/>
<label kind="assignment">
get_index$param$address = addr</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id999"/>
<target ref="id217"/>
<label kind="synchronisation">
get_index$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id217"/>
<target ref="id220"/>
<label kind="synchronisation">
get_index$ctrl?
</label>
<label kind="assignment">
get_index$param$address = DEFAULT_UINT64_VALUE,
slave_index = get_index$return,
temp = 0,
retval = TLM_ACCEPTED</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: 6502, file: ahb_simple_bus.cpp, line: 186,
nodeID: 6502, file: ahb_simple_bus.cpp, line: 186,
nodeID: 6502, file: ahb_simple_bus.cpp, line: 186</label>
</transition>
<transition>
<source ref="id230"/>
<target ref="id1001"/>
<label kind="assignment">
bus_grant_ev$notify_t = m_bus_req_sample_time</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id1001"/>
<target ref="id231"/>
<label kind="synchronisation">
bus_grant_ev$notify!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id231"/>
<target ref="id1002"/>
<label kind="assignment">
nb_transport_fw$return = TLM_ACCEPTED</label>
<label kind="comments">
Update:
nodeID: 6793, file: ahb_simple_bus.cpp, line: 207</label>
</transition>
<transition>
<source ref="id1002"/>
<target ref="id211"/>
<label kind="synchronisation">
nb_transport_fw$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id232"/>
<target ref="id1003"/>
<label kind="assignment">
nb_transport_fw$return = TLM_ACCEPTED</label>
<label kind="comments">
Update:
nodeID: 6815, file: ahb_simple_bus.cpp, line: 210</label>
</transition>
<transition>
<source ref="id1003"/>
<target ref="id211"/>
<label kind="synchronisation">
nb_transport_fw$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id1004"/>
<target ref="id211"/>
<label kind="synchronisation">
nb_transport_fw$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id255"/>
<target ref="id1005"/>
<label kind="assignment">
nb_transport_fw$return = TLM_ACCEPTED</label>
<label kind="comments">
Update:
nodeID: 7234, file: ahb_simple_bus.cpp, line: 244</label>
</transition>
<transition>
<source ref="id1005"/>
<target ref="id211"/>
<label kind="synchronisation">
nb_transport_fw$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id259"/>
<target ref="id1008"/>
<label kind="assignment">
master_sock_ahb0$nb_transport_fw$param$tran = tran,
master_sock_ahb0$nb_transport_fw$param$phase = phase,
master_sock_ahb0$nb_transport_fw$param$t = t</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id1008"/>
<target ref="id262"/>
<label kind="synchronisation">
master_sock_ahb0$nb_transport_fw$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id262"/>
<target ref="id258"/>
<label kind="synchronisation">
master_sock_ahb0$nb_transport_fw$ctrl?
</label>
<label kind="assignment">
master_sock_ahb0$nb_transport_fw$param$tran = NULL,
master_sock_ahb0$nb_transport_fw$param$phase = NULL,
master_sock_ahb0$nb_transport_fw$param$t = NULL,
retval = master_sock_ahb0$nb_transport_fw$return</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id260"/>
<target ref="id1014"/>
<label kind="assignment">
master_sock_ahb1$nb_transport_fw$param$tran = tran,
master_sock_ahb1$nb_transport_fw$param$phase = phase,
master_sock_ahb1$nb_transport_fw$param$t = t</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id1014"/>
<target ref="id266"/>
<label kind="synchronisation">
master_sock_ahb1$nb_transport_fw$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id266"/>
<target ref="id258"/>
<label kind="synchronisation">
master_sock_ahb1$nb_transport_fw$ctrl?
</label>
<label kind="assignment">
master_sock_ahb1$nb_transport_fw$param$tran = NULL,
master_sock_ahb1$nb_transport_fw$param$phase = NULL,
master_sock_ahb1$nb_transport_fw$param$t = NULL,
retval = master_sock_ahb1$nb_transport_fw$return</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id282"/>
<target ref="id1018"/>
<label kind="assignment">
bus_ungrant_ev$notify_t = m_bus_req_sample_time</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id1018"/>
<target ref="id281"/>
<label kind="synchronisation">
bus_ungrant_ev$notify!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id281"/>
<target ref="id1019"/>
<label kind="assignment">
nb_transport_fw$return = retval</label>
<label kind="comments">
Update:
nodeID: 7693, file: ahb_simple_bus.cpp, line: 291</label>
</transition>
<transition>
<source ref="id1019"/>
<target ref="id211"/>
<label kind="synchronisation">
nb_transport_fw$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id289"/>
<target ref="id1022"/>
<label kind="assignment">
master_sock_ahb0$nb_transport_fw$param$tran = outstanding_data,
master_sock_ahb0$nb_transport_fw$param$phase = phase,
master_sock_ahb0$nb_transport_fw$param$t = t</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id1022"/>
<target ref="id292"/>
<label kind="synchronisation">
master_sock_ahb0$nb_transport_fw$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id292"/>
<target ref="id288"/>
<label kind="synchronisation">
master_sock_ahb0$nb_transport_fw$ctrl?
</label>
<label kind="assignment">
master_sock_ahb0$nb_transport_fw$param$tran = NULL,
master_sock_ahb0$nb_transport_fw$param$phase = NULL,
master_sock_ahb0$nb_transport_fw$param$t = NULL,
retval = master_sock_ahb0$nb_transport_fw$return</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id290"/>
<target ref="id1028"/>
<label kind="assignment">
master_sock_ahb1$nb_transport_fw$param$tran = outstanding_data,
master_sock_ahb1$nb_transport_fw$param$phase = phase,
master_sock_ahb1$nb_transport_fw$param$t = t</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id1028"/>
<target ref="id296"/>
<label kind="synchronisation">
master_sock_ahb1$nb_transport_fw$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id296"/>
<target ref="id288"/>
<label kind="synchronisation">
master_sock_ahb1$nb_transport_fw$ctrl?
</label>
<label kind="assignment">
master_sock_ahb1$nb_transport_fw$param$tran = NULL,
master_sock_ahb1$nb_transport_fw$param$phase = NULL,
master_sock_ahb1$nb_transport_fw$param$t = NULL,
retval = master_sock_ahb1$nb_transport_fw$return</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id300"/>
<target ref="id1034"/>
<label kind="assignment">
nb_transport_bw$param$tran = outstanding_data,
nb_transport_bw$param$phase = phase,
nb_transport_bw$param$t = t</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id1034"/>
<target ref="id302"/>
<label kind="synchronisation">
nb_transport_bw$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id302"/>
<target ref="id299"/>
<label kind="synchronisation">
nb_transport_bw$ctrl?
</label>
<label kind="assignment">
nb_transport_bw$param$tran = NULL,
nb_transport_bw$param$phase = NULL,
nb_transport_bw$param$t = NULL</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id299"/>
<target ref="id1038"/>
<label kind="assignment">
nb_transport_fw$return = TLM_ACCEPTED</label>
<label kind="comments">
Update:
nodeID: 8032, file: ahb_simple_bus.cpp, line: 330</label>
</transition>
<transition>
<source ref="id1038"/>
<target ref="id211"/>
<label kind="synchronisation">
nb_transport_fw$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id303"/>
<target ref="id1039"/>
<label kind="assignment">
nb_transport_fw$return = TLM_ACCEPTED</label>
<label kind="comments">
Update:
nodeID: 8055, file: ahb_simple_bus.cpp, line: 334</label>
</transition>
<transition>
<source ref="id1039"/>
<target ref="id211"/>
<label kind="synchronisation">
nb_transport_fw$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id212"/>
<target ref="id1195"/>
<label kind="guard">
!(addr_is_valid_data(tran))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id214"/>
<target ref="id1196"/>
<label kind="guard">
!(addr_is_valid_data(tran))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id222"/>
<target ref="id1197"/>
<label kind="guard">
!(addr_is_valid_data(tran))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id242"/>
<target ref="id1198"/>
<label kind="guard">
!(addr_is_valid_data(tran))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id246"/>
<target ref="id1199"/>
<label kind="guard">
!(addr_is_valid_data(tran))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id248"/>
<target ref="id1200"/>
<label kind="guard">
!(addr_is_valid_data(tran) &amp;&amp; 
addr_is_valid_unsigned_int(size))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id254"/>
<target ref="id1201"/>
<label kind="guard">
!(addr_is_valid_int(type))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
</template>
<template>
<name>
ahb_simple_bus$pendingReqProcess</name>
<parameter>
chan &amp;get_index$ctrl, tlm_sync_enum &amp;master_sock_ahb1$nb_transport_fw$return, chan &amp;slave_sock0$nb_transport_bw$ctrl, int_addr_ptr &amp;slave_sock1$nb_transport_bw$param$phase, int_addr_ptr &amp;master_sock_ahb0$nb_transport_fw$param$phase, unsigned_int &amp;data_count, chan &amp;master_sock_ahb0$nb_transport_fw$ctrl, int &amp;m_outstanding_req_type, chan &amp;bus_ungrant_ev$notify, unsigned_int &amp;outstanding_txn_count, chan &amp;pendingReqProcess$ctrl, int_addr_ptr &amp;slave_sock1$nb_transport_bw$param$t, chan &amp;master_sock_ahb1$nb_transport_fw$ctrl, int &amp;m_bus_req_sample_time, data_addr_ptr &amp;outstanding_data, unsigned_int &amp;get_index$return, data_addr_ptr &amp;slave_sock1$nb_transport_bw$param$tran, int_addr_ptr &amp;master_sock_ahb0$nb_transport_fw$param$t, tlm_sync_enum &amp;slave_sock0$nb_transport_bw$return, int_addr_ptr &amp;slave_sock0$nb_transport_bw$param$t, uint64 &amp;get_index$param$address, unsigned_int &amp;m_drop_cycle, data_addr_ptr &amp;slave_sock0$nb_transport_bw$param$tran, int &amp;bus_ungrant_ev$notify_t, unsigned_int &amp;current_data_master, int_addr_ptr &amp;master_sock_ahb1$nb_transport_fw$param$t, chan &amp;slave_sock1$nb_transport_bw$ctrl, data_addr_ptr &amp;outstanding_req, unsigned_int &amp;current_req_master, tlm_sync_enum &amp;master_sock_ahb0$nb_transport_fw$return, tlm_sync_enum &amp;slave_sock1$nb_transport_bw$return, int_addr_ptr &amp;master_sock_ahb1$nb_transport_fw$param$phase, data_addr_ptr &amp;master_sock_ahb1$nb_transport_fw$param$tran, data_addr_ptr &amp;master_sock_ahb0$nb_transport_fw$param$tran, int_addr_ptr &amp;slave_sock0$nb_transport_bw$param$phase</parameter>
<declaration>
int_addr_ptr type_ext = NULL;
unsigned_int addr;
unsigned_int index;
int_addr_ptr ph = NULL;
tlm_sync_enum retval;
int_addr_ptr delay = NULL;
</declaration>
<location id="id304">
<name>
init_location</name>
</location>
<location id="id305">
<urgent/>
</location>
<location id="id308">
<urgent/>
</location>
<location id="id309">
<urgent/>
</location>
<location id="id310">
<urgent/>
</location>
<location id="id312">
<urgent/>
</location>
<location id="id313">
<urgent/>
</location>
<location id="id314">
<urgent/>
</location>
<location id="id316">
<urgent/>
</location>
<location id="id307">
<urgent/>
</location>
<location id="id320">
<urgent/>
</location>
<location id="id321">
<urgent/>
</location>
<location id="id322">
<urgent/>
</location>
<location id="id323">
<urgent/>
</location>
<location id="id325">
<urgent/>
</location>
<location id="id324">
<urgent/>
</location>
<location id="id328">
<urgent/>
</location>
<location id="id330">
</location>
<location id="id331">
<urgent/>
</location>
<location id="id332">
<urgent/>
</location>
<location id="id335">
<urgent/>
</location>
<location id="id337">
<urgent/>
</location>
<location id="id340">
</location>
<location id="id336">
<urgent/>
</location>
<location id="id338">
<urgent/>
</location>
<location id="id344">
</location>
<location id="id347">
<urgent/>
</location>
<location id="id349">
<urgent/>
</location>
<location id="id352">
</location>
<location id="id348">
<urgent/>
</location>
<location id="id350">
<urgent/>
</location>
<location id="id356">
</location>
<location id="id359">
<urgent/>
</location>
<location id="id361">
<urgent/>
</location>
<location id="id360">
<urgent/>
</location>
<location id="id306">
<urgent/>
</location>
<location id="id956">
<urgent/>
</location>
<location id="id960">
<urgent/>
</location>
<location id="id966">
<urgent/>
</location>
<location id="id972">
<urgent/>
</location>
<location id="id978">
<urgent/>
</location>
<location id="id982">
<urgent/>
</location>
<location id="id1188">
<name>
mem_access_fail_47</name>
<urgent/>
</location>
<location id="id1189">
<name>
mem_access_fail_48</name>
<urgent/>
</location>
<location id="id1190">
<name>
mem_access_fail_49</name>
<urgent/>
</location>
<location id="id1191">
<name>
mem_access_fail_50</name>
<urgent/>
</location>
<location id="id1192">
<name>
mem_access_fail_51</name>
<urgent/>
</location>
<init ref="id304"/>
<transition>
<source ref="id304"/>
<target ref="id305"/>
<label kind="synchronisation">
pendingReqProcess$ctrl?
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id305"/>
<target ref="id308"/>
<label kind="guard">
m_drop_cycle == 1
</label>
<label kind="comments">
Guard:
nodeID: 8099, file: ahb_simple_bus.cpp, line: 341</label>
</transition>
<transition>
<source ref="id308"/>
<target ref="id309"/>
<label kind="assignment">
m_drop_cycle = 2</label>
<label kind="comments">
Update:
nodeID: 8120, file: ahb_simple_bus.cpp, line: 343</label>
</transition>
<transition>
<source ref="id309"/>
<target ref="id304"/>
<label kind="synchronisation">
pendingReqProcess$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id305"/>
<target ref="id310"/>
<label kind="guard">
!(m_drop_cycle == 1)
</label>
<label kind="comments">
Guard:
nodeID: 8099, file: ahb_simple_bus.cpp, line: 341</label>
</transition>
<transition>
<source ref="id310"/>
<target ref="id312"/>
<label kind="guard">
m_drop_cycle == 2
</label>
<label kind="comments">
Guard:
nodeID: 8146, file: ahb_simple_bus.cpp, line: 347</label>
</transition>
<transition>
<source ref="id312"/>
<target ref="id313"/>
<label kind="assignment">
m_drop_cycle = 3</label>
<label kind="comments">
Update:
nodeID: 8167, file: ahb_simple_bus.cpp, line: 349</label>
</transition>
<transition>
<source ref="id313"/>
<target ref="id304"/>
<label kind="synchronisation">
pendingReqProcess$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id310"/>
<target ref="id314"/>
<label kind="guard">
!(m_drop_cycle == 2)
</label>
<label kind="comments">
Guard:
nodeID: 8146, file: ahb_simple_bus.cpp, line: 347</label>
</transition>
<transition>
<source ref="id314"/>
<target ref="id316"/>
<label kind="guard">
m_drop_cycle == 3
</label>
<label kind="comments">
Guard:
nodeID: 8193, file: ahb_simple_bus.cpp, line: 353</label>
</transition>
<transition>
<source ref="id316"/>
<target ref="id307"/>
<label kind="assignment">
m_drop_cycle = 0,
outstanding_data = NULL</label>
<label kind="comments">
Update:
nodeID: 8213, file: ahb_simple_bus.cpp, line: 354,
nodeID: 8231, file: ahb_simple_bus.cpp, line: 355</label>
</transition>
<transition>
<source ref="id314"/>
<target ref="id307"/>
<label kind="guard">
!(m_drop_cycle == 3)
</label>
<label kind="comments">
Guard:
nodeID: 8193, file: ahb_simple_bus.cpp, line: 353</label>
</transition>
<transition>
<source ref="id307"/>
<target ref="id320"/>
<label kind="guard">
outstanding_req != NULL
</label>
<label kind="comments">
Guard:
nodeID: 8249, file: ahb_simple_bus.cpp, line: 358</label>
</transition>
<transition>
<source ref="id320"/>
<target ref="id321"/>
<label kind="assignment">
type_ext = NULL</label>
<label kind="comments">
Update:
nodeID: 8333, file: ahb_simple_bus.cpp, line: 361</label>
</transition>
<transition>
<source ref="id321"/>
<target ref="id322"/>
<label kind="guard">
addr_is_valid_data(outstanding_req)
</label>
<label kind="assignment">
type_ext = dataMem[outstanding_req].trans_type</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 8353, file: ahb_simple_bus.cpp, line: 362</label>
</transition>
<transition>
<source ref="id322"/>
<target ref="id323"/>
<label kind="guard">
addr_is_valid_int(type_ext)
</label>
<label kind="assignment">
intMem[type_ext] = m_outstanding_req_type</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 8379, file: ahb_simple_bus.cpp, line: 363</label>
</transition>
<transition>
<source ref="id323"/>
<target ref="id325"/>
<label kind="guard">
intMem[type_ext] == 52
</label>
<label kind="comments">
Guard:
nodeID: 8402, file: ahb_simple_bus.cpp, line: 365</label>
</transition>
<transition>
<source ref="id325"/>
<target ref="id324"/>
<label kind="assignment">
outstanding_txn_count = 1,
data_count = 0</label>
<label kind="comments">
Update:
nodeID: 8422, file: ahb_simple_bus.cpp, line: 367,
nodeID: 8440, file: ahb_simple_bus.cpp, line: 368</label>
</transition>
<transition>
<source ref="id323"/>
<target ref="id324"/>
<label kind="guard">
!(intMem[type_ext] == 52)
</label>
<label kind="comments">
Guard:
nodeID: 8402, file: ahb_simple_bus.cpp, line: 365</label>
</transition>
<transition>
<source ref="id324"/>
<target ref="id328"/>
<label kind="guard">
addr_is_valid_data(outstanding_req)
</label>
<label kind="assignment">
addr = dataMem[outstanding_req].address</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 8459, file: ahb_simple_bus.cpp, line: 371</label>
</transition>
<transition>
<source ref="id331"/>
<target ref="id332"/>
<label kind="guard">
addr_is_valid_data(outstanding_req)
</label>
<label kind="assignment">
dataMem[outstanding_req].amba_id = current_req_master</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 8525, file: ahb_simple_bus.cpp, line: 373</label>
</transition>
<transition>
<source ref="id332"/>
<target ref="id335"/>
<label kind="assignment">
ph = allocate_static_and_init_int(BEGIN_REQ),
delay = allocate_static_and_init_int(1),
retval = TLM_ACCEPTED</label>
<label kind="comments">
Update:
nodeID: 8543, file: ahb_simple_bus.cpp, line: 375,
nodeID: 8571, file: ahb_simple_bus.cpp, line: 376,
nodeID: 8571, file: ahb_simple_bus.cpp, line: 376</label>
</transition>
<transition>
<source ref="id335"/>
<target ref="id337"/>
<label kind="guard">
index == 0
</label>
<label kind="comments">
Guard:
nodeID: 8639, file: ahb_simple_bus.cpp, line: 380</label>
</transition>
<transition>
<source ref="id335"/>
<target ref="id338"/>
<label kind="guard">
index == 1
</label>
<label kind="comments">
Guard:
nodeID: 8701, file: ahb_simple_bus.cpp, line: 385</label>
</transition>
<transition>
<source ref="id335"/>
<target ref="id336"/>
<label kind="guard">
!(index == 0) &amp;&amp; 
!(index == 1)
</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id336"/>
<target ref="id347"/>
<label kind="guard">
addr_is_valid_int(ph)
</label>
<label kind="assignment">
intMem[ph] = END_REQ</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 8853, file: ahb_simple_bus.cpp, line: 405</label>
</transition>
<transition>
<source ref="id347"/>
<target ref="id349"/>
<label kind="guard">
current_req_master == 0
</label>
<label kind="comments">
Guard:
nodeID: 8937, file: ahb_simple_bus.cpp, line: 409</label>
</transition>
<transition>
<source ref="id347"/>
<target ref="id350"/>
<label kind="guard">
current_req_master == 1
</label>
<label kind="comments">
Guard:
nodeID: 8999, file: ahb_simple_bus.cpp, line: 414</label>
</transition>
<transition>
<source ref="id347"/>
<target ref="id348"/>
<label kind="guard">
!(current_req_master == 0) &amp;&amp; 
!(current_req_master == 1)
</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id348"/>
<target ref="id359"/>
<label kind="assignment">
outstanding_txn_count--</label>
<label kind="comments">
Update:
nodeID: 9148, file: ahb_simple_bus.cpp, line: 428</label>
</transition>
<transition>
<source ref="id359"/>
<target ref="id361"/>
<label kind="guard">
outstanding_txn_count == 0
</label>
<label kind="comments">
Guard:
nodeID: 9160, file: ahb_simple_bus.cpp, line: 429</label>
</transition>
<transition>
<source ref="id359"/>
<target ref="id360"/>
<label kind="guard">
!(outstanding_txn_count == 0)
</label>
<label kind="comments">
Guard:
nodeID: 9160, file: ahb_simple_bus.cpp, line: 429</label>
</transition>
<transition>
<source ref="id360"/>
<target ref="id306"/>
<label kind="assignment">
outstanding_data = outstanding_req,
current_data_master = current_req_master,
outstanding_req = NULL,
empty_stack_int(delay),
empty_stack_int(ph)</label>
<label kind="comments">
Update:
nodeID: 9192, file: ahb_simple_bus.cpp, line: 433,
nodeID: 9210, file: ahb_simple_bus.cpp, line: 434,
nodeID: 9210, file: ahb_simple_bus.cpp, line: 434,
nodeID: 9210, file: ahb_simple_bus.cpp, line: 434,
nodeID: 9210, file: ahb_simple_bus.cpp, line: 434</label>
</transition>
<transition>
<source ref="id307"/>
<target ref="id306"/>
<label kind="guard">
!(outstanding_req != NULL)
</label>
<label kind="comments">
Guard:
nodeID: 8249, file: ahb_simple_bus.cpp, line: 358</label>
</transition>
<transition>
<source ref="id306"/>
<target ref="id304"/>
<label kind="synchronisation">
pendingReqProcess$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id328"/>
<target ref="id956"/>
<label kind="assignment">
get_index$param$address = addr</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id956"/>
<target ref="id330"/>
<label kind="synchronisation">
get_index$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id330"/>
<target ref="id331"/>
<label kind="synchronisation">
get_index$ctrl?
</label>
<label kind="assignment">
get_index$param$address = DEFAULT_UINT64_VALUE,
index = get_index$return</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: 8487, file: ahb_simple_bus.cpp, line: 372</label>
</transition>
<transition>
<source ref="id337"/>
<target ref="id960"/>
<label kind="assignment">
master_sock_ahb0$nb_transport_fw$param$tran = outstanding_req,
master_sock_ahb0$nb_transport_fw$param$phase = ph,
master_sock_ahb0$nb_transport_fw$param$t = delay</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id960"/>
<target ref="id340"/>
<label kind="synchronisation">
master_sock_ahb0$nb_transport_fw$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id340"/>
<target ref="id336"/>
<label kind="synchronisation">
master_sock_ahb0$nb_transport_fw$ctrl?
</label>
<label kind="assignment">
master_sock_ahb0$nb_transport_fw$param$tran = NULL,
master_sock_ahb0$nb_transport_fw$param$phase = NULL,
master_sock_ahb0$nb_transport_fw$param$t = NULL,
retval = master_sock_ahb0$nb_transport_fw$return</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id338"/>
<target ref="id966"/>
<label kind="assignment">
master_sock_ahb1$nb_transport_fw$param$tran = outstanding_req,
master_sock_ahb1$nb_transport_fw$param$phase = ph,
master_sock_ahb1$nb_transport_fw$param$t = delay</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id966"/>
<target ref="id344"/>
<label kind="synchronisation">
master_sock_ahb1$nb_transport_fw$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id344"/>
<target ref="id336"/>
<label kind="synchronisation">
master_sock_ahb1$nb_transport_fw$ctrl?
</label>
<label kind="assignment">
master_sock_ahb1$nb_transport_fw$param$tran = NULL,
master_sock_ahb1$nb_transport_fw$param$phase = NULL,
master_sock_ahb1$nb_transport_fw$param$t = NULL,
retval = master_sock_ahb1$nb_transport_fw$return</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id349"/>
<target ref="id972"/>
<label kind="assignment">
slave_sock0$nb_transport_bw$param$tran = outstanding_req,
slave_sock0$nb_transport_bw$param$phase = ph,
slave_sock0$nb_transport_bw$param$t = delay</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id972"/>
<target ref="id352"/>
<label kind="synchronisation">
slave_sock0$nb_transport_bw$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id352"/>
<target ref="id348"/>
<label kind="synchronisation">
slave_sock0$nb_transport_bw$ctrl?
</label>
<label kind="assignment">
slave_sock0$nb_transport_bw$param$tran = NULL,
slave_sock0$nb_transport_bw$param$phase = NULL,
slave_sock0$nb_transport_bw$param$t = NULL,
retval = slave_sock0$nb_transport_bw$return</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id350"/>
<target ref="id978"/>
<label kind="assignment">
slave_sock1$nb_transport_bw$param$tran = outstanding_req,
slave_sock1$nb_transport_bw$param$phase = ph,
slave_sock1$nb_transport_bw$param$t = delay</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id978"/>
<target ref="id356"/>
<label kind="synchronisation">
slave_sock1$nb_transport_bw$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id356"/>
<target ref="id348"/>
<label kind="synchronisation">
slave_sock1$nb_transport_bw$ctrl?
</label>
<label kind="assignment">
slave_sock1$nb_transport_bw$param$tran = NULL,
slave_sock1$nb_transport_bw$param$phase = NULL,
slave_sock1$nb_transport_bw$param$t = NULL,
retval = slave_sock1$nb_transport_bw$return</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id361"/>
<target ref="id982"/>
<label kind="assignment">
bus_ungrant_ev$notify_t = m_bus_req_sample_time</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id982"/>
<target ref="id360"/>
<label kind="synchronisation">
bus_ungrant_ev$notify!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id321"/>
<target ref="id1188"/>
<label kind="guard">
!(addr_is_valid_data(outstanding_req))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id322"/>
<target ref="id1189"/>
<label kind="guard">
!(addr_is_valid_int(type_ext))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id324"/>
<target ref="id1190"/>
<label kind="guard">
!(addr_is_valid_data(outstanding_req))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id331"/>
<target ref="id1191"/>
<label kind="guard">
!(addr_is_valid_data(outstanding_req))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id336"/>
<target ref="id1192"/>
<label kind="guard">
!(addr_is_valid_int(ph))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
</template>
<template>
<name>
ahb_simple_bus$thread0$sensitiveTemp</name>
<parameter>
broadcast chan &amp;bus_ungrant_ev, broadcast chan &amp;sensitive</parameter>
<declaration>
</declaration>
<location id="id369">
</location>
<location id="id370">
<committed/>
</location>
<init ref="id369"/>
<transition>
<source ref="id370"/>
<target ref="id369"/>
<label kind="synchronisation">
sensitive!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id369"/>
<target ref="id370"/>
<label kind="synchronisation">
bus_ungrant_ev?
</label>
<label kind="comments">
</label>
</transition>
</template>
<template>
<name>
ahb_simple_bus$thread1$sensitiveTemp</name>
<parameter>
broadcast chan &amp;bus_grant_ev, broadcast chan &amp;sensitive</parameter>
<declaration>
</declaration>
<location id="id371">
</location>
<location id="id372">
<committed/>
</location>
<init ref="id371"/>
<transition>
<source ref="id372"/>
<target ref="id371"/>
<label kind="synchronisation">
sensitive!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id371"/>
<target ref="id372"/>
<label kind="synchronisation">
bus_grant_ev?
</label>
<label kind="comments">
</label>
</transition>
</template>
<template>
<name>
ahb_simple_bus$thread2$sensitiveTemp</name>
<parameter>
broadcast chan &amp;end_data_ev, broadcast chan &amp;sensitive</parameter>
<declaration>
</declaration>
<location id="id373">
</location>
<location id="id374">
<committed/>
</location>
<init ref="id373"/>
<transition>
<source ref="id374"/>
<target ref="id373"/>
<label kind="synchronisation">
sensitive!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id373"/>
<target ref="id374"/>
<label kind="synchronisation">
end_data_ev?
</label>
<label kind="comments">
</label>
</transition>
</template>
<template>
<name>
ahb_simple_mem$nb_transport_fw</name>
<parameter>
chan &amp;m_peq$notify$ctrl, int &amp;m_peq$peq_element$param$delay, chan &amp;nb_transport_fw$ctrl, int_addr_ptr &amp;nb_transport_fw$param$t, tlm_sync_enum &amp;nb_transport_fw$return, data_addr_ptr &amp;nb_transport_fw$param$tran, int_addr_ptr &amp;nb_transport_fw$param$phase, int_addr_ptr &amp;m_peq$peq_element$param$phase, data_addr_ptr &amp;m_peq$peq_element$param$trans</parameter>
<declaration>
data_addr_ptr tran = NULL;
int_addr_ptr phase = NULL;
int_addr_ptr t = NULL;
</declaration>
<location id="id384">
<name>
init_location</name>
</location>
<location id="id385">
<urgent/>
</location>
<location id="id387">
<urgent/>
</location>
<location id="id388">
<urgent/>
</location>
<location id="id390">
<urgent/>
</location>
<location id="id391">
<urgent/>
</location>
<location id="id392">
<urgent/>
</location>
<location id="id1060">
<urgent/>
</location>
<location id="id1062">
<urgent/>
</location>
<location id="id1063">
<urgent/>
</location>
<location id="id1064">
<urgent/>
</location>
<location id="id1203">
<name>
mem_access_fail_62</name>
<urgent/>
</location>
<location id="id1204">
<name>
mem_access_fail_63</name>
<urgent/>
</location>
<init ref="id384"/>
<transition>
<source ref="id387"/>
<target ref="id388"/>
<label kind="synchronisation">
m_peq$notify$ctrl?
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id388"/>
<target ref="id390"/>
<label kind="guard">
intMem[phase] == BEGIN_REQ
</label>
<label kind="comments">
Guard:
nodeID: 9548, file: ahb_simple_mem.cpp, line: 25</label>
</transition>
<transition>
<source ref="id390"/>
<target ref="id391"/>
<label kind="guard">
addr_is_valid_int(phase)
</label>
<label kind="assignment">
intMem[phase] = END_REQ</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 9570, file: ahb_simple_mem.cpp, line: 26</label>
</transition>
<transition>
<source ref="id388"/>
<target ref="id392"/>
<label kind="guard">
!(intMem[phase] == BEGIN_REQ)
</label>
<label kind="comments">
Guard:
nodeID: 9548, file: ahb_simple_mem.cpp, line: 25</label>
</transition>
<transition>
<source ref="id384"/>
<target ref="id385"/>
<label kind="synchronisation">
nb_transport_fw$ctrl?
</label>
<label kind="assignment">
tran = nb_transport_fw$param$tran,
phase = nb_transport_fw$param$phase,
t = nb_transport_fw$param$t</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id385"/>
<target ref="id1060"/>
<label kind="guard">
addr_is_valid_int(t)
</label>
<label kind="assignment">
m_peq$peq_element$param$delay = intMem[t]</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id1060"/>
<target ref="id1062"/>
<label kind="assignment">
m_peq$peq_element$param$trans = tran,
m_peq$peq_element$param$phase = phase</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id1062"/>
<target ref="id387"/>
<label kind="synchronisation">
m_peq$notify$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id391"/>
<target ref="id1063"/>
<label kind="assignment">
nb_transport_fw$return = TLM_UPDATED</label>
<label kind="comments">
Update:
nodeID: 9582, file: ahb_simple_mem.cpp, line: 27</label>
</transition>
<transition>
<source ref="id1063"/>
<target ref="id384"/>
<label kind="synchronisation">
nb_transport_fw$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id392"/>
<target ref="id1064"/>
<label kind="assignment">
nb_transport_fw$return = TLM_ACCEPTED</label>
<label kind="comments">
Update:
nodeID: 9596, file: ahb_simple_mem.cpp, line: 29</label>
</transition>
<transition>
<source ref="id1064"/>
<target ref="id384"/>
<label kind="synchronisation">
nb_transport_fw$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id390"/>
<target ref="id1203"/>
<label kind="guard">
!(addr_is_valid_int(phase))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id385"/>
<target ref="id1204"/>
<label kind="guard">
!(addr_is_valid_int(t))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
</template>
<template>
<name>
ahb_simple_mem$peq_cb</name>
<parameter>
unsigned_int &amp;txn_address, unsigned_int &amp;counter, int_addr_ptr &amp;peq_cb$param$phase, chan &amp;peq_cb$ctrl, data_addr_ptr &amp;peq_cb$param$tran, bool &amp;m_data_pending, data_addr_ptr &amp;current_trans, unsigned_int &amp;txn_burst_len</parameter>
<declaration>
data_addr_ptr tran = NULL;
int_addr_ptr phase = NULL;
int_addr_ptr type = NULL;
unsigned_int_addr_ptr size = NULL;
</declaration>
<location id="id393">
<name>
init_location</name>
</location>
<location id="id397">
<urgent/>
</location>
<location id="id399">
<urgent/>
</location>
<location id="id400">
<urgent/>
</location>
<location id="id401">
<urgent/>
</location>
<location id="id402">
<urgent/>
</location>
<location id="id404">
<urgent/>
</location>
<location id="id405">
<urgent/>
</location>
<location id="id406">
<urgent/>
</location>
<location id="id403">
<urgent/>
</location>
<location id="id409">
<urgent/>
</location>
<location id="id411">
<urgent/>
</location>
<location id="id413">
<urgent/>
</location>
<location id="id395">
<urgent/>
</location>
<location id="id1228">
<name>
mem_access_fail_87</name>
<urgent/>
</location>
<location id="id1229">
<name>
mem_access_fail_88</name>
<urgent/>
</location>
<location id="id1230">
<name>
mem_access_fail_89</name>
<urgent/>
</location>
<location id="id1231">
<name>
mem_access_fail_90</name>
<urgent/>
</location>
<init ref="id393"/>
<transition>
<source ref="id397"/>
<target ref="id399"/>
<label kind="guard">
intMem[phase] == BEGIN_REQ
</label>
<label kind="comments">
Guard:
nodeID: 9725, file: ahb_simple_mem.cpp, line: 40</label>
</transition>
<transition>
<source ref="id399"/>
<target ref="id400"/>
<label kind="assignment">
current_trans = tran</label>
<label kind="comments">
Update:
nodeID: 9811, file: ahb_simple_mem.cpp, line: 43</label>
</transition>
<transition>
<source ref="id400"/>
<target ref="id401"/>
<label kind="guard">
addr_is_valid_data(current_trans)
</label>
<label kind="assignment">
type = dataMem[current_trans].trans_type</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 9833, file: ahb_simple_mem.cpp, line: 44</label>
</transition>
<transition>
<source ref="id401"/>
<target ref="id402"/>
<label kind="guard">
addr_is_valid_data(current_trans)
</label>
<label kind="assignment">
size = dataMem[current_trans].burst_size</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 9855, file: ahb_simple_mem.cpp, line: 45</label>
</transition>
<transition>
<source ref="id402"/>
<target ref="id404"/>
<label kind="guard">
intMem[type] == 50
</label>
<label kind="comments">
Guard:
nodeID: 9881, file: ahb_simple_mem.cpp, line: 47</label>
</transition>
<transition>
<source ref="id404"/>
<target ref="id405"/>
<label kind="guard">
addr_is_valid_data(current_trans)
</label>
<label kind="assignment">
txn_address = dataMem[current_trans].address</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 9902, file: ahb_simple_mem.cpp, line: 49</label>
</transition>
<transition>
<source ref="id405"/>
<target ref="id406"/>
<label kind="guard">
addr_is_valid_data(current_trans) &amp;&amp; 
addr_is_valid_unsigned_int(size)
</label>
<label kind="assignment">
txn_burst_len = dataMem[current_trans].data_length / unsigned_intMem[size]</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 9924, file: ahb_simple_mem.cpp, line: 50</label>
</transition>
<transition>
<source ref="id406"/>
<target ref="id403"/>
<label kind="assignment">
counter = 0</label>
<label kind="comments">
Update:
nodeID: 9962, file: ahb_simple_mem.cpp, line: 51</label>
</transition>
<transition>
<source ref="id402"/>
<target ref="id403"/>
<label kind="guard">
!(intMem[type] == 50)
</label>
<label kind="comments">
Guard:
nodeID: 9881, file: ahb_simple_mem.cpp, line: 47</label>
</transition>
<transition>
<source ref="id403"/>
<target ref="id409"/>
<label kind="guard">
dataMem[current_trans].command == TLM_READ_COMMAND
</label>
<label kind="comments">
Guard:
nodeID: 9984, file: ahb_simple_mem.cpp, line: 53</label>
</transition>
<transition>
<source ref="id409"/>
<target ref="id395"/>
<label kind="assignment">
m_data_pending = true</label>
<label kind="comments">
Update:
nodeID: 10006, file: ahb_simple_mem.cpp, line: 54</label>
</transition>
<transition>
<source ref="id403"/>
<target ref="id395"/>
<label kind="guard">
!(dataMem[current_trans].command == TLM_READ_COMMAND)
</label>
<label kind="comments">
Guard:
nodeID: 9984, file: ahb_simple_mem.cpp, line: 53</label>
</transition>
<transition>
<source ref="id397"/>
<target ref="id411"/>
<label kind="guard">
!(intMem[phase] == BEGIN_REQ)
</label>
<label kind="comments">
Guard:
nodeID: 9725, file: ahb_simple_mem.cpp, line: 40</label>
</transition>
<transition>
<source ref="id411"/>
<target ref="id413"/>
<label kind="guard">
intMem[phase] == 42
</label>
<label kind="comments">
Guard:
nodeID: 10026, file: ahb_simple_mem.cpp, line: 57</label>
</transition>
<transition>
<source ref="id413"/>
<target ref="id395"/>
<label kind="assignment">
m_data_pending = true</label>
<label kind="comments">
Update:
nodeID: 10110, file: ahb_simple_mem.cpp, line: 59</label>
</transition>
<transition>
<source ref="id411"/>
<target ref="id395"/>
<label kind="guard">
!(intMem[phase] == 42)
</label>
<label kind="comments">
Guard:
nodeID: 10026, file: ahb_simple_mem.cpp, line: 57</label>
</transition>
<transition>
<source ref="id395"/>
<target ref="id393"/>
<label kind="synchronisation">
peq_cb$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id393"/>
<target ref="id397"/>
<label kind="synchronisation">
peq_cb$ctrl?
</label>
<label kind="assignment">
tran = peq_cb$param$tran,
phase = peq_cb$param$phase,
type = NULL,
size = NULL</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id400"/>
<target ref="id1228"/>
<label kind="guard">
!(addr_is_valid_data(current_trans))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id401"/>
<target ref="id1229"/>
<label kind="guard">
!(addr_is_valid_data(current_trans))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id404"/>
<target ref="id1230"/>
<label kind="guard">
!(addr_is_valid_data(current_trans))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id405"/>
<target ref="id1231"/>
<label kind="guard">
!(addr_is_valid_data(current_trans) &amp;&amp; 
addr_is_valid_unsigned_int(size))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
</template>
<template>
<name>
ahb_simple_mem$readData</name>
<parameter>
unsigned_int &amp;txn_address, unsigned_int &amp;counter, chan &amp;readData$ctrl, chan &amp;slave_socket$nb_transport_bw$ctrl, data_addr_ptr &amp;slave_socket$nb_transport_bw$param$tran, int_addr_ptr &amp;slave_socket$nb_transport_bw$param$t, tlm_sync_enum &amp;slave_socket$nb_transport_bw$return, bool &amp;m_data_pending, data_addr_ptr &amp;current_trans, unsigned_int &amp;baseAddr, unsigned_int_addr_ptr &amp;readData$param$burst_size, unsigned_int_addr_ptr &amp;MEM, int_addr_ptr &amp;slave_socket$nb_transport_bw$param$phase</parameter>
<declaration>
unsigned_int_addr_ptr burst_size = NULL;
unsigned_int_addr_ptr data_ptr = NULL;
int t1;
int_addr_ptr ph = NULL;
tlm_sync_enum retval;
int_addr_ptr delay = NULL;
</declaration>
<location id="id415">
<name>
init_location</name>
</location>
<location id="id416">
<urgent/>
</location>
<location id="id418">
<urgent/>
</location>
<location id="id419">
<urgent/>
</location>
<location id="id420">
<urgent/>
</location>
<location id="id421">
<urgent/>
</location>
<location id="id422">
<urgent/>
</location>
<location id="id424">
<urgent/>
</location>
<location id="id425">
<urgent/>
</location>
<location id="id427">
</location>
<location id="id417">
<urgent/>
</location>
<location id="id915">
<urgent/>
</location>
<location id="id1144">
<name>
mem_access_fail_3</name>
<urgent/>
</location>
<location id="id1145">
<name>
mem_access_fail_4</name>
<urgent/>
</location>
<location id="id1146">
<name>
mem_access_fail_5</name>
<urgent/>
</location>
<location id="id1147">
<name>
mem_access_fail_6</name>
<urgent/>
</location>
<location id="id1148">
<name>
mem_access_fail_7</name>
<urgent/>
</location>
<init ref="id415"/>
<transition>
<source ref="id416"/>
<target ref="id418"/>
<label kind="guard">
addr_is_valid_data(current_trans)
</label>
<label kind="assignment">
data_ptr = dataMem[current_trans].data_ptr</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 10246, file: ahb_simple_mem.cpp, line: 72</label>
</transition>
<transition>
<source ref="id418"/>
<target ref="id419"/>
<label kind="guard">
addr_is_valid_unsigned_int(burst_size)
</label>
<label kind="assignment">
t1 = (txn_address - baseAddr) + (unsigned_intMem[burst_size] - 1)</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 10294, file: ahb_simple_mem.cpp, line: 75</label>
</transition>
<transition>
<source ref="id419"/>
<target ref="id420"/>
<label kind="assignment">
t1 = t1 % 3</label>
<label kind="comments">
Update:
nodeID: 10348, file: ahb_simple_mem.cpp, line: 76</label>
</transition>
<transition>
<source ref="id420"/>
<target ref="id421"/>
<label kind="guard">
addr_is_valid_unsigned_int(MEM) &amp;&amp; 
addr_is_valid_unsigned_int(MEM + t1) &amp;&amp; 
is_arr_elem_unsigned_int(MEM, t1) &amp;&amp; 
addr_is_valid_unsigned_int(data_ptr)
</label>
<label kind="assignment">
unsigned_intMem[data_ptr] = unsigned_intMem[MEM + t1]</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 10378, file: ahb_simple_mem.cpp, line: 77</label>
</transition>
<transition>
<source ref="id421"/>
<target ref="id422"/>
<label kind="guard">
addr_is_valid_data(current_trans)
</label>
<label kind="assignment">
dataMem[current_trans].data_ptr = data_ptr</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 10502, file: ahb_simple_mem.cpp, line: 80</label>
</transition>
<transition>
<source ref="id422"/>
<target ref="id424"/>
<label kind="assignment">
ph = allocate_static_and_init_int(BEGIN_RESP),
delay = allocate_static_and_init_int(0)</label>
<label kind="comments">
Update:
nodeID: 10520, file: ahb_simple_mem.cpp, line: 82,
nodeID: 10548, file: ahb_simple_mem.cpp, line: 83</label>
</transition>
<transition>
<source ref="id424"/>
<target ref="id425"/>
<label kind="guard">
addr_is_valid_data(current_trans)
</label>
<label kind="assignment">
dataMem[current_trans].response_status = TLM_OK_RESPONSE</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 10654, file: ahb_simple_mem.cpp, line: 85</label>
</transition>
<transition>
<source ref="id417"/>
<target ref="id415"/>
<label kind="synchronisation">
readData$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id415"/>
<target ref="id416"/>
<label kind="synchronisation">
readData$ctrl?
</label>
<label kind="assignment">
burst_size = readData$param$burst_size</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id425"/>
<target ref="id915"/>
<label kind="assignment">
slave_socket$nb_transport_bw$param$tran = current_trans,
slave_socket$nb_transport_bw$param$phase = ph,
slave_socket$nb_transport_bw$param$t = delay</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id915"/>
<target ref="id427"/>
<label kind="synchronisation">
slave_socket$nb_transport_bw$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id427"/>
<target ref="id417"/>
<label kind="synchronisation">
slave_socket$nb_transport_bw$ctrl?
</label>
<label kind="assignment">
slave_socket$nb_transport_bw$param$tran = NULL,
slave_socket$nb_transport_bw$param$phase = NULL,
slave_socket$nb_transport_bw$param$t = NULL,
retval = slave_socket$nb_transport_bw$return,
m_data_pending = false,
counter++,
empty_stack_int(delay),
empty_stack_int(ph)</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id416"/>
<target ref="id1144"/>
<label kind="guard">
!(addr_is_valid_data(current_trans))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id418"/>
<target ref="id1145"/>
<label kind="guard">
!(addr_is_valid_unsigned_int(burst_size))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id420"/>
<target ref="id1146"/>
<label kind="guard">
!(addr_is_valid_unsigned_int(MEM) &amp;&amp; 
addr_is_valid_unsigned_int(MEM + t1) &amp;&amp; 
is_arr_elem_unsigned_int(MEM, t1) &amp;&amp; 
addr_is_valid_unsigned_int(data_ptr))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id421"/>
<target ref="id1147"/>
<label kind="guard">
!(addr_is_valid_data(current_trans))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id424"/>
<target ref="id1148"/>
<label kind="guard">
!(addr_is_valid_data(current_trans))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
</template>
<template>
<name>
ahb_simple_mem$responseProcess</name>
<parameter>
chan &amp;writeData$ctrl, unsigned_int &amp;txn_address, unsigned_int_addr_ptr &amp;writeData$param$burst_size, unsigned_int &amp;counter, chan &amp;readData$ctrl, chan &amp;responseProcess$ctrl, bool &amp;m_data_pending, data_addr_ptr &amp;current_trans, unsigned_int &amp;txn_burst_len, unsigned_int_addr_ptr &amp;readData$param$burst_size</parameter>
<declaration>
unsigned_int cmd;
unsigned_int_addr_ptr burst_size = NULL;
</declaration>
<location id="id431">
<name>
init_location</name>
</location>
<location id="id432">
<urgent/>
</location>
<location id="id435">
<urgent/>
</location>
<location id="id436">
<urgent/>
</location>
<location id="id437">
<urgent/>
</location>
<location id="id439">
<urgent/>
</location>
<location id="id441">
<urgent/>
</location>
<location id="id443">
<urgent/>
</location>
<location id="id444">
<urgent/>
</location>
<location id="id445">
</location>
<location id="id447">
<urgent/>
</location>
<location id="id449">
<urgent/>
</location>
<location id="id451">
<urgent/>
</location>
<location id="id453">
<urgent/>
</location>
<location id="id455">
<urgent/>
</location>
<location id="id457">
<urgent/>
</location>
<location id="id458">
<urgent/>
</location>
<location id="id459">
</location>
<location id="id461">
<urgent/>
</location>
<location id="id463">
<urgent/>
</location>
<location id="id433">
<urgent/>
</location>
<location id="id1132">
<urgent/>
</location>
<location id="id1134">
<urgent/>
</location>
<location id="id1224">
<name>
mem_access_fail_83</name>
<urgent/>
</location>
<location id="id1225">
<name>
mem_access_fail_84</name>
<urgent/>
</location>
<location id="id1226">
<name>
mem_access_fail_85</name>
<urgent/>
</location>
<location id="id1227">
<name>
mem_access_fail_86</name>
<urgent/>
</location>
<init ref="id431"/>
<transition>
<source ref="id431"/>
<target ref="id432"/>
<label kind="synchronisation">
responseProcess$ctrl?
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id432"/>
<target ref="id435"/>
<label kind="guard">
current_trans != NULL
</label>
<label kind="comments">
Guard:
nodeID: 10791, file: ahb_simple_mem.cpp, line: 100</label>
</transition>
<transition>
<source ref="id435"/>
<target ref="id436"/>
<label kind="guard">
addr_is_valid_data(current_trans)
</label>
<label kind="assignment">
cmd = dataMem[current_trans].command</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 10811, file: ahb_simple_mem.cpp, line: 102</label>
</transition>
<transition>
<source ref="id436"/>
<target ref="id437"/>
<label kind="guard">
addr_is_valid_data(current_trans)
</label>
<label kind="assignment">
burst_size = dataMem[current_trans].burst_size</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 10839, file: ahb_simple_mem.cpp, line: 103</label>
</transition>
<transition>
<source ref="id437"/>
<target ref="id439"/>
<label kind="guard">
cmd == TLM_WRITE_COMMAND
</label>
<label kind="comments">
Guard:
nodeID: 10871, file: ahb_simple_mem.cpp, line: 105</label>
</transition>
<transition>
<source ref="id439"/>
<target ref="id441"/>
<label kind="guard">
m_data_pending == true
</label>
<label kind="comments">
Guard:
nodeID: 10893, file: ahb_simple_mem.cpp, line: 107</label>
</transition>
<transition>
<source ref="id441"/>
<target ref="id443"/>
<label kind="guard">
txn_burst_len != counter
</label>
<label kind="comments">
Guard:
nodeID: 10913, file: ahb_simple_mem.cpp, line: 109</label>
</transition>
<transition>
<source ref="id444"/>
<target ref="id433"/>
<label kind="guard">
addr_is_valid_unsigned_int(burst_size)
</label>
<label kind="assignment">
txn_address += unsigned_intMem[burst_size]</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 10951, file: ahb_simple_mem.cpp, line: 112</label>
</transition>
<transition>
<source ref="id441"/>
<target ref="id447"/>
<label kind="guard">
!(txn_burst_len != counter)
</label>
<label kind="comments">
Guard:
nodeID: 10913, file: ahb_simple_mem.cpp, line: 109</label>
</transition>
<transition>
<source ref="id447"/>
<target ref="id449"/>
<label kind="guard">
txn_burst_len == counter
</label>
<label kind="comments">
Guard:
nodeID: 10975, file: ahb_simple_mem.cpp, line: 114</label>
</transition>
<transition>
<source ref="id449"/>
<target ref="id433"/>
<label kind="assignment">
counter = 0</label>
<label kind="comments">
Update:
nodeID: 10995, file: ahb_simple_mem.cpp, line: 115</label>
</transition>
<transition>
<source ref="id447"/>
<target ref="id433"/>
<label kind="guard">
!(txn_burst_len == counter)
</label>
<label kind="comments">
Guard:
nodeID: 10975, file: ahb_simple_mem.cpp, line: 114</label>
</transition>
<transition>
<source ref="id439"/>
<target ref="id433"/>
<label kind="guard">
!(m_data_pending == true)
</label>
<label kind="comments">
Guard:
nodeID: 10893, file: ahb_simple_mem.cpp, line: 107</label>
</transition>
<transition>
<source ref="id437"/>
<target ref="id451"/>
<label kind="guard">
!(cmd == TLM_WRITE_COMMAND)
</label>
<label kind="comments">
Guard:
nodeID: 10871, file: ahb_simple_mem.cpp, line: 105</label>
</transition>
<transition>
<source ref="id451"/>
<target ref="id453"/>
<label kind="guard">
cmd == TLM_READ_COMMAND
</label>
<label kind="comments">
Guard:
nodeID: 11015, file: ahb_simple_mem.cpp, line: 118</label>
</transition>
<transition>
<source ref="id453"/>
<target ref="id455"/>
<label kind="guard">
m_data_pending == true
</label>
<label kind="comments">
Guard:
nodeID: 11037, file: ahb_simple_mem.cpp, line: 120</label>
</transition>
<transition>
<source ref="id455"/>
<target ref="id457"/>
<label kind="guard">
txn_burst_len != counter
</label>
<label kind="comments">
Guard:
nodeID: 11057, file: ahb_simple_mem.cpp, line: 122</label>
</transition>
<transition>
<source ref="id458"/>
<target ref="id433"/>
<label kind="guard">
addr_is_valid_unsigned_int(burst_size)
</label>
<label kind="assignment">
txn_address += unsigned_intMem[burst_size]</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 11095, file: ahb_simple_mem.cpp, line: 125</label>
</transition>
<transition>
<source ref="id455"/>
<target ref="id461"/>
<label kind="guard">
!(txn_burst_len != counter)
</label>
<label kind="comments">
Guard:
nodeID: 11057, file: ahb_simple_mem.cpp, line: 122</label>
</transition>
<transition>
<source ref="id461"/>
<target ref="id463"/>
<label kind="guard">
txn_burst_len == counter
</label>
<label kind="comments">
Guard:
nodeID: 11119, file: ahb_simple_mem.cpp, line: 127</label>
</transition>
<transition>
<source ref="id463"/>
<target ref="id433"/>
<label kind="assignment">
counter = 0</label>
<label kind="comments">
Update:
nodeID: 11139, file: ahb_simple_mem.cpp, line: 128</label>
</transition>
<transition>
<source ref="id461"/>
<target ref="id433"/>
<label kind="guard">
!(txn_burst_len == counter)
</label>
<label kind="comments">
Guard:
nodeID: 11119, file: ahb_simple_mem.cpp, line: 127</label>
</transition>
<transition>
<source ref="id453"/>
<target ref="id433"/>
<label kind="guard">
!(m_data_pending == true)
</label>
<label kind="comments">
Guard:
nodeID: 11037, file: ahb_simple_mem.cpp, line: 120</label>
</transition>
<transition>
<source ref="id451"/>
<target ref="id433"/>
<label kind="guard">
!(cmd == TLM_READ_COMMAND)
</label>
<label kind="comments">
Guard:
nodeID: 11015, file: ahb_simple_mem.cpp, line: 118</label>
</transition>
<transition>
<source ref="id432"/>
<target ref="id433"/>
<label kind="guard">
!(current_trans != NULL)
</label>
<label kind="comments">
Guard:
nodeID: 10791, file: ahb_simple_mem.cpp, line: 100</label>
</transition>
<transition>
<source ref="id433"/>
<target ref="id431"/>
<label kind="synchronisation">
responseProcess$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id443"/>
<target ref="id1132"/>
<label kind="assignment">
writeData$param$burst_size = burst_size</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id1132"/>
<target ref="id445"/>
<label kind="synchronisation">
writeData$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id445"/>
<target ref="id444"/>
<label kind="synchronisation">
writeData$ctrl?
</label>
<label kind="assignment">
writeData$param$burst_size = NULL</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id457"/>
<target ref="id1134"/>
<label kind="assignment">
readData$param$burst_size = burst_size</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id1134"/>
<target ref="id459"/>
<label kind="synchronisation">
readData$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id459"/>
<target ref="id458"/>
<label kind="synchronisation">
readData$ctrl?
</label>
<label kind="assignment">
readData$param$burst_size = NULL</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id435"/>
<target ref="id1224"/>
<label kind="guard">
!(addr_is_valid_data(current_trans))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id436"/>
<target ref="id1225"/>
<label kind="guard">
!(addr_is_valid_data(current_trans))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id444"/>
<target ref="id1226"/>
<label kind="guard">
!(addr_is_valid_unsigned_int(burst_size))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id458"/>
<target ref="id1227"/>
<label kind="guard">
!(addr_is_valid_unsigned_int(burst_size))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
</template>
<template>
<name>
ahb_simple_mem$thread0$sensitiveTemp</name>
<parameter>
broadcast chan &amp;sensitive, broadcast chan &amp;clk</parameter>
<declaration>
</declaration>
<location id="id489">
</location>
<location id="id490">
<committed/>
</location>
<init ref="id489"/>
<transition>
<source ref="id490"/>
<target ref="id489"/>
<label kind="synchronisation">
sensitive!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id489"/>
<target ref="id490"/>
<label kind="synchronisation">
clk?
</label>
<label kind="comments">
</label>
</transition>
</template>
<template>
<name>
ahb_simple_mem$writeData</name>
<parameter>
chan &amp;writeData$ctrl, unsigned_int &amp;txn_address, unsigned_int_addr_ptr &amp;writeData$param$burst_size, unsigned_int &amp;counter, chan &amp;slave_socket$nb_transport_bw$ctrl, data_addr_ptr &amp;slave_socket$nb_transport_bw$param$tran, int_addr_ptr &amp;slave_socket$nb_transport_bw$param$t, tlm_sync_enum &amp;slave_socket$nb_transport_bw$return, bool &amp;m_data_pending, data_addr_ptr &amp;current_trans, unsigned_int &amp;baseAddr, unsigned_int_addr_ptr &amp;MEM, int_addr_ptr &amp;slave_socket$nb_transport_bw$param$phase</parameter>
<declaration>
unsigned_int_addr_ptr burst_size = NULL;
unsigned_int_addr_ptr data_ptr = NULL;
int t1;
int_addr_ptr ph = NULL;
tlm_sync_enum retval;
int_addr_ptr delay = NULL;
</declaration>
<location id="id468">
<name>
init_location</name>
</location>
<location id="id469">
<urgent/>
</location>
<location id="id471">
<urgent/>
</location>
<location id="id472">
<urgent/>
</location>
<location id="id473">
<urgent/>
</location>
<location id="id474">
<urgent/>
</location>
<location id="id476">
<urgent/>
</location>
<location id="id477">
<urgent/>
</location>
<location id="id479">
</location>
<location id="id470">
<urgent/>
</location>
<location id="id1083">
<urgent/>
</location>
<location id="id1207">
<name>
mem_access_fail_66</name>
<urgent/>
</location>
<location id="id1208">
<name>
mem_access_fail_67</name>
<urgent/>
</location>
<location id="id1209">
<name>
mem_access_fail_68</name>
<urgent/>
</location>
<location id="id1210">
<name>
mem_access_fail_69</name>
<urgent/>
</location>
<init ref="id468"/>
<transition>
<source ref="id469"/>
<target ref="id471"/>
<label kind="guard">
addr_is_valid_data(current_trans)
</label>
<label kind="assignment">
data_ptr = dataMem[current_trans].data_ptr</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 11316, file: ahb_simple_mem.cpp, line: 151</label>
</transition>
<transition>
<source ref="id471"/>
<target ref="id472"/>
<label kind="guard">
addr_is_valid_unsigned_int(burst_size)
</label>
<label kind="assignment">
t1 = (txn_address - baseAddr) + (unsigned_intMem[burst_size] - 1)</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 11364, file: ahb_simple_mem.cpp, line: 154</label>
</transition>
<transition>
<source ref="id472"/>
<target ref="id473"/>
<label kind="assignment">
t1 = t1 % 3</label>
<label kind="comments">
Update:
nodeID: 11418, file: ahb_simple_mem.cpp, line: 155</label>
</transition>
<transition>
<source ref="id473"/>
<target ref="id474"/>
<label kind="guard">
addr_is_valid_unsigned_int(data_ptr) &amp;&amp; 
addr_is_valid_unsigned_int(MEM) &amp;&amp; 
addr_is_valid_unsigned_int(MEM + t1) &amp;&amp; 
is_arr_elem_unsigned_int(MEM, t1) &amp;&amp; 
addr_is_valid_unsigned_int(data_ptr + t1) &amp;&amp; 
is_arr_elem_unsigned_int(data_ptr, t1)
</label>
<label kind="assignment">
unsigned_intMem[MEM + t1] = unsigned_intMem[data_ptr + t1]</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 11454, file: ahb_simple_mem.cpp, line: 156</label>
</transition>
<transition>
<source ref="id474"/>
<target ref="id476"/>
<label kind="assignment">
ph = allocate_static_and_init_int(43),
delay = allocate_static_and_init_int(1)</label>
<label kind="comments">
Update:
nodeID: 11574, file: ahb_simple_mem.cpp, line: 159,
nodeID: 11600, file: ahb_simple_mem.cpp, line: 160</label>
</transition>
<transition>
<source ref="id476"/>
<target ref="id477"/>
<label kind="guard">
addr_is_valid_data(current_trans)
</label>
<label kind="assignment">
dataMem[current_trans].response_status = TLM_OK_RESPONSE</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 11708, file: ahb_simple_mem.cpp, line: 164</label>
</transition>
<transition>
<source ref="id470"/>
<target ref="id468"/>
<label kind="synchronisation">
writeData$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id468"/>
<target ref="id469"/>
<label kind="synchronisation">
writeData$ctrl?
</label>
<label kind="assignment">
burst_size = writeData$param$burst_size</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id477"/>
<target ref="id1083"/>
<label kind="assignment">
slave_socket$nb_transport_bw$param$tran = current_trans,
slave_socket$nb_transport_bw$param$phase = ph,
slave_socket$nb_transport_bw$param$t = delay</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id1083"/>
<target ref="id479"/>
<label kind="synchronisation">
slave_socket$nb_transport_bw$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id479"/>
<target ref="id470"/>
<label kind="synchronisation">
slave_socket$nb_transport_bw$ctrl?
</label>
<label kind="assignment">
slave_socket$nb_transport_bw$param$tran = NULL,
slave_socket$nb_transport_bw$param$phase = NULL,
slave_socket$nb_transport_bw$param$t = NULL,
retval = slave_socket$nb_transport_bw$return,
m_data_pending = false,
counter++,
empty_stack_int(delay),
empty_stack_int(ph)</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id469"/>
<target ref="id1207"/>
<label kind="guard">
!(addr_is_valid_data(current_trans))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id471"/>
<target ref="id1208"/>
<label kind="guard">
!(addr_is_valid_unsigned_int(burst_size))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id473"/>
<target ref="id1209"/>
<label kind="guard">
!(addr_is_valid_unsigned_int(data_ptr) &amp;&amp; 
addr_is_valid_unsigned_int(MEM) &amp;&amp; 
addr_is_valid_unsigned_int(MEM + t1) &amp;&amp; 
is_arr_elem_unsigned_int(MEM, t1) &amp;&amp; 
addr_is_valid_unsigned_int(data_ptr + t1) &amp;&amp; 
is_arr_elem_unsigned_int(data_ptr, t1))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id476"/>
<target ref="id1210"/>
<label kind="guard">
!(addr_is_valid_data(current_trans))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
</template>
<template>
<name>
peq_element$data</name>
<parameter>
data_addr_ptr &amp;peq_cb$param$tran, data_addr_ptr &amp;peq_element$param$trans, chan &amp;peq_fetch$ctrl, int_addr_ptr &amp;peq_cb$param$phase, int_addr_ptr &amp;peq_element$param$phase, int &amp;peq_element$param$delay, bool &amp;peqInUse, chan &amp;peq_element$ctrl</parameter>
<declaration>
int_addr_ptr phase = NULL;
int delay;
clock c;
data_addr_ptr payload = NULL;
</declaration>
<location id="id882">
<committed/>
</location>
<location id="id883">
<committed/>
</location>
<location id="id884">
<committed/>
</location>
<location id="id881">
<name>
init_location</name>
</location>
<location id="id885">
<label kind="invariant">
c &lt;= delay
</label>
</location>
<location id="id886">
<committed/>
</location>
<location id="id887">
<committed/>
</location>
<location id="id888">
<urgent/>
</location>
<location id="id1112">
<committed/>
</location>
<location id="id1113">
<committed/>
</location>
<location id="id1114">
<committed/>
</location>
<location id="id1115">
<committed/>
</location>
<location id="id1116">
<committed/>
</location>
<location id="id1117">
<committed/>
</location>
<location id="id1120">
<urgent/>
</location>
<location id="id1218">
<name>
mem_access_fail_77</name>
<urgent/>
</location>
<location id="id1219">
<name>
mem_access_fail_78</name>
<urgent/>
</location>
<init ref="id881"/>
<transition>
<source ref="id881"/>
<target ref="id882"/>
<label kind="synchronisation">
peq_element$ctrl?
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id882"/>
<target ref="id883"/>
<label kind="guard">
payload != NULL
</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id883"/>
<target ref="id884"/>
<label kind="guard">
phase != NULL
</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id886"/>
<target ref="id885"/>
<label kind="guard">
c &lt; delay
</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id886"/>
<target ref="id887"/>
<label kind="guard">
c == delay
</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id885"/>
<target ref="id887"/>
<label kind="guard">
delay != 0 &amp;&amp; 
c == delay
</label>
<label kind="synchronisation">
advancetime!
</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id887"/>
<target ref="id888"/>
<label kind="assignment">
readyprocs++</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id888"/>
<target ref="id1120"/>
<label kind="synchronisation">
activate?
</label>
<label kind="assignment">
peq_cb$param$tran = payload,
peq_cb$param$phase = phase,
peqInUse = false</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id882"/>
<target ref="id1112"/>
<label kind="guard">
payload == NULL
</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id1112"/>
<target ref="id883"/>
<label kind="assignment">
payload = allocate_dynamic_data()</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id883"/>
<target ref="id1113"/>
<label kind="guard">
phase == NULL
</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id1113"/>
<target ref="id884"/>
<label kind="assignment">
phase = allocate_dynamic_int()</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id884"/>
<target ref="id1114"/>
<label kind="guard">
addr_is_valid_data(payload) &amp;&amp; 
addr_is_valid_data(peq_element$param$trans)
</label>
<label kind="assignment">
dataMem[payload] = dataMem[peq_element$param$trans]</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id1114"/>
<target ref="id1115"/>
<label kind="guard">
addr_is_valid_int(peq_element$param$phase) &amp;&amp; 
addr_is_valid_int(phase)
</label>
<label kind="assignment">
intMem[phase] = intMem[peq_element$param$phase]</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id1115"/>
<target ref="id1116"/>
<label kind="assignment">
delay = peq_element$param$delay</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id1116"/>
<target ref="id1117"/>
<label kind="assignment">
peqInUse = true</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id1117"/>
<target ref="id885"/>
<label kind="assignment">
c = 0</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id885"/>
<target ref="id886"/>
<label kind="guard">
delay != 0
</label>
<label kind="synchronisation">
advancetime?
</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id885"/>
<target ref="id887"/>
<label kind="guard">
delay == 0
</label>
<label kind="synchronisation">
deltadelay?
</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id1120"/>
<target ref="id881"/>
<label kind="synchronisation">
peq_fetch$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id884"/>
<target ref="id1218"/>
<label kind="guard">
!(addr_is_valid_data(payload) &amp;&amp; 
addr_is_valid_data(peq_element$param$trans))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id1114"/>
<target ref="id1219"/>
<label kind="guard">
!(addr_is_valid_int(peq_element$param$phase) &amp;&amp; 
addr_is_valid_int(phase))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
</template>
<template>
<name>
peq_fetch$data</name>
<parameter>
chan &amp;peq_cb$ctrl, chan &amp;peq_fetch$ctrl</parameter>
<declaration>
</declaration>
<location id="id877">
<name>
init_location</name>
</location>
<location id="id878">
<urgent/>
</location>
<location id="id879">
<urgent/>
</location>
<location id="id1066">
<urgent/>
</location>
<init ref="id877"/>
<transition>
<source ref="id877"/>
<target ref="id878"/>
<label kind="synchronisation">
peq_fetch$ctrl?
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id878"/>
<target ref="id879"/>
<label kind="synchronisation">
peq_cb$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id879"/>
<target ref="id1066"/>
<label kind="synchronisation">
peq_cb$ctrl?
</label>
<label kind="assignment">
readyprocs--</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id1066"/>
<target ref="id877"/>
<label kind="synchronisation">
deactivate!
</label>
<label kind="comments">
</label>
</transition>
</template>
<template>
<name>
peq_notify$data$4</name>
<parameter>
bool &amp;peqInUse[4], chan &amp;peq_notify$ctrl, chan &amp;peq_element$ctrl[4]</parameter>
<declaration>
int[-1, 3] index = -1;
int[-1, 4] i = 0;
int[-1, 3] getIndex(){
	for (i = 0; i &lt; 4; i++) {
		if (!peqInUse[i]) {
			return i;
		}
	}
	return -1;
}
</declaration>
<location id="id873">
</location>
<location id="id874">
<name>
invoked</name>
<urgent/>
</location>
<location id="id875">
<urgent/>
</location>
<location id="id876">
</location>
<location id="id1123">
<urgent/>
</location>
<location id="id1124">
<urgent/>
</location>
<init ref="id873"/>
<transition>
<source ref="id874"/>
<target ref="id875"/>
<label kind="guard">
index &gt;= 0
</label>
<label kind="synchronisation">
peq_element$ctrl[index]!
</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id873"/>
<target ref="id874"/>
<label kind="synchronisation">
peq_notify$ctrl?
</label>
<label kind="assignment">
index = getIndex()</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id875"/>
<target ref="id1123"/>
<label kind="assignment">
index = -1,
i = 0</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id1123"/>
<target ref="id873"/>
<label kind="synchronisation">
peq_notify$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id874"/>
<target ref="id1124"/>
<label kind="guard">
index &lt; 0 &amp;&amp; 
!PEQ_ERR_OUT_OF_ELEMENTS
</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id1124"/>
<target ref="id876"/>
<label kind="assignment">
PEQ_ERR_OUT_OF_ELEMENTS = true</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1</label>
</transition>
</template>
<template>
<name>
sc_clock$run</name>
<parameter>
int &amp;period, chan &amp;edge$notify, chan &amp;change$notify, chan &amp;run$ctrl, int &amp;change$notify_t, broadcast chan &amp;timeoutevent$wait, chan &amp;timeoutevent$notify, int &amp;val, int &amp;edge$notify_t, int &amp;timeoutevent$notify_t</parameter>
<declaration>
int tmp;
</declaration>
<location id="id34">
<name>
init_location</name>
</location>
<location id="id37">
<committed/>
</location>
<location id="id38">
<committed/>
</location>
<location id="id39">
<urgent/>
</location>
<location id="id41">
<urgent/>
</location>
<location id="id42">
<committed/>
</location>
<location id="id43">
<committed/>
</location>
<location id="id44">
<urgent/>
</location>
<location id="id45">
</location>
<location id="id46">
<committed/>
</location>
<location id="id47">
<urgent/>
</location>
<location id="id36">
<urgent/>
</location>
<location id="id1088">
<committed/>
</location>
<location id="id1089">
<committed/>
</location>
<location id="id1090">
<urgent/>
</location>
<location id="id1091">
<committed/>
</location>
<location id="id1093">
<committed/>
</location>
<location id="id1094">
<committed/>
</location>
<init ref="id34"/>
<transition>
<source ref="id34"/>
<target ref="id37"/>
<label kind="synchronisation">
run$ctrl?
</label>
<label kind="assignment">
tmp = period / 2</label>
<label kind="comments">
Update:
nodeID: 150, file: sc_clock.cpp, line: 20</label>
</transition>
<transition>
<source ref="id39"/>
<target ref="id41"/>
<label kind="guard">
true
</label>
<label kind="comments">
Guard:
nodeID: 204, file: sc_clock.cpp, line: 23</label>
</transition>
<transition>
<source ref="id44"/>
<target ref="id42"/>
<label kind="synchronisation">
activate?
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id47"/>
<target ref="id39"/>
<label kind="assignment">
val = !val</label>
<label kind="comments">
Update:
nodeID: 264, file: sc_clock.cpp, line: 27</label>
</transition>
<transition>
<source ref="id39"/>
<target ref="id36"/>
<label kind="guard">
!(true)
</label>
<label kind="comments">
Guard:
nodeID: 204, file: sc_clock.cpp, line: 23</label>
</transition>
<transition>
<source ref="id36"/>
<target ref="id34"/>
<label kind="synchronisation">
run$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id37"/>
<target ref="id1088"/>
<label kind="assignment">
edge$notify_t = 0</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id1088"/>
<target ref="id38"/>
<label kind="synchronisation">
edge$notify!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id38"/>
<target ref="id1089"/>
<label kind="assignment">
change$notify_t = 0</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id1089"/>
<target ref="id39"/>
<label kind="synchronisation">
change$notify!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id41"/>
<target ref="id1090"/>
<label kind="assignment">
readyprocs--</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id1090"/>
<target ref="id43"/>
<label kind="synchronisation">
deactivate!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id43"/>
<target ref="id1091"/>
<label kind="assignment">
timeoutevent$notify_t = tmp</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id1091"/>
<target ref="id45"/>
<label kind="synchronisation">
timeoutevent$notify!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id45"/>
<target ref="id44"/>
<label kind="synchronisation">
timeoutevent$wait?
</label>
<label kind="assignment">
readyprocs++</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id42"/>
<target ref="id1093"/>
<label kind="assignment">
edge$notify_t = 0</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id1093"/>
<target ref="id46"/>
<label kind="synchronisation">
edge$notify!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id46"/>
<target ref="id1094"/>
<label kind="assignment">
change$notify_t = 0</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id1094"/>
<target ref="id47"/>
<label kind="synchronisation">
change$notify!
</label>
<label kind="comments">
</label>
</transition>
</template>
<template>
<name>
sc_clock$thread0$sensitiveTemp</name>
<parameter>
broadcast chan &amp;sensitive</parameter>
<declaration>
</declaration>
<location id="id67">
</location>
<location id="id68">
<committed/>
</location>
<init ref="id67"/>
<transition>
<source ref="id68"/>
<target ref="id67"/>
<label kind="synchronisation">
sensitive!
</label>
<label kind="comments">
</label>
</transition>
</template>
<template>
<name>
tlm2_master_to_ahb$b_transport</name>
<parameter>
uint64 &amp;current_Address, unsigned_int &amp;current_DataLength, tlmdata_addr_ptr &amp;b_transport$param$tran, data_addr_ptr &amp;current_trans, unsigned_int &amp;m_txn_count, broadcast chan &amp;b_transport_finished_ev$wait, int_addr_ptr &amp;b_transport$param$t, chan &amp;b_transport$ctrl, unsigned_int &amp;master_id, unsigned_int &amp;current_Command</parameter>
<declaration>
tlmdata_addr_ptr tran = NULL;
int_addr_ptr t = NULL;
unsigned_int cmd;
int addr;
unsigned_int_addr_ptr ptr = NULL;
unsigned_int len;
unsigned_int wid;
int_addr_ptr current_trans_type = NULL;
unsigned_int_addr_ptr current_burst_size = NULL;
</declaration>
<location id="id527">
<name>
init_location</name>
</location>
<location id="id528">
<urgent/>
</location>
<location id="id530">
<urgent/>
</location>
<location id="id531">
<urgent/>
</location>
<location id="id532">
<urgent/>
</location>
<location id="id533">
<urgent/>
</location>
<location id="id534">
<urgent/>
</location>
<location id="id536">
<urgent/>
</location>
<location id="id537">
<urgent/>
</location>
<location id="id539">
<urgent/>
</location>
<location id="id540">
<urgent/>
</location>
<location id="id538">
<urgent/>
</location>
<location id="id542">
<urgent/>
</location>
<location id="id547">
<urgent/>
</location>
<location id="id548">
<urgent/>
</location>
<location id="id549">
<urgent/>
</location>
<location id="id550">
<urgent/>
</location>
<location id="id551">
<urgent/>
</location>
<location id="id552">
<urgent/>
</location>
<location id="id553">
<urgent/>
</location>
<location id="id554">
<urgent/>
</location>
<location id="id555">
<urgent/>
</location>
<location id="id557">
</location>
<location id="id558">
<urgent/>
</location>
<location id="id562">
<urgent/>
</location>
<location id="id543">
<urgent/>
</location>
<location id="id568">
<urgent/>
</location>
<location id="id569">
<urgent/>
</location>
<location id="id570">
<urgent/>
</location>
<location id="id571">
<urgent/>
</location>
<location id="id572">
<urgent/>
</location>
<location id="id573">
<urgent/>
</location>
<location id="id574">
<urgent/>
</location>
<location id="id575">
<urgent/>
</location>
<location id="id576">
<urgent/>
</location>
<location id="id578">
</location>
<location id="id579">
<urgent/>
</location>
<location id="id583">
<urgent/>
</location>
<location id="id564">
<urgent/>
</location>
<location id="id529">
<urgent/>
</location>
<location id="id935">
<urgent/>
</location>
<location id="id936">
<urgent/>
</location>
<location id="id938">
<urgent/>
</location>
<location id="id941">
<urgent/>
</location>
<location id="id1150">
<name>
mem_access_fail_9</name>
<urgent/>
</location>
<location id="id1151">
<name>
mem_access_fail_10</name>
<urgent/>
</location>
<location id="id1152">
<name>
mem_access_fail_11</name>
<urgent/>
</location>
<location id="id1153">
<name>
mem_access_fail_12</name>
<urgent/>
</location>
<location id="id1154">
<name>
mem_access_fail_13</name>
<urgent/>
</location>
<location id="id1155">
<name>
mem_access_fail_14</name>
<urgent/>
</location>
<location id="id1156">
<name>
mem_access_fail_15</name>
<urgent/>
</location>
<location id="id1157">
<name>
mem_access_fail_16</name>
<urgent/>
</location>
<location id="id1158">
<name>
mem_access_fail_17</name>
<urgent/>
</location>
<location id="id1159">
<name>
mem_access_fail_18</name>
<urgent/>
</location>
<location id="id1160">
<name>
mem_access_fail_19</name>
<urgent/>
</location>
<location id="id1161">
<name>
mem_access_fail_20</name>
<urgent/>
</location>
<location id="id1162">
<name>
mem_access_fail_21</name>
<urgent/>
</location>
<location id="id1163">
<name>
mem_access_fail_22</name>
<urgent/>
</location>
<location id="id1164">
<name>
mem_access_fail_23</name>
<urgent/>
</location>
<location id="id1165">
<name>
mem_access_fail_24</name>
<urgent/>
</location>
<location id="id1166">
<name>
mem_access_fail_25</name>
<urgent/>
</location>
<location id="id1167">
<name>
mem_access_fail_26</name>
<urgent/>
</location>
<location id="id1168">
<name>
mem_access_fail_27</name>
<urgent/>
</location>
<location id="id1169">
<name>
mem_access_fail_28</name>
<urgent/>
</location>
<location id="id1170">
<name>
mem_access_fail_29</name>
<urgent/>
</location>
<location id="id1171">
<name>
mem_access_fail_30</name>
<urgent/>
</location>
<location id="id1172">
<name>
mem_access_fail_31</name>
<urgent/>
</location>
<location id="id1173">
<name>
mem_access_fail_32</name>
<urgent/>
</location>
<location id="id1174">
<name>
mem_access_fail_33</name>
<urgent/>
</location>
<location id="id1175">
<name>
mem_access_fail_34</name>
<urgent/>
</location>
<init ref="id527"/>
<transition>
<source ref="id528"/>
<target ref="id530"/>
<label kind="guard">
addr_is_valid_tlmdata(tran)
</label>
<label kind="assignment">
cmd = tlmdataMem[tran].command</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 13257, file: tlm2_master_to_ahb.cpp, line: 69</label>
</transition>
<transition>
<source ref="id530"/>
<target ref="id531"/>
<label kind="guard">
addr_is_valid_tlmdata(tran)
</label>
<label kind="assignment">
addr = tlmdataMem[tran].address</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 13285, file: tlm2_master_to_ahb.cpp, line: 70</label>
</transition>
<transition>
<source ref="id531"/>
<target ref="id532"/>
<label kind="guard">
addr_is_valid_tlmdata(tran)
</label>
<label kind="assignment">
ptr = tlmdataMem[tran].data_ptr</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 13313, file: tlm2_master_to_ahb.cpp, line: 71</label>
</transition>
<transition>
<source ref="id532"/>
<target ref="id533"/>
<label kind="guard">
addr_is_valid_tlmdata(tran)
</label>
<label kind="assignment">
len = tlmdataMem[tran].data_length</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 13345, file: tlm2_master_to_ahb.cpp, line: 72</label>
</transition>
<transition>
<source ref="id533"/>
<target ref="id534"/>
<label kind="guard">
addr_is_valid_tlmdata(tran)
</label>
<label kind="assignment">
wid = tlmdataMem[tran].streaming_width</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 13373, file: tlm2_master_to_ahb.cpp, line: 73</label>
</transition>
<transition>
<source ref="id534"/>
<target ref="id536"/>
<label kind="assignment">
current_trans_type = allocate_static_and_init_int(51),
current_burst_size = allocate_static_and_init_unsigned_int(1)</label>
<label kind="comments">
Update:
nodeID: 13401, file: tlm2_master_to_ahb.cpp, line: 74,
nodeID: 13425, file: tlm2_master_to_ahb.cpp, line: 75</label>
</transition>
<transition>
<source ref="id536"/>
<target ref="id537"/>
<label kind="guard">
addr_is_valid_tlmdata(tran)
</label>
<label kind="assignment">
tlmdataMem[tran].response_status = TLM_INCOMPLETE_RESPONSE</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 13453, file: tlm2_master_to_ahb.cpp, line: 77</label>
</transition>
<transition>
<source ref="id537"/>
<target ref="id539"/>
<label kind="guard">
wid &lt; len
</label>
<label kind="comments">
Guard:
nodeID: 13478, file: tlm2_master_to_ahb.cpp, line: 83</label>
</transition>
<transition>
<source ref="id539"/>
<target ref="id540"/>
<label kind="guard">
addr_is_valid_tlmdata(tran)
</label>
<label kind="assignment">
tlmdataMem[tran].response_status = TLM_BURST_ERROR_RESPONSE</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 13502, file: tlm2_master_to_ahb.cpp, line: 85</label>
</transition>
<transition>
<source ref="id537"/>
<target ref="id538"/>
<label kind="guard">
!(wid &lt; len)
</label>
<label kind="comments">
Guard:
nodeID: 13478, file: tlm2_master_to_ahb.cpp, line: 83</label>
</transition>
<transition>
<source ref="id538"/>
<target ref="id542"/>
<label kind="guard">
cmd == TLM_WRITE_COMMAND
</label>
<label kind="comments">
Guard:
nodeID: 13542, file: tlm2_master_to_ahb.cpp, line: 93</label>
</transition>
<transition>
<source ref="id542"/>
<target ref="id547"/>
<label kind="assignment">
current_Address = addr,
current_DataLength = len,
current_Command = cmd,
current_trans = allocate_dynamic_data()</label>
<label kind="comments">
Update:
nodeID: 13564, file: tlm2_master_to_ahb.cpp, line: 94,
nodeID: 13582, file: tlm2_master_to_ahb.cpp, line: 95,
nodeID: 13582, file: tlm2_master_to_ahb.cpp, line: 95,
nodeID: 13582, file: tlm2_master_to_ahb.cpp, line: 95</label>
</transition>
<transition>
<source ref="id547"/>
<target ref="id548"/>
<label kind="guard">
addr_is_valid_data(current_trans)
</label>
<label kind="assignment">
dataMem[current_trans].address = addr</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 13651, file: tlm2_master_to_ahb.cpp, line: 100</label>
</transition>
<transition>
<source ref="id548"/>
<target ref="id549"/>
<label kind="guard">
addr_is_valid_data(current_trans)
</label>
<label kind="assignment">
dataMem[current_trans].amba_id = master_id - 1</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 13673, file: tlm2_master_to_ahb.cpp, line: 101</label>
</transition>
<transition>
<source ref="id549"/>
<target ref="id550"/>
<label kind="guard">
addr_is_valid_data(current_trans)
</label>
<label kind="assignment">
dataMem[current_trans].data_length = len</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 13704, file: tlm2_master_to_ahb.cpp, line: 102</label>
</transition>
<transition>
<source ref="id550"/>
<target ref="id551"/>
<label kind="guard">
addr_is_valid_data(current_trans)
</label>
<label kind="assignment">
dataMem[current_trans].streaming_width = wid</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 13726, file: tlm2_master_to_ahb.cpp, line: 103</label>
</transition>
<transition>
<source ref="id551"/>
<target ref="id552"/>
<label kind="guard">
addr_is_valid_data(current_trans)
</label>
<label kind="assignment">
dataMem[current_trans].command = cmd</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 13748, file: tlm2_master_to_ahb.cpp, line: 104</label>
</transition>
<transition>
<source ref="id552"/>
<target ref="id553"/>
<label kind="guard">
addr_is_valid_data(current_trans)
</label>
<label kind="assignment">
dataMem[current_trans].data_ptr = ptr</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 13770, file: tlm2_master_to_ahb.cpp, line: 105</label>
</transition>
<transition>
<source ref="id553"/>
<target ref="id554"/>
<label kind="guard">
addr_is_valid_data(current_trans)
</label>
<label kind="assignment">
dataMem[current_trans].trans_type = current_trans_type</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 13792, file: tlm2_master_to_ahb.cpp, line: 106</label>
</transition>
<transition>
<source ref="id554"/>
<target ref="id555"/>
<label kind="guard">
addr_is_valid_data(current_trans)
</label>
<label kind="assignment">
dataMem[current_trans].burst_size = current_burst_size</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 13818, file: tlm2_master_to_ahb.cpp, line: 107</label>
</transition>
<transition>
<source ref="id558"/>
<target ref="id562"/>
<label kind="synchronisation">
activate?
</label>
<label kind="assignment">
delete_dynamic_data(current_trans),
current_trans = NULL,
current_DataLength = 0,
m_txn_count = 0</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: 13943, file: tlm2_master_to_ahb.cpp, line: 116,
nodeID: 13943, file: tlm2_master_to_ahb.cpp, line: 116,
nodeID: 13943, file: tlm2_master_to_ahb.cpp, line: 116</label>
</transition>
<transition>
<source ref="id562"/>
<target ref="id529"/>
<label kind="guard">
addr_is_valid_tlmdata(tran)
</label>
<label kind="assignment">
tlmdataMem[tran].response_status = TLM_OK_RESPONSE</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 14003, file: tlm2_master_to_ahb.cpp, line: 123</label>
</transition>
<transition>
<source ref="id538"/>
<target ref="id543"/>
<label kind="guard">
cmd == TLM_READ_COMMAND
</label>
<label kind="comments">
Guard:
nodeID: 14017, file: tlm2_master_to_ahb.cpp, line: 126</label>
</transition>
<transition>
<source ref="id543"/>
<target ref="id568"/>
<label kind="assignment">
current_Address = addr,
current_DataLength = len,
current_Command = cmd,
current_trans = allocate_dynamic_data()</label>
<label kind="comments">
Update:
nodeID: 14039, file: tlm2_master_to_ahb.cpp, line: 127,
nodeID: 14057, file: tlm2_master_to_ahb.cpp, line: 128,
nodeID: 14057, file: tlm2_master_to_ahb.cpp, line: 128,
nodeID: 14057, file: tlm2_master_to_ahb.cpp, line: 128</label>
</transition>
<transition>
<source ref="id568"/>
<target ref="id569"/>
<label kind="guard">
addr_is_valid_data(current_trans)
</label>
<label kind="assignment">
dataMem[current_trans].address = current_Address</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 14127, file: tlm2_master_to_ahb.cpp, line: 134</label>
</transition>
<transition>
<source ref="id569"/>
<target ref="id570"/>
<label kind="guard">
addr_is_valid_data(current_trans)
</label>
<label kind="assignment">
dataMem[current_trans].amba_id = master_id - 1</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 14149, file: tlm2_master_to_ahb.cpp, line: 135</label>
</transition>
<transition>
<source ref="id570"/>
<target ref="id571"/>
<label kind="guard">
addr_is_valid_data(current_trans)
</label>
<label kind="assignment">
dataMem[current_trans].data_length = current_DataLength</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 14180, file: tlm2_master_to_ahb.cpp, line: 136</label>
</transition>
<transition>
<source ref="id571"/>
<target ref="id572"/>
<label kind="guard">
addr_is_valid_data(current_trans)
</label>
<label kind="assignment">
dataMem[current_trans].streaming_width = current_DataLength</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 14202, file: tlm2_master_to_ahb.cpp, line: 137</label>
</transition>
<transition>
<source ref="id572"/>
<target ref="id573"/>
<label kind="guard">
addr_is_valid_data(current_trans)
</label>
<label kind="assignment">
dataMem[current_trans].command = current_Command</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 14224, file: tlm2_master_to_ahb.cpp, line: 138</label>
</transition>
<transition>
<source ref="id573"/>
<target ref="id574"/>
<label kind="guard">
addr_is_valid_data(current_trans)
</label>
<label kind="assignment">
dataMem[current_trans].data_ptr = ptr</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 14246, file: tlm2_master_to_ahb.cpp, line: 139</label>
</transition>
<transition>
<source ref="id574"/>
<target ref="id575"/>
<label kind="guard">
addr_is_valid_data(current_trans)
</label>
<label kind="assignment">
dataMem[current_trans].trans_type = current_trans_type</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 14268, file: tlm2_master_to_ahb.cpp, line: 140</label>
</transition>
<transition>
<source ref="id575"/>
<target ref="id576"/>
<label kind="guard">
addr_is_valid_data(current_trans)
</label>
<label kind="assignment">
dataMem[current_trans].burst_size = current_burst_size</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 14294, file: tlm2_master_to_ahb.cpp, line: 141</label>
</transition>
<transition>
<source ref="id579"/>
<target ref="id583"/>
<label kind="synchronisation">
activate?
</label>
<label kind="assignment">
delete_dynamic_data(current_trans),
current_trans = NULL,
current_DataLength = 0,
m_txn_count = 0</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: 14475, file: tlm2_master_to_ahb.cpp, line: 150,
nodeID: 14475, file: tlm2_master_to_ahb.cpp, line: 150,
nodeID: 14475, file: tlm2_master_to_ahb.cpp, line: 150</label>
</transition>
<transition>
<source ref="id583"/>
<target ref="id529"/>
<label kind="guard">
addr_is_valid_tlmdata(tran)
</label>
<label kind="assignment">
tlmdataMem[tran].response_status = TLM_OK_RESPONSE</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 14534, file: tlm2_master_to_ahb.cpp, line: 156</label>
</transition>
<transition>
<source ref="id538"/>
<target ref="id564"/>
<label kind="guard">
!(cmd == TLM_WRITE_COMMAND) &amp;&amp; 
!(cmd == TLM_READ_COMMAND)
</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id564"/>
<target ref="id529"/>
<label kind="guard">
addr_is_valid_tlmdata(tran)
</label>
<label kind="assignment">
tlmdataMem[tran].response_status = TLM_GENERIC_ERROR_RESPONSE</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 14564, file: tlm2_master_to_ahb.cpp, line: 160</label>
</transition>
<transition>
<source ref="id527"/>
<target ref="id528"/>
<label kind="synchronisation">
b_transport$ctrl?
</label>
<label kind="assignment">
tran = b_transport$param$tran,
t = b_transport$param$t</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id540"/>
<target ref="id935"/>
<label kind="assignment">
empty_stack_int(current_trans_type),
empty_stack_unsigned_int(current_burst_size)</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id935"/>
<target ref="id527"/>
<label kind="synchronisation">
b_transport$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id555"/>
<target ref="id936"/>
<label kind="assignment">
readyprocs--</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id936"/>
<target ref="id557"/>
<label kind="synchronisation">
deactivate!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id557"/>
<target ref="id558"/>
<label kind="synchronisation">
b_transport_finished_ev$wait?
</label>
<label kind="assignment">
readyprocs++</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id576"/>
<target ref="id938"/>
<label kind="assignment">
readyprocs--</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id938"/>
<target ref="id578"/>
<label kind="synchronisation">
deactivate!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id578"/>
<target ref="id579"/>
<label kind="synchronisation">
b_transport_finished_ev$wait?
</label>
<label kind="assignment">
readyprocs++</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id529"/>
<target ref="id941"/>
<label kind="assignment">
empty_stack_int(current_trans_type),
empty_stack_unsigned_int(current_burst_size)</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id941"/>
<target ref="id527"/>
<label kind="synchronisation">
b_transport$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id528"/>
<target ref="id1150"/>
<label kind="guard">
!(addr_is_valid_tlmdata(tran))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id530"/>
<target ref="id1151"/>
<label kind="guard">
!(addr_is_valid_tlmdata(tran))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id531"/>
<target ref="id1152"/>
<label kind="guard">
!(addr_is_valid_tlmdata(tran))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id532"/>
<target ref="id1153"/>
<label kind="guard">
!(addr_is_valid_tlmdata(tran))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id533"/>
<target ref="id1154"/>
<label kind="guard">
!(addr_is_valid_tlmdata(tran))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id536"/>
<target ref="id1155"/>
<label kind="guard">
!(addr_is_valid_tlmdata(tran))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id539"/>
<target ref="id1156"/>
<label kind="guard">
!(addr_is_valid_tlmdata(tran))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id547"/>
<target ref="id1157"/>
<label kind="guard">
!(addr_is_valid_data(current_trans))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id548"/>
<target ref="id1158"/>
<label kind="guard">
!(addr_is_valid_data(current_trans))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id549"/>
<target ref="id1159"/>
<label kind="guard">
!(addr_is_valid_data(current_trans))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id550"/>
<target ref="id1160"/>
<label kind="guard">
!(addr_is_valid_data(current_trans))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id551"/>
<target ref="id1161"/>
<label kind="guard">
!(addr_is_valid_data(current_trans))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id552"/>
<target ref="id1162"/>
<label kind="guard">
!(addr_is_valid_data(current_trans))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id553"/>
<target ref="id1163"/>
<label kind="guard">
!(addr_is_valid_data(current_trans))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id554"/>
<target ref="id1164"/>
<label kind="guard">
!(addr_is_valid_data(current_trans))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id562"/>
<target ref="id1165"/>
<label kind="guard">
!(addr_is_valid_tlmdata(tran))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id568"/>
<target ref="id1166"/>
<label kind="guard">
!(addr_is_valid_data(current_trans))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id569"/>
<target ref="id1167"/>
<label kind="guard">
!(addr_is_valid_data(current_trans))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id570"/>
<target ref="id1168"/>
<label kind="guard">
!(addr_is_valid_data(current_trans))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id571"/>
<target ref="id1169"/>
<label kind="guard">
!(addr_is_valid_data(current_trans))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id572"/>
<target ref="id1170"/>
<label kind="guard">
!(addr_is_valid_data(current_trans))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id573"/>
<target ref="id1171"/>
<label kind="guard">
!(addr_is_valid_data(current_trans))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id574"/>
<target ref="id1172"/>
<label kind="guard">
!(addr_is_valid_data(current_trans))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id575"/>
<target ref="id1173"/>
<label kind="guard">
!(addr_is_valid_data(current_trans))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id583"/>
<target ref="id1174"/>
<label kind="guard">
!(addr_is_valid_tlmdata(tran))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id564"/>
<target ref="id1175"/>
<label kind="guard">
!(addr_is_valid_tlmdata(tran))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
</template>
<template>
<name>
tlm2_master_to_ahb$busGranted</name>
<parameter>
chan &amp;startRequest$ctrl, chan &amp;busGranted$ctrl, data_addr_ptr &amp;current_trans, chan &amp;resumeRequest$ctrl, unsigned_int &amp;m_txn_count</parameter>
<declaration>
</declaration>
<location id="id491">
<name>
init_location</name>
</location>
<location id="id492">
<urgent/>
</location>
<location id="id495">
<urgent/>
</location>
<location id="id497">
</location>
<location id="id498">
<urgent/>
</location>
<location id="id500">
<urgent/>
</location>
<location id="id502">
</location>
<location id="id493">
<urgent/>
</location>
<init ref="id491"/>
<transition>
<source ref="id491"/>
<target ref="id492"/>
<label kind="synchronisation">
busGranted$ctrl?
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id492"/>
<target ref="id495"/>
<label kind="guard">
m_txn_count == 0
</label>
<label kind="comments">
Guard:
nodeID: 12515, file: tlm2_master_to_ahb.cpp, line: 7</label>
</transition>
<transition>
<source ref="id495"/>
<target ref="id497"/>
<label kind="synchronisation">
startRequest$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id497"/>
<target ref="id493"/>
<label kind="synchronisation">
startRequest$ctrl?
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id492"/>
<target ref="id498"/>
<label kind="guard">
!(m_txn_count == 0)
</label>
<label kind="comments">
Guard:
nodeID: 12515, file: tlm2_master_to_ahb.cpp, line: 7</label>
</transition>
<transition>
<source ref="id498"/>
<target ref="id500"/>
<label kind="guard">
m_txn_count &lt; (dataMem[current_trans].data_length)
</label>
<label kind="comments">
Guard:
nodeID: 12547, file: tlm2_master_to_ahb.cpp, line: 9</label>
</transition>
<transition>
<source ref="id500"/>
<target ref="id502"/>
<label kind="synchronisation">
resumeRequest$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id502"/>
<target ref="id493"/>
<label kind="synchronisation">
resumeRequest$ctrl?
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id498"/>
<target ref="id493"/>
<label kind="guard">
!(m_txn_count &lt; (dataMem[current_trans].data_length))
</label>
<label kind="comments">
Guard:
nodeID: 12547, file: tlm2_master_to_ahb.cpp, line: 9</label>
</transition>
<transition>
<source ref="id493"/>
<target ref="id491"/>
<label kind="synchronisation">
busGranted$ctrl!
</label>
<label kind="comments">
</label>
</transition>
</template>
<template>
<name>
tlm2_master_to_ahb$busNotGranted</name>
<parameter>
int_addr_ptr &amp;master_socket$nb_transport_fw$param$phase, data_addr_ptr &amp;master_socket$nb_transport_fw$param$tran, chan &amp;master_socket$nb_transport_fw$ctrl, int_addr_ptr &amp;master_socket$nb_transport_fw$param$t, chan &amp;busNotGranted$ctrl, tlm_sync_enum &amp;master_socket$nb_transport_fw$return, data_addr_ptr &amp;current_trans, bool &amp;m_bus_req_pending, bool &amp;m_bus_granted</parameter>
<declaration>
int_addr_ptr ph = NULL;
tlm_sync_enum retval;
int_addr_ptr delay = NULL;
</declaration>
<location id="id503">
<name>
init_location</name>
</location>
<location id="id506">
<urgent/>
</location>
<location id="id508">
<urgent/>
</location>
<location id="id511">
</location>
<location id="id512">
<urgent/>
</location>
<location id="id514">
<urgent/>
</location>
<location id="id517">
<urgent/>
</location>
<location id="id520">
<urgent/>
</location>
<location id="id522">
<urgent/>
</location>
<location id="id513">
<urgent/>
</location>
<location id="id515">
<urgent/>
</location>
<location id="id507">
<urgent/>
</location>
<location id="id505">
<urgent/>
</location>
<location id="id1100">
<urgent/>
</location>
<init ref="id503"/>
<transition>
<source ref="id503"/>
<target ref="id506"/>
<label kind="synchronisation">
busNotGranted$ctrl?
</label>
<label kind="assignment">
delay = allocate_static_and_init_int(0)</label>
<label kind="comments">
Update:
nodeID: 12620, file: tlm2_master_to_ahb.cpp, line: 18</label>
</transition>
<transition>
<source ref="id506"/>
<target ref="id508"/>
<label kind="guard">
m_bus_req_pending == false
</label>
<label kind="comments">
Guard:
nodeID: 12661, file: tlm2_master_to_ahb.cpp, line: 21</label>
</transition>
<transition>
<source ref="id508"/>
<target ref="id1100"/>
<label kind="assignment">
ph = allocate_static_and_init_int(60),
master_socket$nb_transport_fw$param$tran = current_trans,
master_socket$nb_transport_fw$param$phase = ph,
master_socket$nb_transport_fw$param$t = delay</label>
<label kind="comments">
Update:
nodeID: 12747, file: tlm2_master_to_ahb.cpp, line: 28,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id512"/>
<target ref="id514"/>
<label kind="guard">
retval == TLM_UPDATED
</label>
<label kind="comments">
Guard:
nodeID: 12827, file: tlm2_master_to_ahb.cpp, line: 32</label>
</transition>
<transition>
<source ref="id514"/>
<target ref="id517"/>
<label kind="guard">
intMem[ph] == 61
</label>
<label kind="comments">
Guard:
nodeID: 12853, file: tlm2_master_to_ahb.cpp, line: 34</label>
</transition>
<transition>
<source ref="id517"/>
<target ref="id513"/>
<label kind="assignment">
m_bus_granted = true,
m_bus_req_pending = false</label>
<label kind="comments">
Update:
nodeID: 12873, file: tlm2_master_to_ahb.cpp, line: 36,
nodeID: 12891, file: tlm2_master_to_ahb.cpp, line: 37</label>
</transition>
<transition>
<source ref="id514"/>
<target ref="id520"/>
<label kind="guard">
!(intMem[ph] == 61)
</label>
<label kind="comments">
Guard:
nodeID: 12853, file: tlm2_master_to_ahb.cpp, line: 34</label>
</transition>
<transition>
<source ref="id520"/>
<target ref="id522"/>
<label kind="guard">
intMem[ph] == 62
</label>
<label kind="comments">
Guard:
nodeID: 12975, file: tlm2_master_to_ahb.cpp, line: 40</label>
</transition>
<transition>
<source ref="id522"/>
<target ref="id513"/>
<label kind="assignment">
m_bus_granted = false</label>
<label kind="comments">
Update:
nodeID: 12995, file: tlm2_master_to_ahb.cpp, line: 42</label>
</transition>
<transition>
<source ref="id520"/>
<target ref="id513"/>
<label kind="guard">
!(intMem[ph] == 62)
</label>
<label kind="comments">
Guard:
nodeID: 12975, file: tlm2_master_to_ahb.cpp, line: 40</label>
</transition>
<transition>
<source ref="id512"/>
<target ref="id515"/>
<label kind="guard">
retval == TLM_ACCEPTED
</label>
<label kind="comments">
Guard:
nodeID: 13071, file: tlm2_master_to_ahb.cpp, line: 47</label>
</transition>
<transition>
<source ref="id515"/>
<target ref="id513"/>
<label kind="assignment">
m_bus_req_pending = true</label>
<label kind="comments">
Update:
nodeID: 13098, file: tlm2_master_to_ahb.cpp, line: 50</label>
</transition>
<transition>
<source ref="id512"/>
<target ref="id513"/>
<label kind="guard">
!(retval == TLM_UPDATED) &amp;&amp; 
!(retval == TLM_ACCEPTED)
</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id513"/>
<target ref="id507"/>
<label kind="assignment">
empty_stack_int(ph)</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id506"/>
<target ref="id507"/>
<label kind="guard">
!(m_bus_req_pending == false)
</label>
<label kind="comments">
Guard:
nodeID: 12661, file: tlm2_master_to_ahb.cpp, line: 21</label>
</transition>
<transition>
<source ref="id507"/>
<target ref="id505"/>
<label kind="assignment">
empty_stack_int(delay)</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id505"/>
<target ref="id503"/>
<label kind="synchronisation">
busNotGranted$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id1100"/>
<target ref="id511"/>
<label kind="synchronisation">
master_socket$nb_transport_fw$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id511"/>
<target ref="id512"/>
<label kind="synchronisation">
master_socket$nb_transport_fw$ctrl?
</label>
<label kind="assignment">
master_socket$nb_transport_fw$param$tran = NULL,
master_socket$nb_transport_fw$param$phase = NULL,
master_socket$nb_transport_fw$param$t = NULL,
retval = master_socket$nb_transport_fw$return</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
</template>
<template>
<name>
tlm2_master_to_ahb$clock_tick</name>
<parameter>
chan &amp;requestProcess$ctrl, chan &amp;clock_tick$ctrl, chan &amp;dataProcess$ctrl</parameter>
<declaration>
</declaration>
<location id="id587">
<name>
init_location</name>
</location>
<location id="id588">
<urgent/>
</location>
<location id="id590">
<urgent/>
</location>
<location id="id591">
</location>
<location id="id593">
</location>
<location id="id589">
<urgent/>
</location>
<init ref="id587"/>
<transition>
<source ref="id587"/>
<target ref="id588"/>
<label kind="synchronisation">
clock_tick$ctrl?
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id588"/>
<target ref="id591"/>
<label kind="synchronisation">
dataProcess$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id591"/>
<target ref="id590"/>
<label kind="synchronisation">
dataProcess$ctrl?
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id590"/>
<target ref="id593"/>
<label kind="synchronisation">
requestProcess$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id593"/>
<target ref="id589"/>
<label kind="synchronisation">
requestProcess$ctrl?
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id589"/>
<target ref="id587"/>
<label kind="synchronisation">
clock_tick$ctrl!
</label>
<label kind="comments">
</label>
</transition>
</template>
<template>
<name>
tlm2_master_to_ahb$dataProcess</name>
<parameter>
unsigned_int &amp;current_DataLength, chan &amp;sendData$ctrl, chan &amp;dataProcess$ctrl, bool &amp;m_restart_pending_req, bool &amp;m_request_pending, bool &amp;m_data_pending, data_addr_ptr &amp;current_trans, unsigned_int &amp;m_txn_count, unsigned_int &amp;m_data_count</parameter>
<declaration>
unsigned_int burst_count;
bool first_req_accepted;
bool sec_req_available;
</declaration>
<location id="id594">
<name>
init_location</name>
</location>
<location id="id595">
<urgent/>
</location>
<location id="id598">
<urgent/>
</location>
<location id="id597">
<urgent/>
</location>
<location id="id600">
<urgent/>
</location>
<location id="id599">
<urgent/>
</location>
<location id="id602">
<urgent/>
</location>
<location id="id604">
<urgent/>
</location>
<location id="id605">
<urgent/>
</location>
<location id="id607">
<urgent/>
</location>
<location id="id609">
<urgent/>
</location>
<location id="id611">
<urgent/>
</location>
<location id="id613">
</location>
<location id="id596">
<urgent/>
</location>
<location id="id1141">
<name>
mem_access_fail_0</name>
<urgent/>
</location>
<init ref="id594"/>
<transition>
<source ref="id594"/>
<target ref="id595"/>
<label kind="synchronisation">
dataProcess$ctrl?
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id595"/>
<target ref="id598"/>
<label kind="guard">
m_data_count == current_DataLength
</label>
<label kind="comments">
Guard:
nodeID: 14657, file: tlm2_master_to_ahb.cpp, line: 176</label>
</transition>
<transition>
<source ref="id598"/>
<target ref="id594"/>
<label kind="synchronisation">
dataProcess$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id595"/>
<target ref="id597"/>
<label kind="guard">
!(m_data_count == current_DataLength)
</label>
<label kind="comments">
Guard:
nodeID: 14657, file: tlm2_master_to_ahb.cpp, line: 176</label>
</transition>
<transition>
<source ref="id597"/>
<target ref="id600"/>
<label kind="guard">
m_restart_pending_req
</label>
<label kind="comments">
Guard:
nodeID: 14688, file: tlm2_master_to_ahb.cpp, line: 181</label>
</transition>
<transition>
<source ref="id600"/>
<target ref="id594"/>
<label kind="synchronisation">
dataProcess$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id597"/>
<target ref="id599"/>
<label kind="guard">
!(m_restart_pending_req)
</label>
<label kind="comments">
Guard:
nodeID: 14688, file: tlm2_master_to_ahb.cpp, line: 181</label>
</transition>
<transition>
<source ref="id599"/>
<target ref="id602"/>
<label kind="guard">
current_trans != NULL
</label>
<label kind="comments">
Guard:
nodeID: 14715, file: tlm2_master_to_ahb.cpp, line: 186</label>
</transition>
<transition>
<source ref="id602"/>
<target ref="id604"/>
<label kind="guard">
dataMem[current_trans].command == TLM_WRITE_COMMAND
</label>
<label kind="comments">
Guard:
nodeID: 14740, file: tlm2_master_to_ahb.cpp, line: 188</label>
</transition>
<transition>
<source ref="id604"/>
<target ref="id605"/>
<label kind="guard">
addr_is_valid_data(current_trans)
</label>
<label kind="assignment">
burst_count = dataMem[current_trans].data_length</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 14770, file: tlm2_master_to_ahb.cpp, line: 191</label>
</transition>
<transition>
<source ref="id605"/>
<target ref="id607"/>
<label kind="assignment">
first_req_accepted = (m_txn_count == 1 &amp;&amp; (m_request_pending == false)),
sec_req_available = (m_txn_count &gt; 1 &amp;&amp; m_data_count &lt; burst_count)</label>
<label kind="comments">
Update:
nodeID: 14799, file: tlm2_master_to_ahb.cpp, line: 193,
nodeID: 14855, file: tlm2_master_to_ahb.cpp, line: 194</label>
</transition>
<transition>
<source ref="id607"/>
<target ref="id609"/>
<label kind="guard">
sec_req_available || 
first_req_accepted
</label>
<label kind="comments">
Guard:
nodeID: 14908, file: tlm2_master_to_ahb.cpp, line: 196</label>
</transition>
<transition>
<source ref="id609"/>
<target ref="id611"/>
<label kind="guard">
!m_data_pending
</label>
<label kind="comments">
Guard:
nodeID: 14922, file: tlm2_master_to_ahb.cpp, line: 198</label>
</transition>
<transition>
<source ref="id611"/>
<target ref="id613"/>
<label kind="synchronisation">
sendData$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id613"/>
<target ref="id596"/>
<label kind="synchronisation">
sendData$ctrl?
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id609"/>
<target ref="id596"/>
<label kind="guard">
!(!m_data_pending)
</label>
<label kind="comments">
Guard:
nodeID: 14922, file: tlm2_master_to_ahb.cpp, line: 198</label>
</transition>
<transition>
<source ref="id607"/>
<target ref="id596"/>
<label kind="guard">
!(sec_req_available || 
first_req_accepted)
</label>
<label kind="comments">
Guard:
nodeID: 14908, file: tlm2_master_to_ahb.cpp, line: 196</label>
</transition>
<transition>
<source ref="id602"/>
<target ref="id596"/>
<label kind="guard">
!(dataMem[current_trans].command == TLM_WRITE_COMMAND)
</label>
<label kind="comments">
Guard:
nodeID: 14740, file: tlm2_master_to_ahb.cpp, line: 188</label>
</transition>
<transition>
<source ref="id599"/>
<target ref="id596"/>
<label kind="guard">
!(current_trans != NULL)
</label>
<label kind="comments">
Guard:
nodeID: 14715, file: tlm2_master_to_ahb.cpp, line: 186</label>
</transition>
<transition>
<source ref="id596"/>
<target ref="id594"/>
<label kind="synchronisation">
dataProcess$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id604"/>
<target ref="id1141"/>
<label kind="guard">
!(addr_is_valid_data(current_trans))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
</template>
<template>
<name>
tlm2_master_to_ahb$nb_transport_bw</name>
<parameter>
chan &amp;m_peq$notify$ctrl, int &amp;m_peq$peq_element$param$delay, int_addr_ptr &amp;nb_transport_bw$param$t, tlm_sync_enum &amp;nb_transport_bw$return, chan &amp;nb_transport_bw$ctrl, int_addr_ptr &amp;m_peq$peq_element$param$phase, int_addr_ptr &amp;nb_transport_bw$param$phase, data_addr_ptr &amp;m_peq$peq_element$param$trans, data_addr_ptr &amp;nb_transport_bw$param$tran</parameter>
<declaration>
data_addr_ptr tran = NULL;
int_addr_ptr phase = NULL;
int_addr_ptr t = NULL;
</declaration>
<location id="id620">
<name>
init_location</name>
</location>
<location id="id621">
<urgent/>
</location>
<location id="id623">
<urgent/>
</location>
<location id="id928">
<urgent/>
</location>
<location id="id930">
<urgent/>
</location>
<location id="id931">
<urgent/>
</location>
<location id="id1149">
<name>
mem_access_fail_8</name>
<urgent/>
</location>
<init ref="id620"/>
<transition>
<source ref="id623"/>
<target ref="id931"/>
<label kind="synchronisation">
m_peq$notify$ctrl?
</label>
<label kind="assignment">
nb_transport_bw$return = TLM_ACCEPTED</label>
<label kind="comments">
Update:
nodeID: 15157, file: tlm2_master_to_ahb.cpp, line: 224</label>
</transition>
<transition>
<source ref="id620"/>
<target ref="id621"/>
<label kind="synchronisation">
nb_transport_bw$ctrl?
</label>
<label kind="assignment">
tran = nb_transport_bw$param$tran,
phase = nb_transport_bw$param$phase,
t = nb_transport_bw$param$t</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id621"/>
<target ref="id928"/>
<label kind="guard">
addr_is_valid_int(t)
</label>
<label kind="assignment">
m_peq$peq_element$param$delay = intMem[t]</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id928"/>
<target ref="id930"/>
<label kind="assignment">
m_peq$peq_element$param$trans = tran,
m_peq$peq_element$param$phase = phase</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id930"/>
<target ref="id623"/>
<label kind="synchronisation">
m_peq$notify$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id931"/>
<target ref="id620"/>
<label kind="synchronisation">
nb_transport_bw$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id621"/>
<target ref="id1149"/>
<label kind="guard">
!(addr_is_valid_int(t))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
</template>
<template>
<name>
tlm2_master_to_ahb$peq_cb</name>
<parameter>
chan &amp;requestProcess$ctrl, chan &amp;b_transport_finished_ev$notify_imm, int_addr_ptr &amp;peq_cb$param$phase, chan &amp;dataProcess$ctrl, bool &amp;m_restart_pending_req, bool &amp;m_request_pending, chan &amp;peq_cb$ctrl, chan &amp;receiveData$ctrl, data_addr_ptr &amp;peq_cb$param$tran, bool &amp;m_data_pending, data_addr_ptr &amp;current_trans, unsigned_int &amp;m_txn_count, bool &amp;m_bus_req_pending, bool &amp;m_bus_granted, unsigned_int &amp;m_data_count, data_addr_ptr &amp;receiveData$param$tran</parameter>
<declaration>
data_addr_ptr tran = NULL;
int_addr_ptr phase = NULL;
unsigned_int_addr_ptr size = NULL;
unsigned_int burst_len;
</declaration>
<location id="id628">
<name>
init_location</name>
</location>
<location id="id632">
<urgent/>
</location>
<location id="id634">
<urgent/>
</location>
<location id="id635">
<urgent/>
</location>
<location id="id636">
</location>
<location id="id637">
<urgent/>
</location>
<location id="id639">
<urgent/>
</location>
<location id="id641">
<urgent/>
</location>
<location id="id643">
<urgent/>
</location>
<location id="id644">
<urgent/>
</location>
<location id="id645">
<urgent/>
</location>
<location id="id646">
<urgent/>
</location>
<location id="id648">
<urgent/>
</location>
<location id="id650">
<urgent/>
</location>
<location id="id652">
</location>
<location id="id653">
<urgent/>
</location>
<location id="id655">
<urgent/>
</location>
<location id="id657">
<urgent/>
</location>
<location id="id659">
</location>
<location id="id660">
<urgent/>
</location>
<location id="id662">
<urgent/>
</location>
<location id="id666">
<urgent/>
</location>
<location id="id668">
<urgent/>
</location>
<location id="id630">
<urgent/>
</location>
<location id="id910">
<urgent/>
</location>
<location id="id1142">
<name>
mem_access_fail_1</name>
<urgent/>
</location>
<location id="id1143">
<name>
mem_access_fail_2</name>
<urgent/>
</location>
<init ref="id628"/>
<transition>
<source ref="id632"/>
<target ref="id634"/>
<label kind="guard">
intMem[phase] == BEGIN_RESP
</label>
<label kind="comments">
Guard:
nodeID: 15370, file: tlm2_master_to_ahb.cpp, line: 243</label>
</transition>
<transition>
<source ref="id635"/>
<target ref="id628"/>
<label kind="synchronisation">
peq_cb$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id632"/>
<target ref="id637"/>
<label kind="guard">
!(intMem[phase] == BEGIN_RESP)
</label>
<label kind="comments">
Guard:
nodeID: 15370, file: tlm2_master_to_ahb.cpp, line: 243</label>
</transition>
<transition>
<source ref="id637"/>
<target ref="id639"/>
<label kind="guard">
intMem[phase] == END_REQ
</label>
<label kind="comments">
Guard:
nodeID: 15424, file: tlm2_master_to_ahb.cpp, line: 249</label>
</transition>
<transition>
<source ref="id639"/>
<target ref="id630"/>
<label kind="assignment">
m_request_pending = false</label>
<label kind="comments">
Update:
nodeID: 15510, file: tlm2_master_to_ahb.cpp, line: 252</label>
</transition>
<transition>
<source ref="id637"/>
<target ref="id641"/>
<label kind="guard">
!(intMem[phase] == END_REQ)
</label>
<label kind="comments">
Guard:
nodeID: 15424, file: tlm2_master_to_ahb.cpp, line: 249</label>
</transition>
<transition>
<source ref="id641"/>
<target ref="id643"/>
<label kind="guard">
intMem[phase] == 43
</label>
<label kind="comments">
Guard:
nodeID: 15530, file: tlm2_master_to_ahb.cpp, line: 255</label>
</transition>
<transition>
<source ref="id643"/>
<target ref="id644"/>
<label kind="guard">
addr_is_valid_data(tran)
</label>
<label kind="assignment">
size = dataMem[tran].burst_size</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 15615, file: tlm2_master_to_ahb.cpp, line: 259</label>
</transition>
<transition>
<source ref="id644"/>
<target ref="id645"/>
<label kind="guard">
addr_is_valid_data(tran) &amp;&amp; 
addr_is_valid_unsigned_int(size)
</label>
<label kind="assignment">
burst_len = dataMem[tran].data_length / unsigned_intMem[size]</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 15637, file: tlm2_master_to_ahb.cpp, line: 260</label>
</transition>
<transition>
<source ref="id645"/>
<target ref="id646"/>
<label kind="assignment">
m_data_pending = false</label>
<label kind="comments">
Update:
nodeID: 15675, file: tlm2_master_to_ahb.cpp, line: 262</label>
</transition>
<transition>
<source ref="id646"/>
<target ref="id648"/>
<label kind="guard">
m_data_count == burst_len
</label>
<label kind="comments">
Guard:
nodeID: 15775, file: tlm2_master_to_ahb.cpp, line: 265</label>
</transition>
<transition>
<source ref="id648"/>
<target ref="id630"/>
<label kind="synchronisation">
b_transport_finished_ev$notify_imm!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id646"/>
<target ref="id650"/>
<label kind="guard">
!(m_data_count == burst_len)
</label>
<label kind="comments">
Guard:
nodeID: 15775, file: tlm2_master_to_ahb.cpp, line: 265</label>
</transition>
<transition>
<source ref="id650"/>
<target ref="id652"/>
<label kind="synchronisation">
dataProcess$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id652"/>
<target ref="id630"/>
<label kind="synchronisation">
dataProcess$ctrl?
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id641"/>
<target ref="id653"/>
<label kind="guard">
!(intMem[phase] == 43)
</label>
<label kind="comments">
Guard:
nodeID: 15530, file: tlm2_master_to_ahb.cpp, line: 255</label>
</transition>
<transition>
<source ref="id653"/>
<target ref="id655"/>
<label kind="guard">
intMem[phase] == 61
</label>
<label kind="comments">
Guard:
nodeID: 15813, file: tlm2_master_to_ahb.cpp, line: 274</label>
</transition>
<transition>
<source ref="id655"/>
<target ref="id657"/>
<label kind="assignment">
m_bus_granted = true,
m_bus_req_pending = false</label>
<label kind="comments">
Update:
nodeID: 15897, file: tlm2_master_to_ahb.cpp, line: 277,
nodeID: 15915, file: tlm2_master_to_ahb.cpp, line: 278</label>
</transition>
<transition>
<source ref="id657"/>
<target ref="id659"/>
<label kind="synchronisation">
requestProcess$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id659"/>
<target ref="id630"/>
<label kind="synchronisation">
requestProcess$ctrl?
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id653"/>
<target ref="id660"/>
<label kind="guard">
!(intMem[phase] == 61)
</label>
<label kind="comments">
Guard:
nodeID: 15813, file: tlm2_master_to_ahb.cpp, line: 274</label>
</transition>
<transition>
<source ref="id660"/>
<target ref="id662"/>
<label kind="guard">
intMem[phase] == 62
</label>
<label kind="comments">
Guard:
nodeID: 15945, file: tlm2_master_to_ahb.cpp, line: 282</label>
</transition>
<transition>
<source ref="id662"/>
<target ref="id666"/>
<label kind="assignment">
m_bus_granted = false,
m_bus_req_pending = false,
m_data_pending = false,
m_request_pending = false</label>
<label kind="comments">
Update:
nodeID: 16030, file: tlm2_master_to_ahb.cpp, line: 286,
nodeID: 16048, file: tlm2_master_to_ahb.cpp, line: 287,
nodeID: 16048, file: tlm2_master_to_ahb.cpp, line: 287,
nodeID: 16048, file: tlm2_master_to_ahb.cpp, line: 287</label>
</transition>
<transition>
<source ref="id666"/>
<target ref="id668"/>
<label kind="guard">
m_txn_count &lt; burst_len
</label>
<label kind="comments">
Guard:
nodeID: 16102, file: tlm2_master_to_ahb.cpp, line: 291</label>
</transition>
<transition>
<source ref="id668"/>
<target ref="id630"/>
<label kind="assignment">
current_trans = tran,
m_restart_pending_req = true</label>
<label kind="comments">
Update:
nodeID: 16123, file: tlm2_master_to_ahb.cpp, line: 293,
nodeID: 16146, file: tlm2_master_to_ahb.cpp, line: 295</label>
</transition>
<transition>
<source ref="id666"/>
<target ref="id630"/>
<label kind="guard">
!(m_txn_count &lt; burst_len)
</label>
<label kind="comments">
Guard:
nodeID: 16102, file: tlm2_master_to_ahb.cpp, line: 291</label>
</transition>
<transition>
<source ref="id660"/>
<target ref="id630"/>
<label kind="guard">
!(intMem[phase] == 62)
</label>
<label kind="comments">
Guard:
nodeID: 15945, file: tlm2_master_to_ahb.cpp, line: 282</label>
</transition>
<transition>
<source ref="id630"/>
<target ref="id628"/>
<label kind="synchronisation">
peq_cb$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id628"/>
<target ref="id632"/>
<label kind="synchronisation">
peq_cb$ctrl?
</label>
<label kind="assignment">
tran = peq_cb$param$tran,
phase = peq_cb$param$phase,
size = NULL,
burst_len = 0</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id634"/>
<target ref="id910"/>
<label kind="assignment">
receiveData$param$tran = tran</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id910"/>
<target ref="id636"/>
<label kind="synchronisation">
receiveData$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id636"/>
<target ref="id635"/>
<label kind="synchronisation">
receiveData$ctrl?
</label>
<label kind="assignment">
receiveData$param$tran = NULL</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id643"/>
<target ref="id1142"/>
<label kind="guard">
!(addr_is_valid_data(tran))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id644"/>
<target ref="id1143"/>
<label kind="guard">
!(addr_is_valid_data(tran) &amp;&amp; 
addr_is_valid_unsigned_int(size))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
</template>
<template>
<name>
tlm2_master_to_ahb$receiveData</name>
<parameter>
chan &amp;b_transport_finished_ev$notify_imm, chan &amp;receiveData$ctrl, bool &amp;m_data_pending, unsigned_int &amp;m_data_count, data_addr_ptr &amp;receiveData$param$tran</parameter>
<declaration>
data_addr_ptr tran = NULL;
unsigned_int_addr_ptr size = NULL;
unsigned_int burst_len;
unsigned_int_addr_ptr data_ptr = NULL;
</declaration>
<location id="id671">
<name>
init_location</name>
</location>
<location id="id676">
<urgent/>
</location>
<location id="id677">
<urgent/>
</location>
<location id="id678">
<urgent/>
</location>
<location id="id679">
<urgent/>
</location>
<location id="id681">
<urgent/>
</location>
<location id="id682">
<urgent/>
</location>
<location id="id684">
<urgent/>
</location>
<location id="id673">
<urgent/>
</location>
<location id="id1211">
<name>
mem_access_fail_70</name>
<urgent/>
</location>
<location id="id1212">
<name>
mem_access_fail_71</name>
<urgent/>
</location>
<location id="id1213">
<name>
mem_access_fail_72</name>
<urgent/>
</location>
<init ref="id671"/>
<transition>
<source ref="id676"/>
<target ref="id677"/>
<label kind="guard">
addr_is_valid_data(tran)
</label>
<label kind="assignment">
size = dataMem[tran].burst_size</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 16412, file: tlm2_master_to_ahb.cpp, line: 317</label>
</transition>
<transition>
<source ref="id677"/>
<target ref="id678"/>
<label kind="guard">
addr_is_valid_data(tran) &amp;&amp; 
addr_is_valid_unsigned_int(size)
</label>
<label kind="assignment">
burst_len = dataMem[tran].data_length / unsigned_intMem[size]</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 16434, file: tlm2_master_to_ahb.cpp, line: 318</label>
</transition>
<transition>
<source ref="id678"/>
<target ref="id679"/>
<label kind="guard">
addr_is_valid_data(tran)
</label>
<label kind="assignment">
data_ptr = dataMem[tran].data_ptr</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 16472, file: tlm2_master_to_ahb.cpp, line: 319</label>
</transition>
<transition>
<source ref="id679"/>
<target ref="id681"/>
<label kind="guard">
m_data_count == burst_len
</label>
<label kind="comments">
Guard:
nodeID: 16606, file: tlm2_master_to_ahb.cpp, line: 323</label>
</transition>
<transition>
<source ref="id681"/>
<target ref="id682"/>
<label kind="synchronisation">
b_transport_finished_ev$notify_imm!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id682"/>
<target ref="id673"/>
<label kind="assignment">
m_data_pending = false</label>
<label kind="comments">
Update:
nodeID: 16630, file: tlm2_master_to_ahb.cpp, line: 325</label>
</transition>
<transition>
<source ref="id679"/>
<target ref="id684"/>
<label kind="guard">
!(m_data_count == burst_len)
</label>
<label kind="comments">
Guard:
nodeID: 16606, file: tlm2_master_to_ahb.cpp, line: 323</label>
</transition>
<transition>
<source ref="id684"/>
<target ref="id673"/>
<label kind="assignment">
m_data_pending = true</label>
<label kind="comments">
Update:
nodeID: 16651, file: tlm2_master_to_ahb.cpp, line: 327</label>
</transition>
<transition>
<source ref="id673"/>
<target ref="id671"/>
<label kind="synchronisation">
receiveData$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id671"/>
<target ref="id676"/>
<label kind="synchronisation">
receiveData$ctrl?
</label>
<label kind="assignment">
tran = receiveData$param$tran,
size = NULL,
burst_len = 0,
m_data_count++</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: 16224, file: tlm2_master_to_ahb.cpp, line: 310,
nodeID: 16224, file: tlm2_master_to_ahb.cpp, line: 310,
nodeID: 16224, file: tlm2_master_to_ahb.cpp, line: 310</label>
</transition>
<transition>
<source ref="id676"/>
<target ref="id1211"/>
<label kind="guard">
!(addr_is_valid_data(tran))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id677"/>
<target ref="id1212"/>
<label kind="guard">
!(addr_is_valid_data(tran) &amp;&amp; 
addr_is_valid_unsigned_int(size))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id678"/>
<target ref="id1213"/>
<label kind="guard">
!(addr_is_valid_data(tran))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
</template>
<template>
<name>
tlm2_master_to_ahb$requestProcess</name>
<parameter>
chan &amp;requestProcess$ctrl, unsigned_int &amp;current_DataLength, chan &amp;busNotGranted$ctrl, chan &amp;busGranted$ctrl, data_addr_ptr &amp;current_trans, unsigned_int &amp;m_txn_count, bool &amp;m_bus_granted</parameter>
<declaration>
</declaration>
<location id="id716">
<name>
init_location</name>
</location>
<location id="id717">
<urgent/>
</location>
<location id="id720">
<urgent/>
</location>
<location id="id719">
<urgent/>
</location>
<location id="id722">
<urgent/>
</location>
<location id="id721">
<urgent/>
</location>
<location id="id725">
<urgent/>
</location>
<location id="id727">
</location>
<location id="id728">
<urgent/>
</location>
<location id="id730">
</location>
<location id="id718">
<urgent/>
</location>
<init ref="id716"/>
<transition>
<source ref="id716"/>
<target ref="id717"/>
<label kind="synchronisation">
requestProcess$ctrl?
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id717"/>
<target ref="id720"/>
<label kind="guard">
m_txn_count == current_DataLength
</label>
<label kind="comments">
Guard:
nodeID: 18403, file: tlm2_master_to_ahb.cpp, line: 398</label>
</transition>
<transition>
<source ref="id720"/>
<target ref="id716"/>
<label kind="synchronisation">
requestProcess$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id717"/>
<target ref="id719"/>
<label kind="guard">
!(m_txn_count == current_DataLength)
</label>
<label kind="comments">
Guard:
nodeID: 18403, file: tlm2_master_to_ahb.cpp, line: 398</label>
</transition>
<transition>
<source ref="id719"/>
<target ref="id722"/>
<label kind="guard">
current_trans == NULL
</label>
<label kind="comments">
Guard:
nodeID: 18436, file: tlm2_master_to_ahb.cpp, line: 403</label>
</transition>
<transition>
<source ref="id722"/>
<target ref="id721"/>
<label kind="assignment">
current_trans = allocate_dynamic_data()</label>
<label kind="comments">
Update:
nodeID: 18458, file: tlm2_master_to_ahb.cpp, line: 407</label>
</transition>
<transition>
<source ref="id719"/>
<target ref="id721"/>
<label kind="guard">
!(current_trans == NULL)
</label>
<label kind="comments">
Guard:
nodeID: 18436, file: tlm2_master_to_ahb.cpp, line: 403</label>
</transition>
<transition>
<source ref="id721"/>
<target ref="id725"/>
<label kind="guard">
!m_bus_granted
</label>
<label kind="comments">
Guard:
nodeID: 18480, file: tlm2_master_to_ahb.cpp, line: 410</label>
</transition>
<transition>
<source ref="id725"/>
<target ref="id727"/>
<label kind="synchronisation">
busNotGranted$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id727"/>
<target ref="id718"/>
<label kind="synchronisation">
busNotGranted$ctrl?
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id721"/>
<target ref="id728"/>
<label kind="guard">
!(!m_bus_granted)
</label>
<label kind="comments">
Guard:
nodeID: 18480, file: tlm2_master_to_ahb.cpp, line: 410</label>
</transition>
<transition>
<source ref="id728"/>
<target ref="id730"/>
<label kind="synchronisation">
busGranted$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id730"/>
<target ref="id718"/>
<label kind="synchronisation">
busGranted$ctrl?
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id718"/>
<target ref="id716"/>
<label kind="synchronisation">
requestProcess$ctrl!
</label>
<label kind="comments">
</label>
</transition>
</template>
<template>
<name>
tlm2_master_to_ahb$resumeRequest</name>
<parameter>
int_addr_ptr &amp;master_socket$nb_transport_fw$param$phase, data_addr_ptr &amp;master_socket$nb_transport_fw$param$tran, chan &amp;master_socket$nb_transport_fw$ctrl, int_addr_ptr &amp;master_socket$nb_transport_fw$param$t, bool &amp;m_restart_pending_req, bool &amp;m_request_pending, bool &amp;m_data_pending, tlm_sync_enum &amp;master_socket$nb_transport_fw$return, data_addr_ptr &amp;current_trans, chan &amp;resumeRequest$ctrl, unsigned_int &amp;m_txn_count</parameter>
<declaration>
int_addr_ptr m_trans_type = NULL;
int_addr_ptr ph = NULL;
tlm_sync_enum retval;
int_addr_ptr delay = NULL;
</declaration>
<location id="id686">
<name>
init_location</name>
</location>
<location id="id689">
<urgent/>
</location>
<location id="id691">
<urgent/>
</location>
<location id="id692">
<urgent/>
</location>
<location id="id694">
<urgent/>
</location>
<location id="id695">
<urgent/>
</location>
<location id="id696">
<urgent/>
</location>
<location id="id693">
<urgent/>
</location>
<location id="id698">
<urgent/>
</location>
<location id="id699">
<urgent/>
</location>
<location id="id704">
</location>
<location id="id706">
<urgent/>
</location>
<location id="id708">
<urgent/>
</location>
<location id="id707">
<urgent/>
</location>
<location id="id711">
<urgent/>
</location>
<location id="id710">
<urgent/>
</location>
<location id="id688">
<urgent/>
</location>
<location id="id1107">
<urgent/>
</location>
<location id="id1214">
<name>
mem_access_fail_73</name>
<urgent/>
</location>
<location id="id1215">
<name>
mem_access_fail_74</name>
<urgent/>
</location>
<location id="id1216">
<name>
mem_access_fail_75</name>
<urgent/>
</location>
<location id="id1217">
<name>
mem_access_fail_76</name>
<urgent/>
</location>
<init ref="id686"/>
<transition>
<source ref="id686"/>
<target ref="id689"/>
<label kind="synchronisation">
resumeRequest$ctrl?
</label>
<label kind="assignment">
m_trans_type = NULL</label>
<label kind="comments">
Update:
nodeID: 16702, file: tlm2_master_to_ahb.cpp, line: 336</label>
</transition>
<transition>
<source ref="id689"/>
<target ref="id691"/>
<label kind="guard">
!m_request_pending
</label>
<label kind="comments">
Guard:
nodeID: 16716, file: tlm2_master_to_ahb.cpp, line: 338</label>
</transition>
<transition>
<source ref="id691"/>
<target ref="id692"/>
<label kind="assignment">
m_txn_count++</label>
<label kind="comments">
Update:
nodeID: 16736, file: tlm2_master_to_ahb.cpp, line: 340</label>
</transition>
<transition>
<source ref="id692"/>
<target ref="id694"/>
<label kind="guard">
m_restart_pending_req
</label>
<label kind="comments">
Guard:
nodeID: 16868, file: tlm2_master_to_ahb.cpp, line: 344</label>
</transition>
<transition>
<source ref="id694"/>
<target ref="id695"/>
<label kind="guard">
addr_is_valid_data(current_trans)
</label>
<label kind="assignment">
m_trans_type = dataMem[current_trans].trans_type</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 16883, file: tlm2_master_to_ahb.cpp, line: 346</label>
</transition>
<transition>
<source ref="id695"/>
<target ref="id696"/>
<label kind="guard">
addr_is_valid_int(m_trans_type)
</label>
<label kind="assignment">
intMem[m_trans_type] = 50</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 16909, file: tlm2_master_to_ahb.cpp, line: 347</label>
</transition>
<transition>
<source ref="id696"/>
<target ref="id693"/>
<label kind="assignment">
m_restart_pending_req = false</label>
<label kind="comments">
Update:
nodeID: 16927, file: tlm2_master_to_ahb.cpp, line: 348</label>
</transition>
<transition>
<source ref="id692"/>
<target ref="id698"/>
<label kind="guard">
!(m_restart_pending_req)
</label>
<label kind="comments">
Guard:
nodeID: 16868, file: tlm2_master_to_ahb.cpp, line: 344</label>
</transition>
<transition>
<source ref="id698"/>
<target ref="id699"/>
<label kind="guard">
addr_is_valid_data(current_trans)
</label>
<label kind="assignment">
m_trans_type = dataMem[current_trans].trans_type</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 16957, file: tlm2_master_to_ahb.cpp, line: 353</label>
</transition>
<transition>
<source ref="id699"/>
<target ref="id693"/>
<label kind="guard">
addr_is_valid_int(m_trans_type)
</label>
<label kind="assignment">
intMem[m_trans_type] = 51</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 16983, file: tlm2_master_to_ahb.cpp, line: 354</label>
</transition>
<transition>
<source ref="id693"/>
<target ref="id1107"/>
<label kind="assignment">
delay = allocate_static_and_init_int(1),
ph = allocate_static_and_init_int(BEGIN_REQ),
master_socket$nb_transport_fw$param$tran = current_trans,
master_socket$nb_transport_fw$param$phase = ph,
master_socket$nb_transport_fw$param$t = delay</label>
<label kind="comments">
Update:
nodeID: 17019, file: tlm2_master_to_ahb.cpp, line: 359,
nodeID: 17059, file: tlm2_master_to_ahb.cpp, line: 360,
nodeID: 17059, file: tlm2_master_to_ahb.cpp, line: 360,
nodeID: 17059, file: tlm2_master_to_ahb.cpp, line: 360,
nodeID: 17059, file: tlm2_master_to_ahb.cpp, line: 360</label>
</transition>
<transition>
<source ref="id706"/>
<target ref="id708"/>
<label kind="guard">
dataMem[current_trans].command == TLM_READ_COMMAND
</label>
<label kind="comments">
Guard:
nodeID: 17527, file: tlm2_master_to_ahb.cpp, line: 366</label>
</transition>
<transition>
<source ref="id708"/>
<target ref="id707"/>
<label kind="assignment">
m_data_pending = true</label>
<label kind="comments">
Update:
nodeID: 17549, file: tlm2_master_to_ahb.cpp, line: 367</label>
</transition>
<transition>
<source ref="id706"/>
<target ref="id707"/>
<label kind="guard">
!(dataMem[current_trans].command == TLM_READ_COMMAND)
</label>
<label kind="comments">
Guard:
nodeID: 17527, file: tlm2_master_to_ahb.cpp, line: 366</label>
</transition>
<transition>
<source ref="id707"/>
<target ref="id711"/>
<label kind="guard">
retval == TLM_UPDATED
</label>
<label kind="comments">
Guard:
nodeID: 17567, file: tlm2_master_to_ahb.cpp, line: 372</label>
</transition>
<transition>
<source ref="id711"/>
<target ref="id710"/>
<label kind="assignment">
m_request_pending = false</label>
<label kind="comments">
Update:
nodeID: 17958, file: tlm2_master_to_ahb.cpp, line: 376</label>
</transition>
<transition>
<source ref="id707"/>
<target ref="id710"/>
<label kind="guard">
retval == TLM_ACCEPTED
</label>
<label kind="comments">
Guard:
nodeID: 17970, file: tlm2_master_to_ahb.cpp, line: 379</label>
</transition>
<transition>
<source ref="id707"/>
<target ref="id710"/>
<label kind="guard">
!(retval == TLM_UPDATED) &amp;&amp; 
!(retval == TLM_ACCEPTED)
</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id689"/>
<target ref="id688"/>
<label kind="guard">
!(!m_request_pending)
</label>
<label kind="comments">
Guard:
nodeID: 16716, file: tlm2_master_to_ahb.cpp, line: 338</label>
</transition>
<transition>
<source ref="id688"/>
<target ref="id686"/>
<label kind="synchronisation">
resumeRequest$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id1107"/>
<target ref="id704"/>
<label kind="synchronisation">
master_socket$nb_transport_fw$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id704"/>
<target ref="id706"/>
<label kind="synchronisation">
master_socket$nb_transport_fw$ctrl?
</label>
<label kind="assignment">
master_socket$nb_transport_fw$param$tran = NULL,
master_socket$nb_transport_fw$param$phase = NULL,
master_socket$nb_transport_fw$param$t = NULL,
retval = master_socket$nb_transport_fw$return,
m_request_pending = true</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id710"/>
<target ref="id688"/>
<label kind="assignment">
empty_stack_int(delay),
empty_stack_int(ph)</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id694"/>
<target ref="id1214"/>
<label kind="guard">
!(addr_is_valid_data(current_trans))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id695"/>
<target ref="id1215"/>
<label kind="guard">
!(addr_is_valid_int(m_trans_type))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id698"/>
<target ref="id1216"/>
<label kind="guard">
!(addr_is_valid_data(current_trans))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id699"/>
<target ref="id1217"/>
<label kind="guard">
!(addr_is_valid_int(m_trans_type))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
</template>
<template>
<name>
tlm2_master_to_ahb$sendData</name>
<parameter>
int_addr_ptr &amp;master_socket$nb_transport_fw$param$phase, chan &amp;b_transport_finished_ev$notify_imm, data_addr_ptr &amp;master_socket$nb_transport_fw$param$tran, chan &amp;sendData$ctrl, chan &amp;master_socket$nb_transport_fw$ctrl, int_addr_ptr &amp;master_socket$nb_transport_fw$param$t, bool &amp;m_data_pending, tlm_sync_enum &amp;master_socket$nb_transport_fw$return, data_addr_ptr &amp;current_trans, unsigned_int &amp;m_data_count</parameter>
<declaration>
unsigned_int_addr_ptr size = NULL;
unsigned_int burst_len;
int_addr_ptr ph = NULL;
tlm_sync_enum retval;
int_addr_ptr delay = NULL;
</declaration>
<location id="id731">
<name>
init_location</name>
</location>
<location id="id735">
<urgent/>
</location>
<location id="id736">
<urgent/>
</location>
<location id="id738">
<urgent/>
</location>
<location id="id737">
<urgent/>
</location>
<location id="id740">
<urgent/>
</location>
<location id="id745">
</location>
<location id="id747">
<urgent/>
</location>
<location id="id749">
<urgent/>
</location>
<location id="id752">
<urgent/>
</location>
<location id="id751">
<urgent/>
</location>
<location id="id748">
<urgent/>
</location>
<location id="id733">
<urgent/>
</location>
<location id="id951">
<urgent/>
</location>
<location id="id1186">
<name>
mem_access_fail_45</name>
<urgent/>
</location>
<location id="id1187">
<name>
mem_access_fail_46</name>
<urgent/>
</location>
<init ref="id731"/>
<transition>
<source ref="id731"/>
<target ref="id735"/>
<label kind="synchronisation">
sendData$ctrl?
</label>
<label kind="assignment">
m_data_count++,
size = NULL</label>
<label kind="comments">
Update:
nodeID: 18557, file: tlm2_master_to_ahb.cpp, line: 426,
nodeID: 18639, file: tlm2_master_to_ahb.cpp, line: 429</label>
</transition>
<transition>
<source ref="id735"/>
<target ref="id736"/>
<label kind="guard">
addr_is_valid_data(current_trans)
</label>
<label kind="assignment">
size = dataMem[current_trans].burst_size</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 18659, file: tlm2_master_to_ahb.cpp, line: 430</label>
</transition>
<transition>
<source ref="id736"/>
<target ref="id738"/>
<label kind="guard">
unsigned_intMem[size] != 0
</label>
<label kind="comments">
Guard:
nodeID: 18702, file: tlm2_master_to_ahb.cpp, line: 435</label>
</transition>
<transition>
<source ref="id738"/>
<target ref="id737"/>
<label kind="guard">
addr_is_valid_data(current_trans) &amp;&amp; 
addr_is_valid_unsigned_int(size)
</label>
<label kind="assignment">
burst_len = dataMem[current_trans].data_length / unsigned_intMem[size]</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 18722, file: tlm2_master_to_ahb.cpp, line: 437</label>
</transition>
<transition>
<source ref="id736"/>
<target ref="id740"/>
<label kind="guard">
!(unsigned_intMem[size] != 0)
</label>
<label kind="comments">
Guard:
nodeID: 18702, file: tlm2_master_to_ahb.cpp, line: 435</label>
</transition>
<transition>
<source ref="id740"/>
<target ref="id737"/>
<label kind="assignment">
burst_len = 1</label>
<label kind="comments">
Update:
nodeID: 18758, file: tlm2_master_to_ahb.cpp, line: 442</label>
</transition>
<transition>
<source ref="id737"/>
<target ref="id951"/>
<label kind="assignment">
delay = allocate_static_and_init_int(1),
ph = allocate_static_and_init_int(42),
master_socket$nb_transport_fw$param$tran = current_trans,
master_socket$nb_transport_fw$param$phase = ph,
master_socket$nb_transport_fw$param$t = delay</label>
<label kind="comments">
Update:
nodeID: 18842, file: tlm2_master_to_ahb.cpp, line: 447,
nodeID: 18882, file: tlm2_master_to_ahb.cpp, line: 448,
nodeID: 18882, file: tlm2_master_to_ahb.cpp, line: 448,
nodeID: 18882, file: tlm2_master_to_ahb.cpp, line: 448,
nodeID: 18882, file: tlm2_master_to_ahb.cpp, line: 448</label>
</transition>
<transition>
<source ref="id747"/>
<target ref="id749"/>
<label kind="guard">
retval == TLM_UPDATED
</label>
<label kind="comments">
Guard:
nodeID: 18980, file: tlm2_master_to_ahb.cpp, line: 454</label>
</transition>
<transition>
<source ref="id749"/>
<target ref="id752"/>
<label kind="guard">
m_data_count == burst_len
</label>
<label kind="comments">
Guard:
nodeID: 19071, file: tlm2_master_to_ahb.cpp, line: 458</label>
</transition>
<transition>
<source ref="id752"/>
<target ref="id751"/>
<label kind="synchronisation">
b_transport_finished_ev$notify_imm!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id749"/>
<target ref="id751"/>
<label kind="guard">
!(m_data_count == burst_len)
</label>
<label kind="comments">
Guard:
nodeID: 19071, file: tlm2_master_to_ahb.cpp, line: 458</label>
</transition>
<transition>
<source ref="id751"/>
<target ref="id748"/>
<label kind="assignment">
m_data_pending = false</label>
<label kind="comments">
Update:
nodeID: 19095, file: tlm2_master_to_ahb.cpp, line: 462</label>
</transition>
<transition>
<source ref="id747"/>
<target ref="id748"/>
<label kind="guard">
retval == TLM_ACCEPTED
</label>
<label kind="comments">
Guard:
nodeID: 19107, file: tlm2_master_to_ahb.cpp, line: 466</label>
</transition>
<transition>
<source ref="id747"/>
<target ref="id748"/>
<label kind="guard">
!(retval == TLM_UPDATED) &amp;&amp; 
!(retval == TLM_ACCEPTED)
</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id733"/>
<target ref="id731"/>
<label kind="synchronisation">
sendData$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id951"/>
<target ref="id745"/>
<label kind="synchronisation">
master_socket$nb_transport_fw$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id745"/>
<target ref="id747"/>
<label kind="synchronisation">
master_socket$nb_transport_fw$ctrl?
</label>
<label kind="assignment">
master_socket$nb_transport_fw$param$tran = NULL,
master_socket$nb_transport_fw$param$phase = NULL,
master_socket$nb_transport_fw$param$t = NULL,
retval = master_socket$nb_transport_fw$return,
m_data_pending = true</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id748"/>
<target ref="id733"/>
<label kind="assignment">
empty_stack_int(delay),
empty_stack_int(ph)</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id735"/>
<target ref="id1186"/>
<label kind="guard">
!(addr_is_valid_data(current_trans))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id738"/>
<target ref="id1187"/>
<label kind="guard">
!(addr_is_valid_data(current_trans) &amp;&amp; 
addr_is_valid_unsigned_int(size))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
</template>
<template>
<name>
tlm2_master_to_ahb$startRequest</name>
<parameter>
int_addr_ptr &amp;master_socket$nb_transport_fw$param$phase, data_addr_ptr &amp;master_socket$nb_transport_fw$param$tran, chan &amp;master_socket$nb_transport_fw$ctrl, chan &amp;startRequest$ctrl, int_addr_ptr &amp;master_socket$nb_transport_fw$param$t, bool &amp;m_request_pending, tlm_sync_enum &amp;master_socket$nb_transport_fw$return, data_addr_ptr &amp;current_trans, unsigned_int &amp;m_txn_count, unsigned_int &amp;m_data_count</parameter>
<declaration>
int_addr_ptr m_trans_type = NULL;
unsigned_int_addr_ptr m_burst_size = NULL;
int_addr_ptr ph = NULL;
tlm_sync_enum retval;
int_addr_ptr delay = NULL;
</declaration>
<location id="id757">
<name>
init_location</name>
</location>
<location id="id762">
<urgent/>
</location>
<location id="id763">
<urgent/>
</location>
<location id="id764">
<urgent/>
</location>
<location id="id765">
<urgent/>
</location>
<location id="id766">
<urgent/>
</location>
<location id="id771">
</location>
<location id="id772">
<urgent/>
</location>
<location id="id774">
<urgent/>
</location>
<location id="id773">
<urgent/>
</location>
<location id="id775">
<urgent/>
</location>
<location id="id759">
<urgent/>
</location>
<location id="id1127">
<urgent/>
</location>
<location id="id1220">
<name>
mem_access_fail_79</name>
<urgent/>
</location>
<location id="id1221">
<name>
mem_access_fail_80</name>
<urgent/>
</location>
<location id="id1222">
<name>
mem_access_fail_81</name>
<urgent/>
</location>
<location id="id1223">
<name>
mem_access_fail_82</name>
<urgent/>
</location>
<init ref="id757"/>
<transition>
<source ref="id757"/>
<target ref="id762"/>
<label kind="synchronisation">
startRequest$ctrl?
</label>
<label kind="assignment">
delay = allocate_static_and_init_int(1),
m_trans_type = 1,
m_burst_size = NULL</label>
<label kind="comments">
Update:
nodeID: 19243, file: tlm2_master_to_ahb.cpp, line: 484,
nodeID: 19284, file: tlm2_master_to_ahb.cpp, line: 486,
nodeID: 19284, file: tlm2_master_to_ahb.cpp, line: 486</label>
</transition>
<transition>
<source ref="id762"/>
<target ref="id763"/>
<label kind="guard">
addr_is_valid_data(current_trans)
</label>
<label kind="assignment">
m_trans_type = dataMem[current_trans].trans_type</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 19325, file: tlm2_master_to_ahb.cpp, line: 490</label>
</transition>
<transition>
<source ref="id763"/>
<target ref="id764"/>
<label kind="guard">
addr_is_valid_int(m_trans_type)
</label>
<label kind="assignment">
intMem[m_trans_type] = 50</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 19351, file: tlm2_master_to_ahb.cpp, line: 491</label>
</transition>
<transition>
<source ref="id764"/>
<target ref="id765"/>
<label kind="guard">
addr_is_valid_data(current_trans)
</label>
<label kind="assignment">
m_burst_size = dataMem[current_trans].burst_size</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 19370, file: tlm2_master_to_ahb.cpp, line: 494</label>
</transition>
<transition>
<source ref="id765"/>
<target ref="id766"/>
<label kind="guard">
addr_is_valid_unsigned_int(m_burst_size)
</label>
<label kind="assignment">
unsigned_intMem[m_burst_size] = 1</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 19396, file: tlm2_master_to_ahb.cpp, line: 495</label>
</transition>
<transition>
<source ref="id766"/>
<target ref="id1127"/>
<label kind="assignment">
ph = allocate_static_and_init_int(BEGIN_REQ),
m_txn_count++,
m_data_count = 0,
master_socket$nb_transport_fw$param$tran = current_trans,
master_socket$nb_transport_fw$param$phase = ph,
master_socket$nb_transport_fw$param$t = delay</label>
<label kind="comments">
Update:
nodeID: 19414, file: tlm2_master_to_ahb.cpp, line: 497,
nodeID: 19438, file: tlm2_master_to_ahb.cpp, line: 498,
nodeID: 19438, file: tlm2_master_to_ahb.cpp, line: 498,
nodeID: 19438, file: tlm2_master_to_ahb.cpp, line: 498,
nodeID: 19438, file: tlm2_master_to_ahb.cpp, line: 498,
nodeID: 19438, file: tlm2_master_to_ahb.cpp, line: 498</label>
</transition>
<transition>
<source ref="id772"/>
<target ref="id774"/>
<label kind="guard">
retval == TLM_UPDATED
</label>
<label kind="comments">
Guard:
nodeID: 19767, file: tlm2_master_to_ahb.cpp, line: 509</label>
</transition>
<transition>
<source ref="id774"/>
<target ref="id773"/>
<label kind="assignment">
m_request_pending = false</label>
<label kind="comments">
Update:
nodeID: 19858, file: tlm2_master_to_ahb.cpp, line: 513</label>
</transition>
<transition>
<source ref="id772"/>
<target ref="id775"/>
<label kind="guard">
retval == TLM_ACCEPTED
</label>
<label kind="comments">
Guard:
nodeID: 19870, file: tlm2_master_to_ahb.cpp, line: 516</label>
</transition>
<transition>
<source ref="id775"/>
<target ref="id773"/>
<label kind="assignment">
m_request_pending = true</label>
<label kind="comments">
Update:
nodeID: 19961, file: tlm2_master_to_ahb.cpp, line: 520</label>
</transition>
<transition>
<source ref="id772"/>
<target ref="id773"/>
<label kind="guard">
!(retval == TLM_UPDATED) &amp;&amp; 
!(retval == TLM_ACCEPTED)
</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id759"/>
<target ref="id757"/>
<label kind="synchronisation">
startRequest$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id1127"/>
<target ref="id771"/>
<label kind="synchronisation">
master_socket$nb_transport_fw$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id771"/>
<target ref="id772"/>
<label kind="synchronisation">
master_socket$nb_transport_fw$ctrl?
</label>
<label kind="assignment">
master_socket$nb_transport_fw$param$tran = NULL,
master_socket$nb_transport_fw$param$phase = NULL,
master_socket$nb_transport_fw$param$t = NULL,
retval = master_socket$nb_transport_fw$return</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id773"/>
<target ref="id759"/>
<label kind="assignment">
empty_stack_int(delay),
empty_stack_int(ph)</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id762"/>
<target ref="id1220"/>
<label kind="guard">
!(addr_is_valid_data(current_trans))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id763"/>
<target ref="id1221"/>
<label kind="guard">
!(addr_is_valid_int(m_trans_type))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id764"/>
<target ref="id1222"/>
<label kind="guard">
!(addr_is_valid_data(current_trans))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id765"/>
<target ref="id1223"/>
<label kind="guard">
!(addr_is_valid_unsigned_int(m_burst_size))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
</template>
<template>
<name>
tlm2_master_to_ahb$thread0$sensitiveTemp</name>
<parameter>
broadcast chan &amp;sensitive, broadcast chan &amp;clk</parameter>
<declaration>
</declaration>
<location id="id783">
</location>
<location id="id784">
<committed/>
</location>
<init ref="id783"/>
<transition>
<source ref="id784"/>
<target ref="id783"/>
<label kind="synchronisation">
sensitive!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id783"/>
<target ref="id784"/>
<label kind="synchronisation">
clk?
</label>
<label kind="comments">
</label>
</transition>
</template>
<template>
<name>
tlm2_simple_master$clock_tick</name>
<parameter>
chan &amp;pos_clk_edge$notify_imm, chan &amp;clock_tick$ctrl</parameter>
<declaration>
</declaration>
<location id="id785">
<name>
init_location</name>
</location>
<location id="id786">
<urgent/>
</location>
<location id="id787">
<urgent/>
</location>
<init ref="id785"/>
<transition>
<source ref="id785"/>
<target ref="id786"/>
<label kind="synchronisation">
clock_tick$ctrl?
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id786"/>
<target ref="id787"/>
<label kind="synchronisation">
pos_clk_edge$notify_imm!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id787"/>
<target ref="id785"/>
<label kind="synchronisation">
clock_tick$ctrl!
</label>
<label kind="comments">
</label>
</transition>
</template>
<template>
<name>
tlm2_simple_master$thread0$sensitiveTemp</name>
<parameter>
broadcast chan &amp;sensitive, broadcast chan &amp;clk</parameter>
<declaration>
</declaration>
<location id="id869">
</location>
<location id="id870">
<committed/>
</location>
<init ref="id869"/>
<transition>
<source ref="id870"/>
<target ref="id869"/>
<label kind="synchronisation">
sensitive!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id869"/>
<target ref="id870"/>
<label kind="synchronisation">
clk?
</label>
<label kind="comments">
</label>
</transition>
</template>
<template>
<name>
tlm2_simple_master$thread1$sensitiveTemp</name>
<parameter>
broadcast chan &amp;sensitive</parameter>
<declaration>
</declaration>
<location id="id871">
</location>
<location id="id872">
<committed/>
</location>
<init ref="id871"/>
<transition>
<source ref="id872"/>
<target ref="id871"/>
<label kind="synchronisation">
sensitive!
</label>
<label kind="comments">
</label>
</transition>
</template>
<template>
<name>
tlm2_simple_master$thread_process</name>
<parameter>
broadcast chan &amp;pos_clk_edge$wait, tlmdata_addr_ptr &amp;init_sock$b_transport$param$tran, tlmdata_addr_ptr &amp;d, chan &amp;thread_process$ctrl, chan &amp;init_sock$b_transport$ctrl, int_addr_ptr &amp;init_sock$b_transport$param$t</parameter>
<declaration>
uint64 adr;
unsigned_int cmd;
unsigned_short burst_len;
unsigned_short number_of_slaves;
unsigned_int slave_addr_range;
unsigned_int_addr_ptr dataArr = NULL;
unsigned_int i;
int l;
unsigned_int_addr_ptr dptr = NULL;
int j;
int k;
int m;
int wait_clks;
int n;
int zero_delay;
int_addr_ptr delay = NULL;
</declaration>
<location id="id795">
<name>
init_location</name>
</location>
<location id="id804">
<urgent/>
</location>
<location id="id806">
<urgent/>
</location>
<location id="id808">
<urgent/>
</location>
<location id="id809">
<urgent/>
</location>
<location id="id810">
<urgent/>
</location>
<location id="id812">
<urgent/>
</location>
<location id="id813">
<urgent/>
</location>
<location id="id814">
<urgent/>
</location>
<location id="id817">
<urgent/>
</location>
<location id="id819">
<urgent/>
</location>
<location id="id818">
<urgent/>
</location>
<location id="id821">
<urgent/>
</location>
<location id="id823">
<urgent/>
</location>
<location id="id822">
<urgent/>
</location>
<location id="id825">
<urgent/>
</location>
<location id="id827">
<urgent/>
</location>
<location id="id829">
<urgent/>
</location>
<location id="id830">
<urgent/>
</location>
<location id="id831">
<urgent/>
</location>
<location id="id832">
<urgent/>
</location>
<location id="id833">
<urgent/>
</location>
<location id="id835">
<urgent/>
</location>
<location id="id837">
<urgent/>
</location>
<location id="id839">
<urgent/>
</location>
<location id="id840">
<urgent/>
</location>
<location id="id841">
<urgent/>
</location>
<location id="id838">
<urgent/>
</location>
<location id="id844">
<urgent/>
</location>
<location id="id846">
<urgent/>
</location>
<location id="id834">
<urgent/>
</location>
<location id="id836">
<urgent/>
</location>
<location id="id847">
<urgent/>
</location>
<location id="id851">
<urgent/>
</location>
<location id="id852">
</location>
<location id="id854">
<urgent/>
</location>
<location id="id856">
<urgent/>
</location>
<location id="id858">
<urgent/>
</location>
<location id="id853">
<urgent/>
</location>
<location id="id859">
<urgent/>
</location>
<location id="id863">
<urgent/>
</location>
<location id="id864">
<urgent/>
</location>
<location id="id867">
</location>
<location id="id868">
<urgent/>
</location>
<location id="id805">
<urgent/>
</location>
<location id="id797">
<urgent/>
</location>
<location id="id943">
<urgent/>
</location>
<location id="id946">
<urgent/>
</location>
<location id="id1176">
<name>
mem_access_fail_35</name>
<urgent/>
</location>
<location id="id1177">
<name>
mem_access_fail_36</name>
<urgent/>
</location>
<location id="id1178">
<name>
mem_access_fail_37</name>
<urgent/>
</location>
<location id="id1179">
<name>
mem_access_fail_38</name>
<urgent/>
</location>
<location id="id1180">
<name>
mem_access_fail_39</name>
<urgent/>
</location>
<location id="id1181">
<name>
mem_access_fail_40</name>
<urgent/>
</location>
<location id="id1182">
<name>
mem_access_fail_41</name>
<urgent/>
</location>
<location id="id1183">
<name>
mem_access_fail_42</name>
<urgent/>
</location>
<location id="id1184">
<name>
mem_access_fail_43</name>
<urgent/>
</location>
<location id="id1185">
<name>
mem_access_fail_44</name>
<urgent/>
</location>
<init ref="id795"/>
<transition>
<source ref="id795"/>
<target ref="id804"/>
<label kind="synchronisation">
thread_process$ctrl?
</label>
<label kind="assignment">
zero_delay = 0,
delay = allocate_static_and_init_int(0),
adr = 0,
cmd = TLM_IGNORE_COMMAND,
number_of_slaves = 2 + 0,
slave_addr_range = 3,
dataArr = allocate_static_arr_unsigned_int(3)</label>
<label kind="comments">
Update:
nodeID: 20081, file: tlm2_simple_master.cpp, line: 11,
nodeID: 20121, file: tlm2_simple_master.cpp, line: 12,
nodeID: 20121, file: tlm2_simple_master.cpp, line: 12,
nodeID: 20121, file: tlm2_simple_master.cpp, line: 12,
nodeID: 20121, file: tlm2_simple_master.cpp, line: 12,
nodeID: 20121, file: tlm2_simple_master.cpp, line: 12,
nodeID: 20121, file: tlm2_simple_master.cpp, line: 12</label>
</transition>
<transition>
<source ref="id804"/>
<target ref="id806"/>
<label kind="guard">
true
</label>
<label kind="comments">
Guard:
nodeID: 20275, file: tlm2_simple_master.cpp, line: 20</label>
</transition>
<transition>
<source ref="id806"/>
<target ref="id808"/>
<label kind="assignment">
i = 0</label>
<label kind="comments">
Update:
nodeID: 20293, file: tlm2_simple_master.cpp, line: 22</label>
</transition>
<transition>
<source ref="id808"/>
<target ref="id809"/>
<label kind="guard">
i &lt; slave_addr_range * number_of_slaves
</label>
<label kind="comments">
Guard:
nodeID: 20315, file: tlm2_simple_master.cpp, line: 22</label>
</transition>
<transition>
<source ref="id809"/>
<target ref="id812"/>
<label kind="assignment">
l = 0</label>
<label kind="comments">
Update:
nodeID: 20377, file: tlm2_simple_master.cpp, line: 24</label>
</transition>
<transition>
<source ref="id812"/>
<target ref="id813"/>
<label kind="guard">
l &lt; 2
</label>
<label kind="comments">
Guard:
nodeID: 20399, file: tlm2_simple_master.cpp, line: 24</label>
</transition>
<transition>
<source ref="id813"/>
<target ref="id817"/>
<label kind="assignment">
burst_len = 3,
dptr = dataArr,
adr = i % (number_of_slaves * slave_addr_range)</label>
<label kind="comments">
Update:
nodeID: 20433, file: tlm2_simple_master.cpp, line: 27,
nodeID: 20451, file: tlm2_simple_master.cpp, line: 28,
nodeID: 20451, file: tlm2_simple_master.cpp, line: 28</label>
</transition>
<transition>
<source ref="id817"/>
<target ref="id819"/>
<label kind="guard">
adr &gt; ((number_of_slaves * slave_addr_range) - burst_len)
</label>
<label kind="comments">
Guard:
nodeID: 20534, file: tlm2_simple_master.cpp, line: 36</label>
</transition>
<transition>
<source ref="id819"/>
<target ref="id818"/>
<label kind="assignment">
adr = (number_of_slaves * slave_addr_range) - burst_len</label>
<label kind="comments">
Update:
nodeID: 20582, file: tlm2_simple_master.cpp, line: 37</label>
</transition>
<transition>
<source ref="id817"/>
<target ref="id818"/>
<label kind="guard">
!(adr &gt; ((number_of_slaves * slave_addr_range) - burst_len))
</label>
<label kind="comments">
Guard:
nodeID: 20534, file: tlm2_simple_master.cpp, line: 36</label>
</transition>
<transition>
<source ref="id818"/>
<target ref="id821"/>
<label kind="guard">
addr_is_valid_int(delay)
</label>
<label kind="assignment">
intMem[delay] = 1</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 20626, file: tlm2_simple_master.cpp, line: 42</label>
</transition>
<transition>
<source ref="id821"/>
<target ref="id823"/>
<label kind="guard">
l == 0
</label>
<label kind="comments">
Guard:
nodeID: 20663, file: tlm2_simple_master.cpp, line: 47</label>
</transition>
<transition>
<source ref="id823"/>
<target ref="id822"/>
<label kind="assignment">
cmd = TLM_WRITE_COMMAND</label>
<label kind="comments">
Update:
nodeID: 20683, file: tlm2_simple_master.cpp, line: 48</label>
</transition>
<transition>
<source ref="id821"/>
<target ref="id825"/>
<label kind="guard">
!(l == 0)
</label>
<label kind="comments">
Guard:
nodeID: 20663, file: tlm2_simple_master.cpp, line: 47</label>
</transition>
<transition>
<source ref="id825"/>
<target ref="id827"/>
<label kind="guard">
l == 1
</label>
<label kind="comments">
Guard:
nodeID: 20705, file: tlm2_simple_master.cpp, line: 49</label>
</transition>
<transition>
<source ref="id827"/>
<target ref="id822"/>
<label kind="assignment">
cmd = TLM_READ_COMMAND</label>
<label kind="comments">
Update:
nodeID: 20725, file: tlm2_simple_master.cpp, line: 50</label>
</transition>
<transition>
<source ref="id825"/>
<target ref="id822"/>
<label kind="guard">
!(l == 1)
</label>
<label kind="comments">
Guard:
nodeID: 20705, file: tlm2_simple_master.cpp, line: 49</label>
</transition>
<transition>
<source ref="id822"/>
<target ref="id829"/>
<label kind="guard">
addr_is_valid_tlmdata(d)
</label>
<label kind="assignment">
tlmdataMem[d].data_ptr = dptr</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 20749, file: tlm2_simple_master.cpp, line: 53</label>
</transition>
<transition>
<source ref="id829"/>
<target ref="id830"/>
<label kind="guard">
addr_is_valid_tlmdata(d)
</label>
<label kind="assignment">
tlmdataMem[d].address = adr</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 20771, file: tlm2_simple_master.cpp, line: 54</label>
</transition>
<transition>
<source ref="id830"/>
<target ref="id831"/>
<label kind="guard">
addr_is_valid_tlmdata(d)
</label>
<label kind="assignment">
tlmdataMem[d].data_length = burst_len</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 20793, file: tlm2_simple_master.cpp, line: 55</label>
</transition>
<transition>
<source ref="id831"/>
<target ref="id832"/>
<label kind="guard">
addr_is_valid_tlmdata(d)
</label>
<label kind="assignment">
tlmdataMem[d].streaming_width = burst_len</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 20816, file: tlm2_simple_master.cpp, line: 56</label>
</transition>
<transition>
<source ref="id832"/>
<target ref="id833"/>
<label kind="guard">
addr_is_valid_tlmdata(d)
</label>
<label kind="assignment">
tlmdataMem[d].response_status = TLM_INCOMPLETE_RESPONSE</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 20838, file: tlm2_simple_master.cpp, line: 57</label>
</transition>
<transition>
<source ref="id833"/>
<target ref="id835"/>
<label kind="guard">
cmd == TLM_WRITE_COMMAND
</label>
<label kind="comments">
Guard:
nodeID: 20858, file: tlm2_simple_master.cpp, line: 60</label>
</transition>
<transition>
<source ref="id835"/>
<target ref="id837"/>
<label kind="guard">
addr_is_valid_tlmdata(d)
</label>
<label kind="assignment">
tlmdataMem[d].command = TLM_WRITE_COMMAND</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 20888, file: tlm2_simple_master.cpp, line: 61</label>
</transition>
<transition>
<source ref="id837"/>
<target ref="id839"/>
<label kind="assignment">
j = 0</label>
<label kind="comments">
Update:
nodeID: 20913, file: tlm2_simple_master.cpp, line: 63</label>
</transition>
<transition>
<source ref="id839"/>
<target ref="id840"/>
<label kind="guard">
j &lt; burst_len
</label>
<label kind="comments">
Guard:
nodeID: 20935, file: tlm2_simple_master.cpp, line: 63</label>
</transition>
<transition>
<source ref="id840"/>
<target ref="id841"/>
<label kind="guard">
addr_is_valid_unsigned_int(dataArr) &amp;&amp; 
addr_is_valid_unsigned_int(dataArr + j) &amp;&amp; 
is_arr_elem_unsigned_int(dataArr, j)
</label>
<label kind="assignment">
unsigned_intMem[dataArr + j] = 1</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 20979, file: tlm2_simple_master.cpp, line: 64</label>
</transition>
<transition>
<source ref="id841"/>
<target ref="id839"/>
<label kind="assignment">
j++</label>
<label kind="comments">
Update:
nodeID: 20953, file: tlm2_simple_master.cpp, line: 63</label>
</transition>
<transition>
<source ref="id839"/>
<target ref="id838"/>
<label kind="guard">
!(j &lt; burst_len)
</label>
<label kind="comments">
Guard:
nodeID: 20935, file: tlm2_simple_master.cpp, line: 63</label>
</transition>
<transition>
<source ref="id838"/>
<target ref="id844"/>
<label kind="assignment">
k = 0</label>
<label kind="comments">
Update:
nodeID: 21074, file: tlm2_simple_master.cpp, line: 69</label>
</transition>
<transition>
<source ref="id844"/>
<target ref="id846"/>
<label kind="guard">
k &lt; burst_len
</label>
<label kind="comments">
Guard:
nodeID: 21096, file: tlm2_simple_master.cpp, line: 69</label>
</transition>
<transition>
<source ref="id846"/>
<target ref="id844"/>
<label kind="assignment">
k++</label>
<label kind="comments">
Update:
nodeID: 21114, file: tlm2_simple_master.cpp, line: 69</label>
</transition>
<transition>
<source ref="id844"/>
<target ref="id834"/>
<label kind="guard">
!(k &lt; burst_len)
</label>
<label kind="comments">
Guard:
nodeID: 21096, file: tlm2_simple_master.cpp, line: 69</label>
</transition>
<transition>
<source ref="id833"/>
<target ref="id836"/>
<label kind="guard">
cmd == TLM_READ_COMMAND
</label>
<label kind="comments">
Guard:
nodeID: 21168, file: tlm2_simple_master.cpp, line: 75</label>
</transition>
<transition>
<source ref="id836"/>
<target ref="id834"/>
<label kind="guard">
addr_is_valid_tlmdata(d)
</label>
<label kind="assignment">
tlmdataMem[d].command = TLM_READ_COMMAND</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 21198, file: tlm2_simple_master.cpp, line: 76</label>
</transition>
<transition>
<source ref="id833"/>
<target ref="id847"/>
<label kind="guard">
!(cmd == TLM_WRITE_COMMAND) &amp;&amp; 
!(cmd == TLM_READ_COMMAND)
</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id847"/>
<target ref="id834"/>
<label kind="guard">
addr_is_valid_tlmdata(d)
</label>
<label kind="assignment">
tlmdataMem[d].command = TLM_IGNORE_COMMAND</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: 21228, file: tlm2_simple_master.cpp, line: 80</label>
</transition>
<transition>
<source ref="id851"/>
<target ref="id854"/>
<label kind="guard">
cmd == TLM_READ_COMMAND
</label>
<label kind="comments">
Guard:
nodeID: 21296, file: tlm2_simple_master.cpp, line: 88</label>
</transition>
<transition>
<source ref="id854"/>
<target ref="id856"/>
<label kind="assignment">
m = 0</label>
<label kind="comments">
Update:
nodeID: 21394, file: tlm2_simple_master.cpp, line: 91</label>
</transition>
<transition>
<source ref="id856"/>
<target ref="id858"/>
<label kind="guard">
m &lt; burst_len
</label>
<label kind="comments">
Guard:
nodeID: 21416, file: tlm2_simple_master.cpp, line: 91</label>
</transition>
<transition>
<source ref="id858"/>
<target ref="id856"/>
<label kind="assignment">
m++</label>
<label kind="comments">
Update:
nodeID: 21434, file: tlm2_simple_master.cpp, line: 91</label>
</transition>
<transition>
<source ref="id856"/>
<target ref="id853"/>
<label kind="guard">
!(m &lt; burst_len)
</label>
<label kind="comments">
Guard:
nodeID: 21416, file: tlm2_simple_master.cpp, line: 91</label>
</transition>
<transition>
<source ref="id851"/>
<target ref="id853"/>
<label kind="guard">
!(cmd == TLM_READ_COMMAND)
</label>
<label kind="comments">
Guard:
nodeID: 21296, file: tlm2_simple_master.cpp, line: 88</label>
</transition>
<transition>
<source ref="id853"/>
<target ref="id859"/>
<label kind="guard">
tlmdataMem[d].response_status == TLM_OK_RESPONSE
</label>
<label kind="comments">
Guard:
nodeID: 21498, file: tlm2_simple_master.cpp, line: 98</label>
</transition>
<transition>
<source ref="id853"/>
<target ref="id859"/>
<label kind="guard">
!(tlmdataMem[d].response_status == TLM_OK_RESPONSE)
</label>
<label kind="comments">
Guard:
nodeID: 21498, file: tlm2_simple_master.cpp, line: 98</label>
</transition>
<transition>
<source ref="id859"/>
<target ref="id863"/>
<label kind="assignment">
wait_clks = 20,
n = 0</label>
<label kind="comments">
Update:
nodeID: 21584, file: tlm2_simple_master.cpp, line: 103,
nodeID: 21688, file: tlm2_simple_master.cpp, line: 106</label>
</transition>
<transition>
<source ref="id863"/>
<target ref="id864"/>
<label kind="guard">
n &lt; wait_clks
</label>
<label kind="comments">
Guard:
nodeID: 21710, file: tlm2_simple_master.cpp, line: 106</label>
</transition>
<transition>
<source ref="id868"/>
<target ref="id863"/>
<label kind="synchronisation">
activate?
</label>
<label kind="assignment">
n++</label>
<label kind="comments">
Update:
nodeID: 21728, file: tlm2_simple_master.cpp, line: 106</label>
</transition>
<transition>
<source ref="id863"/>
<target ref="id814"/>
<label kind="guard">
!(n &lt; wait_clks)
</label>
<label kind="comments">
Guard:
nodeID: 21710, file: tlm2_simple_master.cpp, line: 106</label>
</transition>
<transition>
<source ref="id814"/>
<target ref="id812"/>
<label kind="assignment">
l++</label>
<label kind="comments">
Update:
nodeID: 20417, file: tlm2_simple_master.cpp, line: 24</label>
</transition>
<transition>
<source ref="id812"/>
<target ref="id810"/>
<label kind="guard">
!(l &lt; 2)
</label>
<label kind="comments">
Guard:
nodeID: 20399, file: tlm2_simple_master.cpp, line: 24</label>
</transition>
<transition>
<source ref="id810"/>
<target ref="id808"/>
<label kind="assignment">
i = i + 3</label>
<label kind="comments">
Update:
nodeID: 20343, file: tlm2_simple_master.cpp, line: 22</label>
</transition>
<transition>
<source ref="id808"/>
<target ref="id804"/>
<label kind="guard">
!(i &lt; slave_addr_range * number_of_slaves)
</label>
<label kind="comments">
Guard:
nodeID: 20315, file: tlm2_simple_master.cpp, line: 22</label>
</transition>
<transition>
<source ref="id804"/>
<target ref="id805"/>
<label kind="guard">
!(true)
</label>
<label kind="comments">
Guard:
nodeID: 20275, file: tlm2_simple_master.cpp, line: 20</label>
</transition>
<transition>
<source ref="id797"/>
<target ref="id795"/>
<label kind="synchronisation">
thread_process$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id834"/>
<target ref="id943"/>
<label kind="assignment">
init_sock$b_transport$param$tran = d,
init_sock$b_transport$param$t = delay</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id943"/>
<target ref="id852"/>
<label kind="synchronisation">
init_sock$b_transport$ctrl!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id852"/>
<target ref="id851"/>
<label kind="synchronisation">
init_sock$b_transport$ctrl?
</label>
<label kind="assignment">
init_sock$b_transport$param$tran = NULL,
init_sock$b_transport$param$t = NULL</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id864"/>
<target ref="id946"/>
<label kind="assignment">
readyprocs--</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id946"/>
<target ref="id867"/>
<label kind="synchronisation">
deactivate!
</label>
<label kind="comments">
</label>
</transition>
<transition>
<source ref="id867"/>
<target ref="id868"/>
<label kind="synchronisation">
pos_clk_edge$wait?
</label>
<label kind="assignment">
readyprocs++</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id805"/>
<target ref="id797"/>
<label kind="assignment">
empty_stack_arr_unsigned_int(dataArr),
empty_stack_int(delay)</label>
<label kind="comments">
Update:
nodeID: -1, file: , line: -1,
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id818"/>
<target ref="id1176"/>
<label kind="guard">
!(addr_is_valid_int(delay))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id822"/>
<target ref="id1177"/>
<label kind="guard">
!(addr_is_valid_tlmdata(d))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id829"/>
<target ref="id1178"/>
<label kind="guard">
!(addr_is_valid_tlmdata(d))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id830"/>
<target ref="id1179"/>
<label kind="guard">
!(addr_is_valid_tlmdata(d))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id831"/>
<target ref="id1180"/>
<label kind="guard">
!(addr_is_valid_tlmdata(d))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id832"/>
<target ref="id1181"/>
<label kind="guard">
!(addr_is_valid_tlmdata(d))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id835"/>
<target ref="id1182"/>
<label kind="guard">
!(addr_is_valid_tlmdata(d))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id840"/>
<target ref="id1183"/>
<label kind="guard">
!(addr_is_valid_unsigned_int(dataArr) &amp;&amp; 
addr_is_valid_unsigned_int(dataArr + j) &amp;&amp; 
is_arr_elem_unsigned_int(dataArr, j))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id836"/>
<target ref="id1184"/>
<label kind="guard">
!(addr_is_valid_tlmdata(d))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
<transition>
<source ref="id847"/>
<target ref="id1185"/>
<label kind="guard">
!(addr_is_valid_tlmdata(d))
</label>
<label kind="assignment">
MEM_ERR_ACCESS_FAIL = true</label>
<label kind="comments">
Guard:
nodeID: -1, file: , line: -1Update:
nodeID: -1, file: , line: -1</label>
</transition>
</template>
<system>
AHB_Bus$ahb_simple_bus$ahb_simple_bus$arbitrate = ahb_simple_bus$arbitrate(AHB_Bus$m_InService_Register, AHB_Bus$m_BusRequest_Register, AHB_Bus$current_req_master, AHB_Bus$ahb_simple_bus$arbitrate$ctrl);
AHB_Bus$ahb_simple_bus$ahb_simple_bus$bus_grant = ahb_simple_bus$bus_grant(AHB_Bus$m_grant_time, AHB_M2$tlm2_master_to_ahb$nb_transport_bw$param$tran, AHB_Bus$m_grant_txn, AHB_M1$tlm2_master_to_ahb$nb_transport_bw$ctrl, AHB_M1$tlm2_master_to_ahb$nb_transport_bw$return, AHB_M1$tlm2_master_to_ahb$nb_transport_bw$param$t, AHB_Bus$m_grant_phase, AHB_M1$tlm2_master_to_ahb$nb_transport_bw$param$tran, AHB_M2$tlm2_master_to_ahb$nb_transport_bw$param$phase, AHB_Bus$ahb_simple_bus$bus_grant$ctrl, AHB_M2$tlm2_master_to_ahb$nb_transport_bw$ctrl, AHB_Bus$current_req_master, AHB_M2$tlm2_master_to_ahb$nb_transport_bw$param$t, AHB_M2$tlm2_master_to_ahb$nb_transport_bw$return, AHB_Bus$ahb_simple_bus$arbitrate$ctrl, AHB_M1$tlm2_master_to_ahb$nb_transport_bw$param$phase);
AHB_Bus$ahb_simple_bus$ahb_simple_bus$bus_ungrant = ahb_simple_bus$bus_ungrant(AHB_Bus$m_grant_time, AHB_M2$tlm2_master_to_ahb$nb_transport_bw$param$tran, AHB_Bus$m_grant_txn, AHB_M1$tlm2_master_to_ahb$nb_transport_bw$ctrl, AHB_M1$tlm2_master_to_ahb$nb_transport_bw$return, AHB_M1$tlm2_master_to_ahb$nb_transport_bw$param$t, AHB_Bus$m_grant_phase, AHB_M1$tlm2_master_to_ahb$nb_transport_bw$param$tran, AHB_M2$tlm2_master_to_ahb$nb_transport_bw$param$phase, AHB_Bus$m_InService_Register, AHB_Bus$bus_grant_ev$notify_imm, AHB_M2$tlm2_master_to_ahb$nb_transport_bw$ctrl, AHB_Bus$outstanding_txn_count, AHB_Bus$ahb_simple_bus$bus_ungrant$ctrl, AHB_Bus$m_BusRequest_Register, AHB_Bus$current_req_master, AHB_M2$tlm2_master_to_ahb$nb_transport_bw$param$t, AHB_M2$tlm2_master_to_ahb$nb_transport_bw$return, AHB_M1$tlm2_master_to_ahb$nb_transport_bw$param$phase);
AHB_Bus$ahb_simple_bus$ahb_simple_bus$get_index = ahb_simple_bus$get_index(AHB_Bus$ahb_simple_bus$get_index$ctrl, AHB_Bus$ahb_simple_bus$get_index$param$address, AHB_Bus$ahb_simple_bus$get_index$return);
AHB_Bus$ahb_simple_bus$ahb_simple_bus$nb_transport_bw = ahb_simple_bus$nb_transport_bw(AHB_M2$tlm2_master_to_ahb$nb_transport_bw$param$tran, AHB_M1$tlm2_master_to_ahb$nb_transport_bw$ctrl, AHB_M1$tlm2_master_to_ahb$nb_transport_bw$return, AHB_Bus$m_default_size, AHB_M1$tlm2_master_to_ahb$nb_transport_bw$param$t, AHB_Bus$m_req_sample_time, AHB_Bus$m_drop_cycle, AHB_M1$tlm2_master_to_ahb$nb_transport_bw$param$tran, AHB_M2$tlm2_master_to_ahb$nb_transport_bw$param$phase, AHB_Bus$ahb_simple_bus$nb_transport_bw$param$t, AHB_Bus$current_data_master, AHB_Bus$ahb_simple_bus$nb_transport_bw$return, AHB_Bus$data_count, AHB_Bus$end_data_ev$notify_t, AHB_Bus$ahb_simple_bus$nb_transport_bw$ctrl, AHB_M2$tlm2_master_to_ahb$nb_transport_bw$ctrl, AHB_Bus$end_data_ev$notify, AHB_M2$tlm2_master_to_ahb$nb_transport_bw$param$t, AHB_M2$tlm2_master_to_ahb$nb_transport_bw$return, AHB_Bus$ahb_simple_bus$nb_transport_bw$param$phase, AHB_Bus$outstanding_data, AHB_Bus$ahb_simple_bus$nb_transport_bw$param$tran, AHB_M1$tlm2_master_to_ahb$nb_transport_bw$param$phase);
AHB_Bus$ahb_simple_bus$ahb_simple_bus$nb_transport_fw = ahb_simple_bus$nb_transport_fw(AHB_Bus$ahb_simple_bus$get_index$ctrl, AHB_S2$ahb_simple_mem$nb_transport_fw$return, AHB_Bus$m_default_size, AHB_Bus$bus_grant_ev$notify_t, AHB_Bus$ahb_simple_bus$nb_transport_fw$param$t, AHB_S1$ahb_simple_mem$nb_transport_fw$param$phase, AHB_Bus$ahb_simple_bus$nb_transport_fw$return, AHB_Bus$ahb_simple_bus$nb_transport_fw$param$tran, AHB_Bus$data_count, AHB_S1$ahb_simple_mem$nb_transport_fw$ctrl, AHB_Bus$ahb_simple_bus$nb_transport_bw$ctrl, AHB_Bus$m_outstanding_req_type, AHB_Bus$bus_ungrant_ev$notify, AHB_Bus$outstanding_txn_count, AHB_S2$ahb_simple_mem$nb_transport_fw$ctrl, AHB_Bus$m_bus_req_sample_time, AHB_Bus$outstanding_data, AHB_Bus$ahb_simple_bus$get_index$return, AHB_Bus$ahb_simple_bus$nb_transport_bw$param$tran, AHB_S1$ahb_simple_mem$nb_transport_fw$param$t, AHB_Bus$bus_grant_ev$notify, AHB_Bus$ahb_simple_bus$nb_transport_fw$ctrl, AHB_Bus$ahb_simple_bus$get_index$param$address, AHB_Bus$ahb_simple_bus$nb_transport_bw$param$t, AHB_Bus$bus_ungrant_ev$notify_t, AHB_Bus$current_data_master, AHB_S2$ahb_simple_mem$nb_transport_fw$param$t, AHB_Bus$ahb_simple_bus$nb_transport_fw$param$phase, AHB_Bus$outstanding_req, AHB_Bus$m_BusRequest_Register, AHB_Bus$current_req_master, AHB_S1$ahb_simple_mem$nb_transport_fw$return, AHB_Bus$ahb_simple_bus$nb_transport_bw$param$phase, AHB_S2$ahb_simple_mem$nb_transport_fw$param$phase, AHB_S2$ahb_simple_mem$nb_transport_fw$param$tran, AHB_S1$ahb_simple_mem$nb_transport_fw$param$tran);
AHB_Bus$ahb_simple_bus$ahb_simple_bus$pendingReqProcess = ahb_simple_bus$pendingReqProcess(AHB_Bus$ahb_simple_bus$get_index$ctrl, AHB_S2$ahb_simple_mem$nb_transport_fw$return, AHB_M1$tlm2_master_to_ahb$nb_transport_bw$ctrl, AHB_M2$tlm2_master_to_ahb$nb_transport_bw$param$phase, AHB_S1$ahb_simple_mem$nb_transport_fw$param$phase, AHB_Bus$data_count, AHB_S1$ahb_simple_mem$nb_transport_fw$ctrl, AHB_Bus$m_outstanding_req_type, AHB_Bus$bus_ungrant_ev$notify, AHB_Bus$outstanding_txn_count, AHB_Bus$ahb_simple_bus$pendingReqProcess$ctrl, AHB_M2$tlm2_master_to_ahb$nb_transport_bw$param$t, AHB_S2$ahb_simple_mem$nb_transport_fw$ctrl, AHB_Bus$m_bus_req_sample_time, AHB_Bus$outstanding_data, AHB_Bus$ahb_simple_bus$get_index$return, AHB_M2$tlm2_master_to_ahb$nb_transport_bw$param$tran, AHB_S1$ahb_simple_mem$nb_transport_fw$param$t, AHB_M1$tlm2_master_to_ahb$nb_transport_bw$return, AHB_M1$tlm2_master_to_ahb$nb_transport_bw$param$t, AHB_Bus$ahb_simple_bus$get_index$param$address, AHB_Bus$m_drop_cycle, AHB_M1$tlm2_master_to_ahb$nb_transport_bw$param$tran, AHB_Bus$bus_ungrant_ev$notify_t, AHB_Bus$current_data_master, AHB_S2$ahb_simple_mem$nb_transport_fw$param$t, AHB_M2$tlm2_master_to_ahb$nb_transport_bw$ctrl, AHB_Bus$outstanding_req, AHB_Bus$current_req_master, AHB_S1$ahb_simple_mem$nb_transport_fw$return, AHB_M2$tlm2_master_to_ahb$nb_transport_bw$return, AHB_S2$ahb_simple_mem$nb_transport_fw$param$phase, AHB_S2$ahb_simple_mem$nb_transport_fw$param$tran, AHB_S1$ahb_simple_mem$nb_transport_fw$param$tran, AHB_M1$tlm2_master_to_ahb$nb_transport_bw$param$phase);
AHB_Bus$bus_grant_ev = SCEventTemplate(AHB_Bus$bus_grant_ev$notify_imm, AHB_Bus$bus_grant_ev$notify_t, AHB_Bus$bus_grant_ev$notify, AHB_Bus$bus_grant_ev$wait);
AHB_Bus$bus_ungrant_ev = SCEventTemplate(AHB_Bus$bus_ungrant_ev$notify_imm, AHB_Bus$bus_ungrant_ev$notify_t, AHB_Bus$bus_ungrant_ev$notify, AHB_Bus$bus_ungrant_ev$wait);
AHB_Bus$end_data_ev = SCEventTemplate(AHB_Bus$end_data_ev$notify_imm, AHB_Bus$end_data_ev$notify_t, AHB_Bus$end_data_ev$notify, AHB_Bus$end_data_ev$wait);
AHB_Bus$thread0$sensitive = ahb_simple_bus$thread0$sensitiveTemp(AHB_Bus$bus_ungrant_ev$wait, AHB_Bus$thread0$sensitivechan);
AHB_Bus$thread0$starter = MethodStarterNoInitTemplate(AHB_Bus$ahb_simple_bus$bus_ungrant$ctrl, AHB_Bus$thread0$sensitivechan);
AHB_Bus$thread1$sensitive = ahb_simple_bus$thread1$sensitiveTemp(AHB_Bus$bus_grant_ev$wait, AHB_Bus$thread1$sensitivechan);
AHB_Bus$thread1$starter = MethodStarterNoInitTemplate(AHB_Bus$ahb_simple_bus$bus_grant$ctrl, AHB_Bus$thread1$sensitivechan);
AHB_Bus$thread2$sensitive = ahb_simple_bus$thread2$sensitiveTemp(AHB_Bus$end_data_ev$wait, AHB_Bus$thread2$sensitivechan);
AHB_Bus$thread2$starter = MethodStarterNoInitTemplate(AHB_Bus$ahb_simple_bus$pendingReqProcess$ctrl, AHB_Bus$thread2$sensitivechan);
AHB_M1$b_transport_finished_ev = SCEventTemplate(AHB_M1$b_transport_finished_ev$notify_imm, AHB_M1$b_transport_finished_ev$notify_t, AHB_M1$b_transport_finished_ev$notify, AHB_M1$b_transport_finished_ev$wait);
AHB_M1$m_peq$peq_element0 = peq_element$data(AHB_M1$tlm2_master_to_ahb$peq_cb$param$tran, AHB_M1$m_peq$peq_element$param$trans, AHB_M1$m_peq$fetch$peq_fetch$ctrl, AHB_M1$tlm2_master_to_ahb$peq_cb$param$phase, AHB_M1$m_peq$peq_element$param$phase, AHB_M1$m_peq$peq_element$param$delay, AHB_M1$m_peq$notify$peqInUse[0], AHB_M1$m_peq$notify$peq_element$ctrl[0]);
AHB_M1$m_peq$peq_element1 = peq_element$data(AHB_M1$tlm2_master_to_ahb$peq_cb$param$tran, AHB_M1$m_peq$peq_element$param$trans, AHB_M1$m_peq$fetch$peq_fetch$ctrl, AHB_M1$tlm2_master_to_ahb$peq_cb$param$phase, AHB_M1$m_peq$peq_element$param$phase, AHB_M1$m_peq$peq_element$param$delay, AHB_M1$m_peq$notify$peqInUse[1], AHB_M1$m_peq$notify$peq_element$ctrl[1]);
AHB_M1$m_peq$peq_element2 = peq_element$data(AHB_M1$tlm2_master_to_ahb$peq_cb$param$tran, AHB_M1$m_peq$peq_element$param$trans, AHB_M1$m_peq$fetch$peq_fetch$ctrl, AHB_M1$tlm2_master_to_ahb$peq_cb$param$phase, AHB_M1$m_peq$peq_element$param$phase, AHB_M1$m_peq$peq_element$param$delay, AHB_M1$m_peq$notify$peqInUse[2], AHB_M1$m_peq$notify$peq_element$ctrl[2]);
AHB_M1$m_peq$peq_element3 = peq_element$data(AHB_M1$tlm2_master_to_ahb$peq_cb$param$tran, AHB_M1$m_peq$peq_element$param$trans, AHB_M1$m_peq$fetch$peq_fetch$ctrl, AHB_M1$tlm2_master_to_ahb$peq_cb$param$phase, AHB_M1$m_peq$peq_element$param$phase, AHB_M1$m_peq$peq_element$param$delay, AHB_M1$m_peq$notify$peqInUse[3], AHB_M1$m_peq$notify$peq_element$ctrl[3]);
AHB_M1$m_peq$peq_fetch = peq_fetch$data(AHB_M1$tlm2_master_to_ahb$peq_cb$ctrl, AHB_M1$m_peq$fetch$peq_fetch$ctrl);
AHB_M1$m_peq$peq_notify = peq_notify$data$4(AHB_M1$m_peq$notify$peqInUse, AHB_M1$m_peq$notify$peq_notify$ctrl, AHB_M1$m_peq$notify$peq_element$ctrl);
AHB_M1$thread0$sensitive = tlm2_master_to_ahb$thread0$sensitiveTemp(AHB_M1$thread0$sensitivechan, clk$change$wait);
AHB_M1$thread0$starter = MethodStarterNoInitTemplate(AHB_M1$tlm2_master_to_ahb$clock_tick$ctrl, AHB_M1$thread0$sensitivechan);
AHB_M1$tlm2_master_to_ahb$tlm2_master_to_ahb$busGranted = tlm2_master_to_ahb$busGranted(AHB_M1$tlm2_master_to_ahb$startRequest$ctrl, AHB_M1$tlm2_master_to_ahb$busGranted$ctrl, AHB_M1$current_trans, AHB_M1$tlm2_master_to_ahb$resumeRequest$ctrl, AHB_M1$m_txn_count);
AHB_M1$tlm2_master_to_ahb$tlm2_master_to_ahb$busNotGranted = tlm2_master_to_ahb$busNotGranted(AHB_Bus$ahb_simple_bus$nb_transport_fw$param$phase, AHB_Bus$ahb_simple_bus$nb_transport_fw$param$tran, AHB_Bus$ahb_simple_bus$nb_transport_fw$ctrl, AHB_Bus$ahb_simple_bus$nb_transport_fw$param$t, AHB_M1$tlm2_master_to_ahb$busNotGranted$ctrl, AHB_Bus$ahb_simple_bus$nb_transport_fw$return, AHB_M1$current_trans, AHB_M1$m_bus_req_pending, AHB_M1$m_bus_granted);
AHB_M1$tlm2_master_to_ahb$tlm2_master_to_ahb$clock_tick = tlm2_master_to_ahb$clock_tick(AHB_M1$tlm2_master_to_ahb$requestProcess$ctrl, AHB_M1$tlm2_master_to_ahb$clock_tick$ctrl, AHB_M1$tlm2_master_to_ahb$dataProcess$ctrl);
AHB_M1$tlm2_master_to_ahb$tlm2_master_to_ahb$dataProcess = tlm2_master_to_ahb$dataProcess(AHB_M1$current_DataLength, AHB_M1$tlm2_master_to_ahb$sendData$ctrl, AHB_M1$tlm2_master_to_ahb$dataProcess$ctrl, AHB_M1$m_restart_pending_req, AHB_M1$m_request_pending, AHB_M1$m_data_pending, AHB_M1$current_trans, AHB_M1$m_txn_count, AHB_M1$m_data_count);
AHB_M1$tlm2_master_to_ahb$tlm2_master_to_ahb$nb_transport_bw = tlm2_master_to_ahb$nb_transport_bw(AHB_M1$m_peq$notify$peq_notify$ctrl, AHB_M1$m_peq$peq_element$param$delay, AHB_M1$tlm2_master_to_ahb$nb_transport_bw$param$t, AHB_M1$tlm2_master_to_ahb$nb_transport_bw$return, AHB_M1$tlm2_master_to_ahb$nb_transport_bw$ctrl, AHB_M1$m_peq$peq_element$param$phase, AHB_M1$tlm2_master_to_ahb$nb_transport_bw$param$phase, AHB_M1$m_peq$peq_element$param$trans, AHB_M1$tlm2_master_to_ahb$nb_transport_bw$param$tran);
AHB_M1$tlm2_master_to_ahb$tlm2_master_to_ahb$peq_cb = tlm2_master_to_ahb$peq_cb(AHB_M1$tlm2_master_to_ahb$requestProcess$ctrl, AHB_M1$b_transport_finished_ev$notify_imm, AHB_M1$tlm2_master_to_ahb$peq_cb$param$phase, AHB_M1$tlm2_master_to_ahb$dataProcess$ctrl, AHB_M1$m_restart_pending_req, AHB_M1$m_request_pending, AHB_M1$tlm2_master_to_ahb$peq_cb$ctrl, AHB_M1$tlm2_master_to_ahb$receiveData$ctrl, AHB_M1$tlm2_master_to_ahb$peq_cb$param$tran, AHB_M1$m_data_pending, AHB_M1$current_trans, AHB_M1$m_txn_count, AHB_M1$m_bus_req_pending, AHB_M1$m_bus_granted, AHB_M1$m_data_count, AHB_M1$tlm2_master_to_ahb$receiveData$param$tran);
AHB_M1$tlm2_master_to_ahb$tlm2_master_to_ahb$receiveData = tlm2_master_to_ahb$receiveData(AHB_M1$b_transport_finished_ev$notify_imm, AHB_M1$tlm2_master_to_ahb$receiveData$ctrl, AHB_M1$m_data_pending, AHB_M1$m_data_count, AHB_M1$tlm2_master_to_ahb$receiveData$param$tran);
AHB_M1$tlm2_master_to_ahb$tlm2_master_to_ahb$requestProcess = tlm2_master_to_ahb$requestProcess(AHB_M1$tlm2_master_to_ahb$requestProcess$ctrl, AHB_M1$current_DataLength, AHB_M1$tlm2_master_to_ahb$busNotGranted$ctrl, AHB_M1$tlm2_master_to_ahb$busGranted$ctrl, AHB_M1$current_trans, AHB_M1$m_txn_count, AHB_M1$m_bus_granted);
AHB_M1$tlm2_master_to_ahb$tlm2_master_to_ahb$resumeRequest = tlm2_master_to_ahb$resumeRequest(AHB_Bus$ahb_simple_bus$nb_transport_fw$param$phase, AHB_Bus$ahb_simple_bus$nb_transport_fw$param$tran, AHB_Bus$ahb_simple_bus$nb_transport_fw$ctrl, AHB_Bus$ahb_simple_bus$nb_transport_fw$param$t, AHB_M1$m_restart_pending_req, AHB_M1$m_request_pending, AHB_M1$m_data_pending, AHB_Bus$ahb_simple_bus$nb_transport_fw$return, AHB_M1$current_trans, AHB_M1$tlm2_master_to_ahb$resumeRequest$ctrl, AHB_M1$m_txn_count);
AHB_M1$tlm2_master_to_ahb$tlm2_master_to_ahb$sendData = tlm2_master_to_ahb$sendData(AHB_Bus$ahb_simple_bus$nb_transport_fw$param$phase, AHB_M1$b_transport_finished_ev$notify_imm, AHB_Bus$ahb_simple_bus$nb_transport_fw$param$tran, AHB_M1$tlm2_master_to_ahb$sendData$ctrl, AHB_Bus$ahb_simple_bus$nb_transport_fw$ctrl, AHB_Bus$ahb_simple_bus$nb_transport_fw$param$t, AHB_M1$m_data_pending, AHB_Bus$ahb_simple_bus$nb_transport_fw$return, AHB_M1$current_trans, AHB_M1$m_data_count);
AHB_M1$tlm2_master_to_ahb$tlm2_master_to_ahb$startRequest = tlm2_master_to_ahb$startRequest(AHB_Bus$ahb_simple_bus$nb_transport_fw$param$phase, AHB_Bus$ahb_simple_bus$nb_transport_fw$param$tran, AHB_Bus$ahb_simple_bus$nb_transport_fw$ctrl, AHB_M1$tlm2_master_to_ahb$startRequest$ctrl, AHB_Bus$ahb_simple_bus$nb_transport_fw$param$t, AHB_M1$m_request_pending, AHB_Bus$ahb_simple_bus$nb_transport_fw$return, AHB_M1$current_trans, AHB_M1$m_txn_count, AHB_M1$m_data_count);
AHB_M2$b_transport_finished_ev = SCEventTemplate(AHB_M2$b_transport_finished_ev$notify_imm, AHB_M2$b_transport_finished_ev$notify_t, AHB_M2$b_transport_finished_ev$notify, AHB_M2$b_transport_finished_ev$wait);
AHB_M2$m_peq$peq_element0 = peq_element$data(AHB_M2$tlm2_master_to_ahb$peq_cb$param$tran, AHB_M2$m_peq$peq_element$param$trans, AHB_M2$m_peq$fetch$peq_fetch$ctrl, AHB_M2$tlm2_master_to_ahb$peq_cb$param$phase, AHB_M2$m_peq$peq_element$param$phase, AHB_M2$m_peq$peq_element$param$delay, AHB_M2$m_peq$notify$peqInUse[0], AHB_M2$m_peq$notify$peq_element$ctrl[0]);
AHB_M2$m_peq$peq_element1 = peq_element$data(AHB_M2$tlm2_master_to_ahb$peq_cb$param$tran, AHB_M2$m_peq$peq_element$param$trans, AHB_M2$m_peq$fetch$peq_fetch$ctrl, AHB_M2$tlm2_master_to_ahb$peq_cb$param$phase, AHB_M2$m_peq$peq_element$param$phase, AHB_M2$m_peq$peq_element$param$delay, AHB_M2$m_peq$notify$peqInUse[1], AHB_M2$m_peq$notify$peq_element$ctrl[1]);
AHB_M2$m_peq$peq_element2 = peq_element$data(AHB_M2$tlm2_master_to_ahb$peq_cb$param$tran, AHB_M2$m_peq$peq_element$param$trans, AHB_M2$m_peq$fetch$peq_fetch$ctrl, AHB_M2$tlm2_master_to_ahb$peq_cb$param$phase, AHB_M2$m_peq$peq_element$param$phase, AHB_M2$m_peq$peq_element$param$delay, AHB_M2$m_peq$notify$peqInUse[2], AHB_M2$m_peq$notify$peq_element$ctrl[2]);
AHB_M2$m_peq$peq_element3 = peq_element$data(AHB_M2$tlm2_master_to_ahb$peq_cb$param$tran, AHB_M2$m_peq$peq_element$param$trans, AHB_M2$m_peq$fetch$peq_fetch$ctrl, AHB_M2$tlm2_master_to_ahb$peq_cb$param$phase, AHB_M2$m_peq$peq_element$param$phase, AHB_M2$m_peq$peq_element$param$delay, AHB_M2$m_peq$notify$peqInUse[3], AHB_M2$m_peq$notify$peq_element$ctrl[3]);
AHB_M2$m_peq$peq_fetch = peq_fetch$data(AHB_M2$tlm2_master_to_ahb$peq_cb$ctrl, AHB_M2$m_peq$fetch$peq_fetch$ctrl);
AHB_M2$m_peq$peq_notify = peq_notify$data$4(AHB_M2$m_peq$notify$peqInUse, AHB_M2$m_peq$notify$peq_notify$ctrl, AHB_M2$m_peq$notify$peq_element$ctrl);
AHB_M2$thread0$sensitive = tlm2_master_to_ahb$thread0$sensitiveTemp(AHB_M2$thread0$sensitivechan, clk$change$wait);
AHB_M2$thread0$starter = MethodStarterNoInitTemplate(AHB_M2$tlm2_master_to_ahb$clock_tick$ctrl, AHB_M2$thread0$sensitivechan);
AHB_M2$tlm2_master_to_ahb$tlm2_master_to_ahb$busGranted = tlm2_master_to_ahb$busGranted(AHB_M2$tlm2_master_to_ahb$startRequest$ctrl, AHB_M2$tlm2_master_to_ahb$busGranted$ctrl, AHB_M2$current_trans, AHB_M2$tlm2_master_to_ahb$resumeRequest$ctrl, AHB_M2$m_txn_count);
AHB_M2$tlm2_master_to_ahb$tlm2_master_to_ahb$busNotGranted = tlm2_master_to_ahb$busNotGranted(AHB_Bus$ahb_simple_bus$nb_transport_fw$param$phase, AHB_Bus$ahb_simple_bus$nb_transport_fw$param$tran, AHB_Bus$ahb_simple_bus$nb_transport_fw$ctrl, AHB_Bus$ahb_simple_bus$nb_transport_fw$param$t, AHB_M2$tlm2_master_to_ahb$busNotGranted$ctrl, AHB_Bus$ahb_simple_bus$nb_transport_fw$return, AHB_M2$current_trans, AHB_M2$m_bus_req_pending, AHB_M2$m_bus_granted);
AHB_M2$tlm2_master_to_ahb$tlm2_master_to_ahb$clock_tick = tlm2_master_to_ahb$clock_tick(AHB_M2$tlm2_master_to_ahb$requestProcess$ctrl, AHB_M2$tlm2_master_to_ahb$clock_tick$ctrl, AHB_M2$tlm2_master_to_ahb$dataProcess$ctrl);
AHB_M2$tlm2_master_to_ahb$tlm2_master_to_ahb$dataProcess = tlm2_master_to_ahb$dataProcess(AHB_M2$current_DataLength, AHB_M2$tlm2_master_to_ahb$sendData$ctrl, AHB_M2$tlm2_master_to_ahb$dataProcess$ctrl, AHB_M2$m_restart_pending_req, AHB_M2$m_request_pending, AHB_M2$m_data_pending, AHB_M2$current_trans, AHB_M2$m_txn_count, AHB_M2$m_data_count);
AHB_M2$tlm2_master_to_ahb$tlm2_master_to_ahb$nb_transport_bw = tlm2_master_to_ahb$nb_transport_bw(AHB_M2$m_peq$notify$peq_notify$ctrl, AHB_M2$m_peq$peq_element$param$delay, AHB_M2$tlm2_master_to_ahb$nb_transport_bw$param$t, AHB_M2$tlm2_master_to_ahb$nb_transport_bw$return, AHB_M2$tlm2_master_to_ahb$nb_transport_bw$ctrl, AHB_M2$m_peq$peq_element$param$phase, AHB_M2$tlm2_master_to_ahb$nb_transport_bw$param$phase, AHB_M2$m_peq$peq_element$param$trans, AHB_M2$tlm2_master_to_ahb$nb_transport_bw$param$tran);
AHB_M2$tlm2_master_to_ahb$tlm2_master_to_ahb$peq_cb = tlm2_master_to_ahb$peq_cb(AHB_M2$tlm2_master_to_ahb$requestProcess$ctrl, AHB_M2$b_transport_finished_ev$notify_imm, AHB_M2$tlm2_master_to_ahb$peq_cb$param$phase, AHB_M2$tlm2_master_to_ahb$dataProcess$ctrl, AHB_M2$m_restart_pending_req, AHB_M2$m_request_pending, AHB_M2$tlm2_master_to_ahb$peq_cb$ctrl, AHB_M2$tlm2_master_to_ahb$receiveData$ctrl, AHB_M2$tlm2_master_to_ahb$peq_cb$param$tran, AHB_M2$m_data_pending, AHB_M2$current_trans, AHB_M2$m_txn_count, AHB_M2$m_bus_req_pending, AHB_M2$m_bus_granted, AHB_M2$m_data_count, AHB_M2$tlm2_master_to_ahb$receiveData$param$tran);
AHB_M2$tlm2_master_to_ahb$tlm2_master_to_ahb$receiveData = tlm2_master_to_ahb$receiveData(AHB_M2$b_transport_finished_ev$notify_imm, AHB_M2$tlm2_master_to_ahb$receiveData$ctrl, AHB_M2$m_data_pending, AHB_M2$m_data_count, AHB_M2$tlm2_master_to_ahb$receiveData$param$tran);
AHB_M2$tlm2_master_to_ahb$tlm2_master_to_ahb$requestProcess = tlm2_master_to_ahb$requestProcess(AHB_M2$tlm2_master_to_ahb$requestProcess$ctrl, AHB_M2$current_DataLength, AHB_M2$tlm2_master_to_ahb$busNotGranted$ctrl, AHB_M2$tlm2_master_to_ahb$busGranted$ctrl, AHB_M2$current_trans, AHB_M2$m_txn_count, AHB_M2$m_bus_granted);
AHB_M2$tlm2_master_to_ahb$tlm2_master_to_ahb$resumeRequest = tlm2_master_to_ahb$resumeRequest(AHB_Bus$ahb_simple_bus$nb_transport_fw$param$phase, AHB_Bus$ahb_simple_bus$nb_transport_fw$param$tran, AHB_Bus$ahb_simple_bus$nb_transport_fw$ctrl, AHB_Bus$ahb_simple_bus$nb_transport_fw$param$t, AHB_M2$m_restart_pending_req, AHB_M2$m_request_pending, AHB_M2$m_data_pending, AHB_Bus$ahb_simple_bus$nb_transport_fw$return, AHB_M2$current_trans, AHB_M2$tlm2_master_to_ahb$resumeRequest$ctrl, AHB_M2$m_txn_count);
AHB_M2$tlm2_master_to_ahb$tlm2_master_to_ahb$sendData = tlm2_master_to_ahb$sendData(AHB_Bus$ahb_simple_bus$nb_transport_fw$param$phase, AHB_M2$b_transport_finished_ev$notify_imm, AHB_Bus$ahb_simple_bus$nb_transport_fw$param$tran, AHB_M2$tlm2_master_to_ahb$sendData$ctrl, AHB_Bus$ahb_simple_bus$nb_transport_fw$ctrl, AHB_Bus$ahb_simple_bus$nb_transport_fw$param$t, AHB_M2$m_data_pending, AHB_Bus$ahb_simple_bus$nb_transport_fw$return, AHB_M2$current_trans, AHB_M2$m_data_count);
AHB_M2$tlm2_master_to_ahb$tlm2_master_to_ahb$startRequest = tlm2_master_to_ahb$startRequest(AHB_Bus$ahb_simple_bus$nb_transport_fw$param$phase, AHB_Bus$ahb_simple_bus$nb_transport_fw$param$tran, AHB_Bus$ahb_simple_bus$nb_transport_fw$ctrl, AHB_M2$tlm2_master_to_ahb$startRequest$ctrl, AHB_Bus$ahb_simple_bus$nb_transport_fw$param$t, AHB_M2$m_request_pending, AHB_Bus$ahb_simple_bus$nb_transport_fw$return, AHB_M2$current_trans, AHB_M2$m_txn_count, AHB_M2$m_data_count);
AHB_S1$ahb_simple_mem$ahb_simple_mem$nb_transport_fw = ahb_simple_mem$nb_transport_fw(AHB_S1$m_peq$notify$peq_notify$ctrl, AHB_S1$m_peq$peq_element$param$delay, AHB_S1$ahb_simple_mem$nb_transport_fw$ctrl, AHB_S1$ahb_simple_mem$nb_transport_fw$param$t, AHB_S1$ahb_simple_mem$nb_transport_fw$return, AHB_S1$ahb_simple_mem$nb_transport_fw$param$tran, AHB_S1$ahb_simple_mem$nb_transport_fw$param$phase, AHB_S1$m_peq$peq_element$param$phase, AHB_S1$m_peq$peq_element$param$trans);
AHB_S1$ahb_simple_mem$ahb_simple_mem$peq_cb = ahb_simple_mem$peq_cb(AHB_S1$txn_address, AHB_S1$counter, AHB_S1$ahb_simple_mem$peq_cb$param$phase, AHB_S1$ahb_simple_mem$peq_cb$ctrl, AHB_S1$ahb_simple_mem$peq_cb$param$tran, AHB_S1$m_data_pending, AHB_S1$current_trans, AHB_S1$txn_burst_len);
AHB_S1$ahb_simple_mem$ahb_simple_mem$readData = ahb_simple_mem$readData(AHB_S1$txn_address, AHB_S1$counter, AHB_S1$ahb_simple_mem$readData$ctrl, AHB_Bus$ahb_simple_bus$nb_transport_bw$ctrl, AHB_Bus$ahb_simple_bus$nb_transport_bw$param$tran, AHB_Bus$ahb_simple_bus$nb_transport_bw$param$t, AHB_Bus$ahb_simple_bus$nb_transport_bw$return, AHB_S1$m_data_pending, AHB_S1$current_trans, AHB_S1$baseAddr, AHB_S1$ahb_simple_mem$readData$param$burst_size, AHB_S1$MEM, AHB_Bus$ahb_simple_bus$nb_transport_bw$param$phase);
AHB_S1$ahb_simple_mem$ahb_simple_mem$responseProcess = ahb_simple_mem$responseProcess(AHB_S1$ahb_simple_mem$writeData$ctrl, AHB_S1$txn_address, AHB_S1$ahb_simple_mem$writeData$param$burst_size, AHB_S1$counter, AHB_S1$ahb_simple_mem$readData$ctrl, AHB_S1$ahb_simple_mem$responseProcess$ctrl, AHB_S1$m_data_pending, AHB_S1$current_trans, AHB_S1$txn_burst_len, AHB_S1$ahb_simple_mem$readData$param$burst_size);
AHB_S1$ahb_simple_mem$ahb_simple_mem$writeData = ahb_simple_mem$writeData(AHB_S1$ahb_simple_mem$writeData$ctrl, AHB_S1$txn_address, AHB_S1$ahb_simple_mem$writeData$param$burst_size, AHB_S1$counter, AHB_Bus$ahb_simple_bus$nb_transport_bw$ctrl, AHB_Bus$ahb_simple_bus$nb_transport_bw$param$tran, AHB_Bus$ahb_simple_bus$nb_transport_bw$param$t, AHB_Bus$ahb_simple_bus$nb_transport_bw$return, AHB_S1$m_data_pending, AHB_S1$current_trans, AHB_S1$baseAddr, AHB_S1$MEM, AHB_Bus$ahb_simple_bus$nb_transport_bw$param$phase);
AHB_S1$m_peq$peq_element0 = peq_element$data(AHB_S1$ahb_simple_mem$peq_cb$param$tran, AHB_S1$m_peq$peq_element$param$trans, AHB_S1$m_peq$fetch$peq_fetch$ctrl, AHB_S1$ahb_simple_mem$peq_cb$param$phase, AHB_S1$m_peq$peq_element$param$phase, AHB_S1$m_peq$peq_element$param$delay, AHB_S1$m_peq$notify$peqInUse[0], AHB_S1$m_peq$notify$peq_element$ctrl[0]);
AHB_S1$m_peq$peq_element1 = peq_element$data(AHB_S1$ahb_simple_mem$peq_cb$param$tran, AHB_S1$m_peq$peq_element$param$trans, AHB_S1$m_peq$fetch$peq_fetch$ctrl, AHB_S1$ahb_simple_mem$peq_cb$param$phase, AHB_S1$m_peq$peq_element$param$phase, AHB_S1$m_peq$peq_element$param$delay, AHB_S1$m_peq$notify$peqInUse[1], AHB_S1$m_peq$notify$peq_element$ctrl[1]);
AHB_S1$m_peq$peq_element2 = peq_element$data(AHB_S1$ahb_simple_mem$peq_cb$param$tran, AHB_S1$m_peq$peq_element$param$trans, AHB_S1$m_peq$fetch$peq_fetch$ctrl, AHB_S1$ahb_simple_mem$peq_cb$param$phase, AHB_S1$m_peq$peq_element$param$phase, AHB_S1$m_peq$peq_element$param$delay, AHB_S1$m_peq$notify$peqInUse[2], AHB_S1$m_peq$notify$peq_element$ctrl[2]);
AHB_S1$m_peq$peq_element3 = peq_element$data(AHB_S1$ahb_simple_mem$peq_cb$param$tran, AHB_S1$m_peq$peq_element$param$trans, AHB_S1$m_peq$fetch$peq_fetch$ctrl, AHB_S1$ahb_simple_mem$peq_cb$param$phase, AHB_S1$m_peq$peq_element$param$phase, AHB_S1$m_peq$peq_element$param$delay, AHB_S1$m_peq$notify$peqInUse[3], AHB_S1$m_peq$notify$peq_element$ctrl[3]);
AHB_S1$m_peq$peq_fetch = peq_fetch$data(AHB_S1$ahb_simple_mem$peq_cb$ctrl, AHB_S1$m_peq$fetch$peq_fetch$ctrl);
AHB_S1$m_peq$peq_notify = peq_notify$data$4(AHB_S1$m_peq$notify$peqInUse, AHB_S1$m_peq$notify$peq_notify$ctrl, AHB_S1$m_peq$notify$peq_element$ctrl);
AHB_S1$thread0$sensitive = ahb_simple_mem$thread0$sensitiveTemp(AHB_S1$thread0$sensitivechan, clk$change$wait);
AHB_S1$thread0$starter = MethodStarterNoInitTemplate(AHB_S1$ahb_simple_mem$responseProcess$ctrl, AHB_S1$thread0$sensitivechan);
AHB_S2$ahb_simple_mem$ahb_simple_mem$nb_transport_fw = ahb_simple_mem$nb_transport_fw(AHB_S2$m_peq$notify$peq_notify$ctrl, AHB_S2$m_peq$peq_element$param$delay, AHB_S2$ahb_simple_mem$nb_transport_fw$ctrl, AHB_S2$ahb_simple_mem$nb_transport_fw$param$t, AHB_S2$ahb_simple_mem$nb_transport_fw$return, AHB_S2$ahb_simple_mem$nb_transport_fw$param$tran, AHB_S2$ahb_simple_mem$nb_transport_fw$param$phase, AHB_S2$m_peq$peq_element$param$phase, AHB_S2$m_peq$peq_element$param$trans);
AHB_S2$ahb_simple_mem$ahb_simple_mem$peq_cb = ahb_simple_mem$peq_cb(AHB_S2$txn_address, AHB_S2$counter, AHB_S2$ahb_simple_mem$peq_cb$param$phase, AHB_S2$ahb_simple_mem$peq_cb$ctrl, AHB_S2$ahb_simple_mem$peq_cb$param$tran, AHB_S2$m_data_pending, AHB_S2$current_trans, AHB_S2$txn_burst_len);
AHB_S2$ahb_simple_mem$ahb_simple_mem$readData = ahb_simple_mem$readData(AHB_S2$txn_address, AHB_S2$counter, AHB_S2$ahb_simple_mem$readData$ctrl, AHB_Bus$ahb_simple_bus$nb_transport_bw$ctrl, AHB_Bus$ahb_simple_bus$nb_transport_bw$param$tran, AHB_Bus$ahb_simple_bus$nb_transport_bw$param$t, AHB_Bus$ahb_simple_bus$nb_transport_bw$return, AHB_S2$m_data_pending, AHB_S2$current_trans, AHB_S2$baseAddr, AHB_S2$ahb_simple_mem$readData$param$burst_size, AHB_S2$MEM, AHB_Bus$ahb_simple_bus$nb_transport_bw$param$phase);
AHB_S2$ahb_simple_mem$ahb_simple_mem$responseProcess = ahb_simple_mem$responseProcess(AHB_S2$ahb_simple_mem$writeData$ctrl, AHB_S2$txn_address, AHB_S2$ahb_simple_mem$writeData$param$burst_size, AHB_S2$counter, AHB_S2$ahb_simple_mem$readData$ctrl, AHB_S2$ahb_simple_mem$responseProcess$ctrl, AHB_S2$m_data_pending, AHB_S2$current_trans, AHB_S2$txn_burst_len, AHB_S2$ahb_simple_mem$readData$param$burst_size);
AHB_S2$ahb_simple_mem$ahb_simple_mem$writeData = ahb_simple_mem$writeData(AHB_S2$ahb_simple_mem$writeData$ctrl, AHB_S2$txn_address, AHB_S2$ahb_simple_mem$writeData$param$burst_size, AHB_S2$counter, AHB_Bus$ahb_simple_bus$nb_transport_bw$ctrl, AHB_Bus$ahb_simple_bus$nb_transport_bw$param$tran, AHB_Bus$ahb_simple_bus$nb_transport_bw$param$t, AHB_Bus$ahb_simple_bus$nb_transport_bw$return, AHB_S2$m_data_pending, AHB_S2$current_trans, AHB_S2$baseAddr, AHB_S2$MEM, AHB_Bus$ahb_simple_bus$nb_transport_bw$param$phase);
AHB_S2$m_peq$peq_element0 = peq_element$data(AHB_S2$ahb_simple_mem$peq_cb$param$tran, AHB_S2$m_peq$peq_element$param$trans, AHB_S2$m_peq$fetch$peq_fetch$ctrl, AHB_S2$ahb_simple_mem$peq_cb$param$phase, AHB_S2$m_peq$peq_element$param$phase, AHB_S2$m_peq$peq_element$param$delay, AHB_S2$m_peq$notify$peqInUse[0], AHB_S2$m_peq$notify$peq_element$ctrl[0]);
AHB_S2$m_peq$peq_element1 = peq_element$data(AHB_S2$ahb_simple_mem$peq_cb$param$tran, AHB_S2$m_peq$peq_element$param$trans, AHB_S2$m_peq$fetch$peq_fetch$ctrl, AHB_S2$ahb_simple_mem$peq_cb$param$phase, AHB_S2$m_peq$peq_element$param$phase, AHB_S2$m_peq$peq_element$param$delay, AHB_S2$m_peq$notify$peqInUse[1], AHB_S2$m_peq$notify$peq_element$ctrl[1]);
AHB_S2$m_peq$peq_element2 = peq_element$data(AHB_S2$ahb_simple_mem$peq_cb$param$tran, AHB_S2$m_peq$peq_element$param$trans, AHB_S2$m_peq$fetch$peq_fetch$ctrl, AHB_S2$ahb_simple_mem$peq_cb$param$phase, AHB_S2$m_peq$peq_element$param$phase, AHB_S2$m_peq$peq_element$param$delay, AHB_S2$m_peq$notify$peqInUse[2], AHB_S2$m_peq$notify$peq_element$ctrl[2]);
AHB_S2$m_peq$peq_element3 = peq_element$data(AHB_S2$ahb_simple_mem$peq_cb$param$tran, AHB_S2$m_peq$peq_element$param$trans, AHB_S2$m_peq$fetch$peq_fetch$ctrl, AHB_S2$ahb_simple_mem$peq_cb$param$phase, AHB_S2$m_peq$peq_element$param$phase, AHB_S2$m_peq$peq_element$param$delay, AHB_S2$m_peq$notify$peqInUse[3], AHB_S2$m_peq$notify$peq_element$ctrl[3]);
AHB_S2$m_peq$peq_fetch = peq_fetch$data(AHB_S2$ahb_simple_mem$peq_cb$ctrl, AHB_S2$m_peq$fetch$peq_fetch$ctrl);
AHB_S2$m_peq$peq_notify = peq_notify$data$4(AHB_S2$m_peq$notify$peqInUse, AHB_S2$m_peq$notify$peq_notify$ctrl, AHB_S2$m_peq$notify$peq_element$ctrl);
AHB_S2$thread0$sensitive = ahb_simple_mem$thread0$sensitiveTemp(AHB_S2$thread0$sensitivechan, clk$change$wait);
AHB_S2$thread0$starter = MethodStarterNoInitTemplate(AHB_S2$ahb_simple_mem$responseProcess$ctrl, AHB_S2$thread0$sensitivechan);
TLM2_M1$pos_clk_edge = SCEventTemplate(TLM2_M1$pos_clk_edge$notify_imm, TLM2_M1$pos_clk_edge$notify_t, TLM2_M1$pos_clk_edge$notify, TLM2_M1$pos_clk_edge$wait);
TLM2_M1$thread0$sensitive = tlm2_simple_master$thread0$sensitiveTemp(TLM2_M1$thread0$sensitivechan, clk$change$wait);
TLM2_M1$thread0$starter = MethodStarterNoInitTemplate(TLM2_M1$tlm2_simple_master$clock_tick$ctrl, TLM2_M1$thread0$sensitivechan);
TLM2_M1$thread1$AHB_M1$tlm2_master_to_ahb$tlm2_master_to_ahb$b_transport = tlm2_master_to_ahb$b_transport(AHB_M1$current_Address, AHB_M1$current_DataLength, TLM2_M1$thread1$AHB_M1$tlm2_master_to_ahb$b_transport$param$tran, AHB_M1$current_trans, AHB_M1$m_txn_count, AHB_M1$b_transport_finished_ev$wait, TLM2_M1$thread1$AHB_M1$tlm2_master_to_ahb$b_transport$param$t, TLM2_M1$thread1$AHB_M1$tlm2_master_to_ahb$b_transport$ctrl, AHB_M1$master_id, AHB_M1$current_Command);
TLM2_M1$thread1$sensitive = tlm2_simple_master$thread1$sensitiveTemp(TLM2_M1$thread1$sensitivechan);
TLM2_M1$thread1$starter = ThreadStarterTemplate(TLM2_M1$thread1$tlm2_simple_master$thread_process$ctrl);
TLM2_M1$thread1$tlm2_simple_master$tlm2_simple_master$thread_process = tlm2_simple_master$thread_process(TLM2_M1$pos_clk_edge$wait, TLM2_M1$thread1$AHB_M1$tlm2_master_to_ahb$b_transport$param$tran, TLM2_M1$d, TLM2_M1$thread1$tlm2_simple_master$thread_process$ctrl, TLM2_M1$thread1$AHB_M1$tlm2_master_to_ahb$b_transport$ctrl, TLM2_M1$thread1$AHB_M1$tlm2_master_to_ahb$b_transport$param$t);
TLM2_M1$tlm2_simple_master$tlm2_simple_master$clock_tick = tlm2_simple_master$clock_tick(TLM2_M1$pos_clk_edge$notify_imm, TLM2_M1$tlm2_simple_master$clock_tick$ctrl);
TLM2_M2$pos_clk_edge = SCEventTemplate(TLM2_M2$pos_clk_edge$notify_imm, TLM2_M2$pos_clk_edge$notify_t, TLM2_M2$pos_clk_edge$notify, TLM2_M2$pos_clk_edge$wait);
TLM2_M2$thread0$sensitive = tlm2_simple_master$thread0$sensitiveTemp(TLM2_M2$thread0$sensitivechan, clk$change$wait);
TLM2_M2$thread0$starter = MethodStarterNoInitTemplate(TLM2_M2$tlm2_simple_master$clock_tick$ctrl, TLM2_M2$thread0$sensitivechan);
TLM2_M2$thread1$AHB_M2$tlm2_master_to_ahb$tlm2_master_to_ahb$b_transport = tlm2_master_to_ahb$b_transport(AHB_M2$current_Address, AHB_M2$current_DataLength, TLM2_M2$thread1$AHB_M2$tlm2_master_to_ahb$b_transport$param$tran, AHB_M2$current_trans, AHB_M2$m_txn_count, AHB_M2$b_transport_finished_ev$wait, TLM2_M2$thread1$AHB_M2$tlm2_master_to_ahb$b_transport$param$t, TLM2_M2$thread1$AHB_M2$tlm2_master_to_ahb$b_transport$ctrl, AHB_M2$master_id, AHB_M2$current_Command);
TLM2_M2$thread1$sensitive = tlm2_simple_master$thread1$sensitiveTemp(TLM2_M2$thread1$sensitivechan);
TLM2_M2$thread1$starter = ThreadStarterTemplate(TLM2_M2$thread1$tlm2_simple_master$thread_process$ctrl);
TLM2_M2$thread1$tlm2_simple_master$tlm2_simple_master$thread_process = tlm2_simple_master$thread_process(TLM2_M2$pos_clk_edge$wait, TLM2_M2$thread1$AHB_M2$tlm2_master_to_ahb$b_transport$param$tran, TLM2_M2$d, TLM2_M2$thread1$tlm2_simple_master$thread_process$ctrl, TLM2_M2$thread1$AHB_M2$tlm2_master_to_ahb$b_transport$ctrl, TLM2_M2$thread1$AHB_M2$tlm2_master_to_ahb$b_transport$param$t);
TLM2_M2$tlm2_simple_master$tlm2_simple_master$clock_tick = tlm2_simple_master$clock_tick(TLM2_M2$pos_clk_edge$notify_imm, TLM2_M2$tlm2_simple_master$clock_tick$ctrl);
clk$change = SCEventTemplate(clk$change$notify_imm, clk$change$notify_t, clk$change$notify, clk$change$wait);
clk$edge = SCEventTemplate(clk$edge$notify_imm, clk$edge$notify_t, clk$edge$notify, clk$edge$wait);
clk$thread0$sc_clock$sc_clock$run = sc_clock$run(clk$period, clk$edge$notify, clk$change$notify, clk$thread0$sc_clock$run$ctrl, clk$change$notify_t, clk$thread0$timeoutevent$wait, clk$thread0$timeoutevent$notify, clk$val, clk$edge$notify_t, clk$thread0$timeoutevent$notify_t);
clk$thread0$sensitive = sc_clock$thread0$sensitiveTemp(clk$thread0$sensitivechan);
clk$thread0$starter = ThreadStarterTemplate(clk$thread0$sc_clock$run$ctrl);
clk$thread0$timeoutevent = SCEventTemplate(clk$thread0$timeoutevent$notify_imm, clk$thread0$timeoutevent$notify_t, clk$thread0$timeoutevent$notify, clk$thread0$timeoutevent$wait);
initialization = InitializerTemplate();
scheduler = SchedulerTemplate();
scmain = SCMainTemplate();


system AHB_Bus$ahb_simple_bus$ahb_simple_bus$arbitrate,
AHB_Bus$ahb_simple_bus$ahb_simple_bus$bus_grant,
AHB_Bus$ahb_simple_bus$ahb_simple_bus$bus_ungrant,
AHB_Bus$ahb_simple_bus$ahb_simple_bus$get_index,
AHB_Bus$ahb_simple_bus$ahb_simple_bus$nb_transport_bw,
AHB_Bus$ahb_simple_bus$ahb_simple_bus$nb_transport_fw,
AHB_Bus$ahb_simple_bus$ahb_simple_bus$pendingReqProcess,
AHB_Bus$bus_grant_ev,
AHB_Bus$bus_ungrant_ev,
AHB_Bus$end_data_ev,
AHB_Bus$thread0$sensitive,
AHB_Bus$thread0$starter,
AHB_Bus$thread1$sensitive,
AHB_Bus$thread1$starter,
AHB_Bus$thread2$sensitive,
AHB_Bus$thread2$starter,
AHB_M1$b_transport_finished_ev,
AHB_M1$m_peq$peq_element0,
AHB_M1$m_peq$peq_element1,
AHB_M1$m_peq$peq_element2,
AHB_M1$m_peq$peq_element3,
AHB_M1$m_peq$peq_fetch,
AHB_M1$m_peq$peq_notify,
AHB_M1$thread0$sensitive,
AHB_M1$thread0$starter,
AHB_M1$tlm2_master_to_ahb$tlm2_master_to_ahb$busGranted,
AHB_M1$tlm2_master_to_ahb$tlm2_master_to_ahb$busNotGranted,
AHB_M1$tlm2_master_to_ahb$tlm2_master_to_ahb$clock_tick,
AHB_M1$tlm2_master_to_ahb$tlm2_master_to_ahb$dataProcess,
AHB_M1$tlm2_master_to_ahb$tlm2_master_to_ahb$nb_transport_bw,
AHB_M1$tlm2_master_to_ahb$tlm2_master_to_ahb$peq_cb,
AHB_M1$tlm2_master_to_ahb$tlm2_master_to_ahb$receiveData,
AHB_M1$tlm2_master_to_ahb$tlm2_master_to_ahb$requestProcess,
AHB_M1$tlm2_master_to_ahb$tlm2_master_to_ahb$resumeRequest,
AHB_M1$tlm2_master_to_ahb$tlm2_master_to_ahb$sendData,
AHB_M1$tlm2_master_to_ahb$tlm2_master_to_ahb$startRequest,
AHB_M2$b_transport_finished_ev,
AHB_M2$m_peq$peq_element0,
AHB_M2$m_peq$peq_element1,
AHB_M2$m_peq$peq_element2,
AHB_M2$m_peq$peq_element3,
AHB_M2$m_peq$peq_fetch,
AHB_M2$m_peq$peq_notify,
AHB_M2$thread0$sensitive,
AHB_M2$thread0$starter,
AHB_M2$tlm2_master_to_ahb$tlm2_master_to_ahb$busGranted,
AHB_M2$tlm2_master_to_ahb$tlm2_master_to_ahb$busNotGranted,
AHB_M2$tlm2_master_to_ahb$tlm2_master_to_ahb$clock_tick,
AHB_M2$tlm2_master_to_ahb$tlm2_master_to_ahb$dataProcess,
AHB_M2$tlm2_master_to_ahb$tlm2_master_to_ahb$nb_transport_bw,
AHB_M2$tlm2_master_to_ahb$tlm2_master_to_ahb$peq_cb,
AHB_M2$tlm2_master_to_ahb$tlm2_master_to_ahb$receiveData,
AHB_M2$tlm2_master_to_ahb$tlm2_master_to_ahb$requestProcess,
AHB_M2$tlm2_master_to_ahb$tlm2_master_to_ahb$resumeRequest,
AHB_M2$tlm2_master_to_ahb$tlm2_master_to_ahb$sendData,
AHB_M2$tlm2_master_to_ahb$tlm2_master_to_ahb$startRequest,
AHB_S1$ahb_simple_mem$ahb_simple_mem$nb_transport_fw,
AHB_S1$ahb_simple_mem$ahb_simple_mem$peq_cb,
AHB_S1$ahb_simple_mem$ahb_simple_mem$readData,
AHB_S1$ahb_simple_mem$ahb_simple_mem$responseProcess,
AHB_S1$ahb_simple_mem$ahb_simple_mem$writeData,
AHB_S1$m_peq$peq_element0,
AHB_S1$m_peq$peq_element1,
AHB_S1$m_peq$peq_element2,
AHB_S1$m_peq$peq_element3,
AHB_S1$m_peq$peq_fetch,
AHB_S1$m_peq$peq_notify,
AHB_S1$thread0$sensitive,
AHB_S1$thread0$starter,
AHB_S2$ahb_simple_mem$ahb_simple_mem$nb_transport_fw,
AHB_S2$ahb_simple_mem$ahb_simple_mem$peq_cb,
AHB_S2$ahb_simple_mem$ahb_simple_mem$readData,
AHB_S2$ahb_simple_mem$ahb_simple_mem$responseProcess,
AHB_S2$ahb_simple_mem$ahb_simple_mem$writeData,
AHB_S2$m_peq$peq_element0,
AHB_S2$m_peq$peq_element1,
AHB_S2$m_peq$peq_element2,
AHB_S2$m_peq$peq_element3,
AHB_S2$m_peq$peq_fetch,
AHB_S2$m_peq$peq_notify,
AHB_S2$thread0$sensitive,
AHB_S2$thread0$starter,
TLM2_M1$pos_clk_edge,
TLM2_M1$thread0$sensitive,
TLM2_M1$thread0$starter,
TLM2_M1$thread1$AHB_M1$tlm2_master_to_ahb$tlm2_master_to_ahb$b_transport,
TLM2_M1$thread1$sensitive,
TLM2_M1$thread1$starter,
TLM2_M1$thread1$tlm2_simple_master$tlm2_simple_master$thread_process,
TLM2_M1$tlm2_simple_master$tlm2_simple_master$clock_tick,
TLM2_M2$pos_clk_edge,
TLM2_M2$thread0$sensitive,
TLM2_M2$thread0$starter,
TLM2_M2$thread1$AHB_M2$tlm2_master_to_ahb$tlm2_master_to_ahb$b_transport,
TLM2_M2$thread1$sensitive,
TLM2_M2$thread1$starter,
TLM2_M2$thread1$tlm2_simple_master$tlm2_simple_master$thread_process,
TLM2_M2$tlm2_simple_master$tlm2_simple_master$clock_tick,
clk$change,
clk$edge,
clk$thread0$sc_clock$sc_clock$run,
clk$thread0$sensitive,
clk$thread0$starter,
clk$thread0$timeoutevent,
initialization,
scheduler,
scmain;</system>
</nta>
